#!/usr/bin/python
# -*- coding:UTF-8 -*-

import os
import argparse
import sys
import json

binPaths = os.path.split(os.path.realpath(__file__))
dictPath = os.path.realpath(binPaths[0])
homePath = os.path.realpath(binPaths[0]+'/../..')
sys.path.append(homePath+'/lib')
sys.path.append(homePath+'/plugins/local/lib')


def usage():
    pname = os.path.basename(__file__)
    print(pname + " --lang <lang> eg : zh_CN or en_US ,default value zh_CN.\n")
    print('         --mode <mode> eg : truncate or append ,default value truncate.\n ')
    exit(1)


def getDefaultFieldKeys():
    defaultKeys = [
        '_OBJ_CATEGORY',
        '_OBJ_TYPE',
        'MGMT_IP',
        'MGMT_PORT',
        'SERVER_NAME',
        'VERSION',
        'BELONG_APPLICATION',
        'SN',
        'BRAND',
        'STATE',
        'IP',
        'PORT',
        'ADMIN_PORT',
        'ADMIN_SSL_PORT',
        'MON_PORT',
        'SSL_PORT'
    ]
    return defaultKeys


def getIcon(name):
    nameToIconMap = {
        'a10': 'tsfont-a10',
        'accessendpoint': 'tsfont-userinfo',
        'activemq': 'tsfont-activemq',
        'aix': 'tsfont-aix',
        'apache': 'tsfont-apache',
        'db2': 'tsfont-db2',
        'db': 'tsfont-ibm',
        'elasticsearch': 'tsfont-elasticsearch',
        'empty': 'tsfont-empty',
        'f5': 'tsfont-f5',
        'fcdev': 'tsfont-fcdev',
        'fcswitch': 'tsfont-fcswitch',
        'firewall': 'tsfont-firewall',
        'hadoop': 'tsfont-hadoop',
        'host': 'tsfont-host',
        'iis': 'tsfont-iis',
        'informix': 'tsfont-informix',
        'ins': 'tsfont-instance',
        'java': 'tsfont-java',
        'jboss': 'tsfont-jboss',
        'jetty': 'tsfont-jetty',
        'kafka': 'tsfont-kafka',
        'keepalive': 'tsfont-keepalive',
        'lighttpd': 'tsfont-lighttpd',
        'linux': 'tsfont-linux',
        'memcached': 'tsfont-memcached',
        'mongodb': 'tsfont-mongodb',
        'mssqlserver': 'tsfont-mssqlserver',
        'mysql': 'tsfont-mysql',
        'netdev': 'tsfont-devices',
        'nginx': 'tsfont-nginx',
        'novmtool': 'tsfont-yunweishenjishebei',
        'oracle': 'tsfont-oracle',
        'oracle-rac': 'tsfont-oracle-rac',
        'os': 'tsfont-os',
        'postgresql': 'tsfont-postgresql',
        'rabbitmq': 'tsfont-rabbitmq',
        'redis': 'tsfont-redis',
        'resin': 'tsfont-resin',
        'router': 'tsfont-router',
        'secdev': 'tsfont-Webyingyongfanghuxitong',
        'storage': 'tsfont-storage',
        'switch': 'tsfont-switch',
        'sybase': 'tsfont-sybase',
        'tomcat': 'tsfont-tomcat',
        'tuxedo': 'tsfont-tuxedo'
    }
    if name in nameToIconMap:
        return nameToIconMap[name]
    else:
        return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--lang', default='zh_CN', help='语言')
    parser.add_argument('--action', default='savetodb', help='执行操作（savetodb|append|remove|beautify）')
    parser.add_argument('--filter', default='{}', help='Match filter')
    parser.add_argument('--content', default='', help='Append的Json')

    args = parser.parse_args()
    lang = args.lang
    action = args.action

    binPaths = os.path.split(os.path.realpath(__file__))
    dictPath = os.path.abspath(binPaths[0])

    dirs = os.listdir(dictPath)

    dbclient = None
    collection = None
    if action == 'savetodb':
        import AutoExecUtils
        (dbclient, db) = AutoExecUtils.getDB()
        table = '_dictionary'
        collection = db[table]
        inspectDef = db['_inspectdef']

    for dfile in dirs:
        jsonFile = dictPath + "/" + dfile

        info = dfile.split('.')
        if (len(info) == 3 and info[1] == lang):
            name = info[0]
            print("INFO: Try to load json file:", dfile, "...")
            data = {}
            with open(jsonFile, 'r', encoding="utf-8") as f:
                data = json.load(f)
                f.close()

            hasError = False
            if 'collection' not in data:
                hasError = True
                print("ERROR: Object decription data does not defined attribue 'collection'.\n")
            if 'filter' not in data:
                hasError = True
                print("ERROR: Object decription data does not defined attribue 'filter'.\n")
            if 'label' not in data:
                hasError = True
                print("ERROR: Object decription data does not defined attribue 'label'.\n")

            if action == 'savetodb':
                print("INFO: Import", dfile, "start...")
                if hasError == False:
                    tableName = data['collection']
                    collection.delete_one({'name': name})

                    data['name'] = name
                    collection.replace_one({'name': name}, data, upsert=True)
                    collection.create_index([('name', 1)], name='idx_pk', unique=True)
                    print("INFO: Import", dfile, "success.")

                    # 获取已经选择进入巡检报告定义的字段
                    inspectObj = inspectDef.find_one({'name': name})
                    # 如果巡检定义不存在则自动生成一个空的定义
                    if inspectObj is None:
                        inspectObj = {'name': name,
                                      'label': data['label'],
                                      'icon': getIcon(name),
                                      'collection': data['collection'],
                                      'filter': data['filter'],
                                      'fields': [],
                                      'thresholds': []}
                    else:
                        inspectObj['icon'] = getIcon(name)
                        inspectObj['label'] = data['label']
                        inspectObj['collection'] = data['collection']
                        inspectObj['filter'] = data['filter']

                    # 获取已经定义的fields
                    inspectFields = []
                    inspectFieldsMap = {}
                    inspectFields = inspectObj['fields']
                    for fieldObj in inspectFields:
                        inspectFieldsMap[fieldObj['name']] = 1

                    # 如果集合定义中存在新的字段不在巡检定义里，则自动加入巡检定义中
                    for collectFieldObj in data['fields']:
                        if collectFieldObj['name'] not in inspectFieldsMap:
                            inspectFields.append({'name': collectFieldObj['name'],
                                                  'selected': 1})

                    inspectDef.replace_one({'name': name}, inspectObj, upsert=True)
                    inspectDef.create_index([('name', 1)], name='idx_pk', unique=True)
                    print("INFO: Update inspect define for ", dfile, "success.")
                else:
                    print("ERROR: Import", dfile, "failed.")

            elif action == 'remove':
                removeKey = args.content
                newFields = []
                fields = data['fields']
                for field in fields:
                    if 'name' in field and field['name'] == removeKey:
                        print("INFO: Remove field " + removeKey + " from " + dfile)
                        continue
                    else:
                        newFields.append(field)
                data['fields'] = newFields
                with open(jsonFile, 'w', encoding="utf-8") as f:
                    json.dump(data, f, indent=4, ensure_ascii=False)
                    f.close()

            elif action == 'append':
                content = args.content
                matchFilter = args.filter
                if content != '':
                    print("INFO: Append entry to ", dfile, "start...")
                    filterObj = json.loads(matchFilter)
                    jsonObj = json.loads(content)

                    filterMatched = True
                    for filterKey in filterObj.keys():
                        if filterKey not in data or data[filterKey] != filterObj[filterKey]:
                            print("INFO: " + data[filterKey] + " not match filter " + matchFilter)
                            filterMatched = False
                            break
                    if not filterMatched:
                        continue

                    if 'name' not in jsonObj:
                        print("ERROR: Attribute name not in json:", content)
                    if 'desc' not in jsonObj:
                        print("ERROR: Attribute desc not in json:", content)
                    if 'type' not in jsonObj:
                        print("ERROR: Attribute desc not in json:", content)
                    else:
                        typeVal = jsonObj['type']
                        if typeVal not in ('String', 'JsonArray', 'Int', 'Array'):
                            print("ERROR: Invalid attribute type:" + typeVal, ', only support String|JsonArray|int')
                            continue
                    data['fields'].append(jsonObj)
                    with open(jsonFile, 'w', encoding="utf-8") as f:
                        json.dump(data, f, indent=4, ensure_ascii=False)
                        f.close()

            elif action == 'beautify':
                print("INFO: Beautify ", dfile, "start...")
                fields = data['fields']

                fieldsMap = {}
                for field in fields:
                    fieldName = field['name']
                    fieldsMap[fieldName] = field

                newFields = []
                for defaultKey in getDefaultFieldKeys():
                    if defaultKey in fieldsMap:
                        newFields.append(fieldsMap[defaultKey])
                        del(fieldsMap[defaultKey])

                leftKeys = sorted(fieldsMap.keys())
                for key in leftKeys:
                    newFields.append(fieldsMap[key])

                data['fields'] = newFields
                with open(jsonFile, 'w', encoding="utf-8") as f:
                    json.dump(data, f, indent=4, ensure_ascii=False)
                    f.close()
                    print("INFO: Beautify ", dfile, "success.")
            else:
                print("ERROR: Action " + action + "not supported.")
    # 关闭连接
    if dbclient is not None:
        dbclient.close()
