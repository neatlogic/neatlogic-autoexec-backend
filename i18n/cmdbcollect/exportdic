#!/usr/bin/python3
# -*- coding: utf-8 -*-

from docx import Document
from docx import Document
from docx.oxml.ns import qn
from docx.shared import Pt,RGBColor
import os
import re
import json
import argparse


class wordManager:
  def __init__(self , outpath , lang , isVerbose):
    if lang is None :
      lang = 'zh_CN'
    self.lang = lang

    if isVerbose is None  : 
      isVerbose = 0 
    self.isVerbose = isVerbose
    
    filepath = os.path.split(os.path.realpath(__file__))[0]
    filepath = os.path.realpath(filepath)
    self.filepath = filepath

    if outpath is None  or outpath == '' :
      outpath = filepath + '/cmdb_attr.docx' 
    self.outpath = outpath

    table_titles = ["属性","属性类型","子集合","描述"]
    self.table_titles = table_titles

  def init_doc(self):
    document = Document()
    document.styles['Normal'].font.name = u'宋体'
    document.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), u'宋体')
    document.styles['Normal'].font.size = Pt(10.5)
    document.styles['Normal'].font.color.rgb = RGBColor(0,0,0)
    return document


  def  add_titile(self , doc , data , title=None ):
    #1级标题：0 <= lever <= 9
    if title is None :
      name='[' + data['label'] + ']' + data['collection_label'].replace(' ' , '')
      if isVerbose == 1 :
        print('INFO:: Add chapter to word' ,data['label'])

    title = doc.add_heading( name , 1)
    #title.add_run('\n' )  

  def add_paragraph(self , doc , data , text=None) :
    if text is None :
      docroot = data['docroot']
      if docroot is None or docroot == 'NULL' :
          docroot = ''
      text = "逻辑集合:" + data['collection'] +  "\t逻辑集合根目录:" + docroot
    paragraph = doc.add_paragraph( text)
    #paragraph.add_run('\n')

  def add_childtable(self , doc , data , text):
    #关联table的text
    self.add_paragraph(doc , data , text)

    #数据 
    self.add_table(doc , data)


  def add_table(self , doc , data) : 
      table = doc.add_table(rows=1, cols=len(self.table_titles))
      # 设置表格样式
      table.style = 'Light List Accent 1'
      # 设置标题
      title_cells = table.rows[0].cells
      for i in range(len(self.table_titles)):
          title_cells[i].text = self.table_titles[i]
      
      data_list = []
      if 'fields' in data :
        data_list = data['fields']
      elif isinstance(data,list) :
        data_list = data

      # 设置内容
      for field in data_list:
          row_cells = table.add_row().cells
          tp = field['type']
          name = field['name']
          desc = field['desc']
          child_res = ''
          if tp == 'JsonArray' or tp == 'JsonObject' :
              #集合名
              if 'label' in data:
                dic_name = data['label'].replace(' ' , '')
                child_res = dic_name + '_' + name 

          for i in range(len(self.table_titles)):
              if i == 0 :
                row_cells[i].text = name 
              elif i == 1 : 
                row_cells[i].text = tp
              elif i == 2 : 
                row_cells[i].text = child_res
              else:
                row_cells[i].text = desc 

          if child_res != '' and  'subset' in field :
            self.add_childtable(doc , field['subset'] , child_res)

  def save(self , doc):
    if os.path.isfile(self.outpath):
      try:
        os.remove(self.outpath)
      except BaseException as e:
        print(e)
    
    doc.save(self.outpath)
    if isVerbose == 1 :
        print('FINE:: Save Dic word file',self.outpath)

  def scan_data(self):
    data_list = []
    for filename in os.listdir(self.filepath):
      filepath = os.path.join(self.filepath, filename)
      if os.path.isfile(filepath):
        info = filepath.split(".")
        if (len(info) != 3) :
          continue 
        suffix = info[2]
        lang =  info[1]
        if suffix == "json" and lang == self.lang :
          if isVerbose == 1 :
            print('INFO:: Load file data' ,filepath)
          with open(filepath,'r',encoding='utf8') as fp:
            data_obj = json.load(fp)
            data_list.append(data_obj)
    return data_list

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--lang', default='zh_CN', help='')
    parser.add_argument('--outpath', default='', help='output file path')
    parser.add_argument('--verbose', default='0', help='verbose output')

    args = parser.parse_args()
    lang = args.lang
    outpath = args.outpath
    isVerbose = int(args.verbose)

    word = wordManager(outpath , lang , isVerbose)
    doc = word.init_doc()
    data_list = word.scan_data()
    #print(data_list)
    for data in data_list :
      #一级标题
      word.add_titile( doc , data)
      #段落
      word.add_paragraph(doc , data)
      #数据
      word.add_table( doc , data)
    word.save(doc)
