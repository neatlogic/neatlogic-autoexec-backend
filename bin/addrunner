#!/usr/bin/python3
# -*- coding: utf-8 -*-

import initenv
import os
import sys
import stat
import os.path
import select
import getpass
import paramiko
from paramiko.ssh_exception import SSHException

import argparse


def execOneHost(host, port, user, password, cmdList):
    cmd = ''
    for cmdPart in cmdList:
        cmd = cmd + "'{}' ".format(cmdPart)

    errCode = 0
    ssh = None
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, port, user, password)
        channel = ssh.get_transport().open_session()
        channel.set_combine_stderr(True)
        channel.exec_command(cmd)

        while True:
            r, w, x = select.select([channel], [], [], 10)
            while channel.recv_ready():
                print(channel.recv(4096).decode(errors='ignore'))
            if channel.exit_status_ready():
                errCode = channel.recv_exit_status()
                break

        if errCode == 0:
            print("FINEST: {}@{}:{} execute success.\n\n".format(user, host, port), end='')
        else:
            print("ERROR: {}@{}:{} execute failed.\n".format(user, host, port), end='')
    except Exception as ex:
        errCode = 2
        print("ERROR: {}@{}:{} execute failed, {}\n".format(user, host, port, ex), end='')
    finally:
        if ssh is not None:
            ssh.close()

    return errCode


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", action='store_true', default=False, help="Output verbose")
    parser.add_argument('--host', default='', help='SSH to host')
    parser.add_argument('--port', default='22', help='SSH Port')
    parser.add_argument('--user', default='root',  help='Connect user')

    args = parser.parse_args()
    port = args.port
    if port == "":
        port = 22
    else:
        port = int(port)

    password = getpass.getpass()

    HOME = os.environ.get('HOME')
    if HOME is None or HOME == '':
        print("ERROR: Can not determine HOME directory.")
        sys.exit(2)

    sshConfPath = '%s/.ssh' % (HOME)
    if os.path.exists(sshConfPath):
        os.makedirs(sshConfPath)
        os.chmod(sshConfPath, stat.S_IRWXU)

    identiyPath = '%s/.ssh/id_rsa' % (HOME)
    pubKeyPath = '%s/.ssh/id_rsa.pub' % (HOME)
    auhKeyPath = '%s/.ssh/authorized_keys' % (HOME)

    if not os.path.exists(identiyPath):
        os.system('ssh-keygen -t rsa -b 2048 -f "%s" -N "" -C "autoexec-runner@local"' % (identiyPath))
        os.system('cat "%s" >> "%s" && chmod 600 "%s"' % (pubKeyPath, auhKeyPath, auhKeyPath))

    pubKey = ''
    privateKey = ''
    with open(identiyPath, 'rb') as f:
        privateKey = f.read()
    with open(pubKeyPath, 'rb') as f:
        pubKey = f.read()

    cmdList = []
    cmd = '''
    if [ ! -e "~/.ssh" ];then
        mkdir ~/.ssh;
        chmod 700 ~/.ssh;
    fi;
    echo "%s" > ~/.ssh/id_rsa;
    echo "%s" > ~/.ssh/id_rsa.pub;
    grep "%s" ~/.ssh/authorized_keys;
    if [ ! "$?" = "0" ]; then;
        cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys;
    fi;
    chmod 600 ~/.ssh/*;
    '''.format(privateKey, pubKey)
    cmdList.append(cmd)

    errCode = execOneHost(args.host, port, args.user, password, cmdList)

    exit(errCode)
