#!/usr/bin/python3
# -*- coding: utf-8 -*-

import initenv
import os
import select
import os.path
import re
import paramiko
from paramiko.ssh_exception import SSHException

import argparse


def execOneHost(host, port, user, password, cmdList):
    cmd = ''
    for cmdPart in cmdList:
        cmd = cmd + "'{}' ".format(cmdPart)

    errCode = 0
    ssh = None
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, port, user, password)
        channel = ssh.get_transport().open_session()
        channel.set_combine_stderr(True)
        channel.exec_command(cmd)

        while True:
            r, w, x = select.select([channel], [], [], 10)
            while channel.recv_ready():
                print(channel.recv(4096).decode(errors='ignore'))
            if channel.exit_status_ready():
                errCode = channel.recv_exit_status()
                break

        if errCode == 0:
            print("FINEST: {}@{}:{} execute success.\n\n".format(user, host, port), end='')
        else:
            print("ERROR: {}@{}:{} execute failed.\n".format(user, host, port), end='')
    except Exception as ex:
        errCode = 2
        print("ERROR: {}@{}:{} execute failed, {}\n".format(user, host, port, ex), end='')
    finally:
        if ssh is not None:
            ssh.close()

    return errCode


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", action='store_true', default=False, help="Output verbose")
    parser.add_argument('--host', default='', help='SSH to host')
    parser.add_argument('--port', default='22', help='SSH Port')
    parser.add_argument('--user', default='root',  help='Connect user')
    parser.add_argument('--password', default='13456', help='Default password')
    parser.add_argument('--hostsfile', default='', help='Default password')
    parser.add_argument('rest', nargs=argparse.REMAINDER, help="Remote command to execute")

    args = parser.parse_args()
    port = args.port
    if port == "":
        port = 22
    else:
        port = int(port)

    cmdList = args.rest
    if len(cmdList) == 0:
        print("ERROR: Command not defined.\n", end='')
        exit(2)

    hostsFileDir = args.hostsfile

    hasError = 0

    if hostsFileDir != '':
        if not os.path.exists(hostsFileDir):
            print("ERROR: File {} not exists.\n".format(hostsFileDir), end='')
            os.exit(2)

        splitRe = re.compile("\s+")
        with open(hostsFileDir, 'r', encoding="utf-8") as hostFile:
            for line in hostFile:
                line = line.strip()
                if line == '' or line.startswith('#'):
                    next

                user = args.user
                password = args.password

                myHost = None
                myPort = port
                myUser = 'anonymouse'
                myPassword = 'nopassword'

                hInfoList = splitRe.split(line)

                hostAndPort = hInfoList[0].split(':')
                myHost = hostAndPort[0]
                if len(hostAndPort) > 1:
                    myPort = hostAndPort[1]

                if len(hInfoList) == 2:
                    myPassword = hInfoList[1]
                    myUser = user
                elif len(hInfoList) >= 3:
                    myUser = hInfoList[1]
                    myPassword = hInfoList[2]

                errCode = execOneHost(myHost, myPort, myUser, myPassword, cmdList)
                if errCode != 0:
                    hasError = 1
    else:
        errCode = execOneHost(args.host, port, args.user, args.password, cmdList)
        if errCode != 0:
            hasError = 1

    exit(hasError)
