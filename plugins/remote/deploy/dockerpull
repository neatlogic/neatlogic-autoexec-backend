#!/usr/bin/perl
use strict;
use FindBin;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname --registry Registry --project Project --image ImageName --tag TagName\n");
    print("              --username UserName --password Password");
    print("\n");
    print("       --registry: Docker registry\n");
    print("       --project: Project\n");
    print("       --image:   Image name\n");
    print("       --tagname: Tag name.\n");
    print("       --user:    Registry user name\n");
    print("       --password:Registry user password\n");

    exit(-1);
}

sub main {
    my ( $registry, $project, $image, $tagName );
    my ( $username, $password );

    my $pname = $FindBin::Script;

    GetOptions(
        'registry=s' => \$registry,
        'project=s'  => \$project,
        'image=s'    => \$image,
        'tagname=s'  => \$tagName,
        'user=s'     => \$username,
        'password=s' => \$password
    );

    if ( not defined($image) or not defined($registry) or not defined($tagName) ) {
        usage();
    }

    my $hasError = 0;

    #TODO:这里的docker命令是在远程OS上运行，需要确认是否需要sudo docker
    
    # login first
    my $loginCmd      = "echo  '$password' |docker login $registry --username '$username' --password-stdin";
    my $loginCmdPrint = "echo  '******' |docker login $registry --username '$username' --password-stdin";
    print("INFO:execute->$loginCmdPrint\n");
    my $loginRet = system($loginCmd);
    if ( $loginRet eq 0 ) {
        print("INFO: docker login success!\n");
    }
    else {
        $hasError = $hasError + 1;
        print("ERROR: docker login failed!\n");
        return $hasError;
    }

    my $cmd = "docker rmi $registry/$project/$image:$tagName $image:$tagName";
    print("INFO:execute->$cmd\n");

    my $ret = system($cmd );

    if ( $ret eq 0 ) {
        print("INFO: Register success!\n");
    }
    else {
        $hasError = $hasError + 1;
        print("INFO: $image is not exist!\n");
        return $hasError;
    }

    $cmd = "docker pull $registry/$project/$image:$tagName";
    print("INFO:execute->$cmd\n");
    $ret = system($cmd );

    if ( $ret eq 0 ) {
        print("INFO: Pull image success!\n");
    }
    else {
        $hasError = $hasError + 1;
        print("ERROR: Pull image failed.\n");
        return $hasError;
    }

    #my $cmd = "docker --tlsverify --tlscacert=/app/ezdeploy/certs/ca.pem --tlscert=/app/ezdeploy/certs/cert.pem --tlskey=/app/ezdeploy/certs/key.pem -H$host:$h_port tag $registry/library/$image:$env-$version $image:$env-$version";
    $cmd = "docker tag $registry/$project/$image:$tagName $image:$tagName";
    print("INFO:execute->$cmd\n");
    $ret = system($cmd );

    if ( $ret eq 0 ) {
        print("INFO: Tag image success.\n");
    }
    else {
        $hasError = $hasError + 1;
        print("ERROR: Tag image failed.\n");
    }

    return $hasError;
}

exit main();
