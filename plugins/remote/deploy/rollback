#!/usr/bin/perl
use IO::File;
use strict;
use FindBin;
use lib "$FindBin::Bin";
use Getopt::Long;
use Cwd 'abs_path';
use File::Basename;
use POSIX;
use Patcher;

Getopt::Long::Configure("pass_through");

my $homePath = abs_path("$FindBin::Bin/..");
my $progName = $FindBin::Script;
my @uname    = uname();
my $osType   = 'unix';
$osType = 'windows' if ( $uname[0] =~ /Windows/i );

sub usage {
    print("Usage:$progName --ins <instance name> --version <version> --backupdir <backup dir> --targetdir <target dir>\n");
    exit(-1);
}

sub main {
    if ( $osType eq 'windows' ) {
        $ENV{PATH} = "$homePath/../7-Zip;$ENV{ProgramFiles}/7-Zip;" . $ENV{PATH};
    }

    my $isVerbose = 0;
    my $insName;
    my $version;
    my $targetDir;
    my $backupDir;

    GetOptions(
        'v'           => \$isVerbose,
        'ins:s'       => \$insName,
        'version:s'   => \$version,
        'backupdir:s' => \$backupDir,
        'targetdir:s' => \$targetDir
    );

    my $hasOptionError = 0;
    if ( not defined($version) or $version eq '' ) {
        $hasOptionError = 1;
        print("ERROR: Version not defined(option --version).\n");
    }

    if ( not defined($targetDir) or $targetDir eq '' ) {
        $hasOptionError = 1;
        print("ERROR: Target directory not defined(option --targetdir).\n");
    }
    elsif ( not -e $targetDir ) {
        print("ERROR: Target directory:$targetDir not exist.\n");
    }

    if ( not defined($backupDir) or $backupDir eq '' ) {
        $hasOptionError = 1;
        print("ERROR: Backup directory not defined(option --backupdir).\n");
    }
    elsif ( not -d dirname($backupDir) ) {
        $hasOptionError = 1;
        my $backupRoot = dirname($backupDir);
        print("ERROR: Backup directory:$backupRoot not exist.\n");
    }

    if ( $hasOptionError == 1 ) {
        usage();
    }

    my $patcher = Patcher->new( $homePath, $backupDir, 5 );

    my $status = 0;
    $status = $patcher->rollback( $insName, $version );

    exit($status);
}

main();

