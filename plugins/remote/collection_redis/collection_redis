#!/usr/bin/perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib/perl-lib/lib/perl5";
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/";
use JSON;
use utf8;
use Encode;
use File::Basename;
use Getopt::Long;

use collection_unix;
use collection_windows;
use Utils;

sub usage {
    my $pname = basename($0);
    print("ERROR: must defined option  --auth <auth>\n");
    print("Usage: $pname [--auth <auth password>\n");
    print("       auth: redis auth password .\n");

    exit(1);
}

#设置主键判断数据是新增还是修改
sub uniqueName {
    my ($data)  = @_;
    my $agentIP = $data->{"agentIP"};
    my $port    = $data->{'端口'};

    my @rule         = ();
    my %rule_agentIp = ();
    $rule_agentIp{'agentIP'} = $agentIP;
    push @rule, \%rule_agentIp;

    my %rule_port = ();
    $rule_port{'端口'} = $port;
    push @rule, \%rule_port;

    return \@rule;
}

sub main {
    my ( $ishelp, $auth );

    GetOptions(
        'h|help'   => \$ishelp,
        'a|auth:s' => \$auth
    );

    usage() if ($ishelp);

    my $AUTOEXEC_NODE = $ENV{'AUTOEXEC_NODE'};
    my ( $targetIp, $targetPort );
    if ( defined $AUTOEXEC_NODE and $AUTOEXEC_NODE ne '' ) {
        $AUTOEXEC_NODE = decode_json($AUTOEXEC_NODE);
        $targetIp      = $AUTOEXEC_NODE->{'host'};
        $targetPort    = $AUTOEXEC_NODE->{'port'};
    }
    else {
        print("ERROR:: must set node param env .\n");
        usage();
    }

    if ( not defined($auth) ) {
        usage();
    }

    Utils::setEnv();

    my $os = `uname`;
    chomp($os);
    my @collectData;
    if ( $os eq 'Linux' or $os eq 'Aix' ) {
        @collectData = collection_unix::collect( $targetIp, $auth );
    }
    else {
        @collectData = collection_windows::collect( $targetIp, $auth );
    }

    my $plugin = {};
    $plugin->{"type"} = "collect";
    my @entityList = ();
    foreach my $data (@collectData) {
        my %entiry = ();
        $entiry{'data'}       = $data;
        $entiry{'table'}      = "collect_redis";
        $entiry{'uniqueName'} = uniqueName($data);
        push( @entityList, \%entiry );
    }
    $plugin->{"data"} = \@entityList;

    #定义插件的输出变量output
    my $out = {};
    $out->{outjson} = $plugin;
    Utils::saveOutput($out);
    my $resultJson = encode_json($plugin);
    print "$resultJson";
}

main();
