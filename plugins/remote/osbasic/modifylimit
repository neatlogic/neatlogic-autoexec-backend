#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/../lib/perl-lib/lib/perl5";
use lib "$FindBin::Bin/../lib";

use strict;
use POSIX qw(strftime);
use IO::File;
use JSON;
use Getopt::Long;

sub usage {
    my $pname = $FindBin::Script;

    print("$pname --backup 0|1 --filename <limit file name> --content <limits.conf content>\n");
    exit(1);
}

sub backup {
    my ($filePath)  = @_;
    my $dateTimeStr = strftime( "%Y%m%d-%H%M%S", localtime() );
    my $exitCode    = system(qq{cp "$filePath" "$filePath.$dateTimeStr"});
    return $exitCode;
}

sub main {
    $| = 1;    #不对输出进行buffer，便于实时看到输出日志
    my $filePath = '/etc/security/limits.conf';

    my $defaultDomain;
    my $fileName;
    my $needBackup = 0;
    my $content;

    GetOptions(
        'backup=i'        => \$needBackup,
        'defaultdomain=s' => \$defaultDomain,
        'filename=s'      => \$fileName,
        'content=s'       => \$content
    );

    if ( not defined($content) or $content eq '' ) {
        print("ERROR: Must defined modify content by option --content\n");
        usage();
    }

    if ( defined($fileName) and $fileName ne '' ) {
        if ( index( $fileName, '/' ) ) {
            print("ERROR: Invalid file name:$fileName, can not with directory.\n");
            usage();
        }
        $filePath = "/etc/security/limit.d/$fileName";
        if ( not -e $filePath ) {
            my $fh = IO::File->new(">$filePath");
            if ( defined($fh) ) {
                $fh->close();
            }
            else {
                print("ERROR: Can not create file:$filePath, $!\n");
                exit(3);
            }
        }
    }

    my $hasError = 0;

    my $scriptDir = $FindBin::Bin;
    chdir($scriptDir);

    my @confKeysArray = ();
    my $confMap       = {};
    $content =~ s/\\n/\n/sg;
    foreach my $line ( split( /\n/, $content ) ) {
        $line =~ s/^\s*|\s*$//g;
        if ( $line eq '' or $line =~ /^#/ ) {
            next;
        }

        my @confs       = split( /\s+/, $line );
        my $fieldsCount = scalar(@confs);

        if ( $fieldsCount == 3 ) {
            my ( $type, $item, $val ) = @confs;
            $confMap->{"$defaultDomain $type $item"} = $val;
            push( @confKeysArray, "$defaultDomain $type $item" );
        }
        elsif ( $fieldsCount == 4 ) {
            my ( $thisDomain, $type, $item, $val ) = @confs;
            $confMap->{"$thisDomain $type $item"} = $val;
            push( @confKeysArray, "$thisDomain $type $item" );
        }
        else {
            $hasError = 1;
            print("ERROR: Malform line: $line\n");
            next;
        }
    }

    my $processedMap = {};
    my $isChanged    = 0;
    my $newContent   = '';
    my $fh           = IO::File->new("+<$filePath");
    if ( defined($fh) ) {
        my $line;
        while ( $line = $fh->getline() ) {
            if ( $line !~ /^\s*$/ and $line !~ /^\s*#/ ) {
                my $tmpLine = $line;
                $tmpLine =~ s/^\s*|\s*$//g;
                my ( $thisDomain, $type, $item, $val ) = split( /\s+/, $tmpLine );
                my $newVal = $confMap->{"$thisDomain $type $item"};
                if ( defined($newVal) ) {

                    #delete( $confMap->{"$thisDomain $type $item"} );
                    $processedMap->{"$thisDomain $type $item"} = 1;

                    if ( $newVal ne $val ) {
                        $isChanged = 1;
                        $line =~ s/\d+$/$newVal/;
                        print("Replace: $tmpLine -> $line");
                    }
                    else {
                        print("NotChanged: $line");
                    }
                }
            }
            $newContent = $newContent . $line;
        }

        #while ( my ( $key, $val ) = each(%$confMap) ) {
        foreach my $key (@confKeysArray) {
            if ( $processedMap->{$key} == 1 ) {
                next;
            }
            my $val = $confMap->{$key};
            $isChanged  = 1;
            $newContent = $newContent . "$key $val\n";
            print("Append: $key $val\n");
        }

        if ( $isChanged == 1 ) {
            if ( $needBackup == 1 ) {
                my $exitCode = backup($filePath);
                if ( $exitCode != 0 ) {
                    print("ERROR: Backup file:$filePath failed, $!\n");
                    $hasError = 2;
                }
            }

            if ( $hasError == 0 ) {
                $fh->seek( 0, 0 );
                $fh->truncate(0);
                $fh->write( $newContent, length($newContent) );
            }
        }

        $fh->close();

        my $out = { limitConf => $newContent };
        AutoExecUtils::saveOutput($out);
    }
    else {
        $hasError = 1;
        print("ERROR: Can not open file:$filePath, $!\n");
    }

    return $hasError;
}

exit main();
