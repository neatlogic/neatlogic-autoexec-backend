#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/../lib/perl-lib/lib/perl5";
use lib "$FindBin::Bin/../lib";

use strict;
use POSIX qw(strftime);
use IO::File;
use JSON;
use Getopt::Long;
Getopt::Long::Configure("pass_through");

sub usage {
    my $pname = $FindBin::Script;

    print("$pname --filename <profile file name> --content  <environment content>\n");
    exit(1);
}

sub main {
    $| = 1;    #不对输出进行buffer，便于实时看到输出日志
    my $homePath = $ENV{HOME};
    if ( not defined($homePath) or $homePath eq ''){
        my $uid = $<;
        $homePath = (getpwnam($uid))[7];
    }

    my $fileName;
    my $contentJson;

    GetOptions(
        'filename:i'  => \$fileName,
        'content:s' => \$contentJson
    );

    if ( not defined($contentJson) or $contentJson eq '' ) {
        print("ERROR: Must defined modify content by option --content\n");
        usage();
    }

    my $filePath = "$homePath/$fileName";

    my $hasError = 0;


    my $exportMap = {};
    my $confMap    = {};
    my $contentObj = from_json($contentJson);
    foreach my $line ( split( /\n/, $contentObj->{content} ) ) {
        $line =~ s/^\s*|\s*$//g;
        my ( $key, $val ) = split( /\s*=\s*/, $line );
        if ( $key =~ s/^export\s+// ){
            $exportMap->{$key} = 1;
        }
        $confMap->{$key} = $val;
    }

    my $isChanged  = 0;
    my $newContent = '';
    my $fh         = IO::File->new("+<$filePath");
    if ( defined($fh) ) {
        my $line;
        while ( $line = $fh->getline() ) {
            if ( $line !~ /^\s*$/ and $line !~ /^\s*#/ ) {
                my $tmpLine = $line;
                $tmpLine =~ s/^\s*|\s*$//g;
                
                my ( $key, $val ) = split( /\s*=\s*/, $tmpLine );
                
                my $hasExport = 0;
                if ( $key =~ s/^export\s+// ){
                    $hasExport = 1;
                }

                my $newVal = $confMap->{$key};
                if ( defined($newVal) ) {
                    delete( $confMap->{$key} );
                    if ( $newVal ne $val ) {
                        $isChanged = 1;
                        $line =~ s/=.*$/=$newVal/;
                        if ( $hasExport == 0 and $exportMap->{$key} ){
                            $line = "export $line";
                        }
                        print("Replace: $tmpLine -> $line");
                    }
                    else {
                        if ( $hasExport == 0 and $exportMap->{$key} ){
                            $isChanged = 1;
                            $line = "export $line";
                            print("Replace: $tmpLine -> $line");
                        }
                        else{
                            print("NotChanged: $line");
                        }
                    }
                }
            }
            $newContent = $newContent . $line;
        }

        while ( my ( $key, $val ) = each(%$confMap) ) {
            $isChanged  = 1;
            if ( $exportMap->{$key} ){
                $newContent = $newContent . "export $key=$val\n";
                print("Append: export $key=$val\n");
            }
            else{
                $newContent = $newContent . "$key=$val\n";
                print("Append: $key=$val\n");
            }
        }

        if ( $isChanged == 1 ) {
            if ( $hasError == 0 ) {
                $fh->seek( 0, 0 );
                $fh->truncate(0);
                $fh->write( $newContent, length($newContent) );
            }
        }

        $fh->close();
    }
    else {
        $hasError = 1;
        print("ERROR: Can not open file:$filePath, $!\n");
    }

    return $hasError;
}

exit main();
