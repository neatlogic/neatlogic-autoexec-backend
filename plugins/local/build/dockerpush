#!/usr/bin/perl
use strict;
use FindBin;

use DeployUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              --registry Registry --project Project --image ImageName --tag TagName\n");
    print("              --username UserName --password Password");
    print("\n");
    print("       --envpath: Env path in the data directory, example:ATM/ATMP/PRD/ATMP-1\n");
    print("       --version: version number of sub system\n");
    print("       --buildno: Build number\n");
    print("       --image:   Image name\n");
    print("       --tagname: Tag name.\n");
    print("       --project: Project\n");
    print("       --user:    Registry user name\n");
    print("       --password:Registry user password\n");

    exit(-1);
}

sub main {
    my ( $isHelp,   $envPath, $version, $buildNo );
    my ( $username, $password );
    my ( $image,    $tagname, $registry, $project );

    GetOptions(
        'h|help'     => \$isHelp,
        'envpath=s'  => \$envPath,
        'version=s'  => \$version,
        'buildno=s'  => \$buildNo,
        'registry=s' => \$registry,
        'project=s'  => \$project,
        'image=s'    => \$image,
        'tagname=s'  => \$tagname,
        'user=s'     => \$username,
        'password=s' => \$password
    );

    usage() if ( defined($isHelp) );

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version, $buildNo );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};
    $buildNo = $buildEnv->{BUILD_NO};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( not defined($buildNo) or $buildNo eq '' ) {
        $optionError = 1;
        print("ERROR: Build number not defined by option --buildno or Environment:VERSION\n");
    }
    if ( not defined($username) or $username eq '' ) {
        $optionError = 1;
        print("ERROR: Docker registry user name not defined by option --user\n");
    }

    if ( not defined($password) or $password eq '' ) {
        $optionError = 1;
        print("ERROR: Docker registry password not defined by option --password\n");
    }

    if ( not defined($image) or not defined($tagname) or not defined($project) ) {
        $optionError = 1;
        print("ERROR: Must defined option: --image and --tagname and --project.\n");
    }

    $project = lc($project);
    $image   = lc($image);
    $tagname = lc($tagname);

    my $hasError = 0;

    # check if project exists on remote repository
    print("INFO:checking if project exists...\n");

    my $projectCheckCmd     = "curl -s -u '$username:$password' -X GET --header  'Accept: application/json' 'http://$registry/api/projects?name=$project'";
    my $projectCheckRes     = $deployUtils->getPipeOut($projectCheckCmd);
    my $projectCheckResLine = $projectCheckRes->[0];
    if ( $projectCheckResLine eq "null" ) {
        $hasError = $hasError + 1;
        print("ERROR: Project $project not exists on $registry.\n");

        # 自动创建project
        # my $projectCreateCmd = "curl -s -u '$username:$password' -X POST --header  'Content-Type:application/json' 'http://$registry/api/projects' -d '{\"project_name\": \"$project\"}'";
        # my $projectCreateRet = $deployUtils->execmd($projectCreateCmd);
        # if ( $projectCreateRet eq 0 ) {
        #     print("INFO: create project $project on $registry success!\n");
        # }
        # else {
        #     print("ERROR: create project $project on $registry failed!\n");
        #     exit(-1);
        # }
    }

    if ( $hasError > 0 ) {
        return $hasError;
    }

    # login first
    my $loginCmd      = "echo  '$password' |sudo docker login $registry --username '$username' --password-stdin";
    my $loginCmdPrint = "echo  '******' |sudo docker login $registry --username '$username' --password-stdin";
    print("INFO:execute->$loginCmdPrint\n");
    my $loginRet = $deployUtils->execmd($loginCmd);
    if ( $loginRet eq 0 ) {
        print("INFO: docker login success!\n");
    }
    else {
        $hasError = $hasError + 1;
        print("ERROR: docker login failed!\n");
    }

    if ( $hasError > 0 ) {
        return $hasError;
    }

    my $cmd = "sudo docker push $registry/$project/$image:$tagname";
    print("INFO:execute->$cmd\n");
    my $ret = $deployUtils->execmd($cmd);

    if ( $ret eq 0 ) {
        $hasError = $hasError + 1;
        print("INFO: push image $registry/$project/$image:$tagname success!\n");
    }
    else {
        print("ERROR: push image $registry/$project/$image:$tagname failed!\n");
    }

    return $hasError;
}

exit main();
