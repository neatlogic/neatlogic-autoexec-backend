#!/usr/bin/perl
use strict;

use FindBin;

use REST::Client;
use HTTP::Tiny;
use MIME::Base64;
use JSON;
use Cwd;
use Data::Dumper;
use Getopt::Long;
use File::Basename;

use DeployUtils;
use DeployLock;
use BuildUtils;
use FileUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              --baseurl NexusBaseUrl --user UserName --password Password\n");
    print("              --repo Repository --group Group --artifact Artifact\n");
    print("              --saveto SubDirInProject\n");
    print("\n");
    print("       --envpath:  Env path in the data directory, example:ATM/ATMP/PRD/ATMP-1\n");
    print("       --version:  Version number of module version\n");
    print("       --buildno:  Build number\n");
    print("       --baseurl:  Nexus base url, example:http://192.168.0.13:8080/nexus\n");
    print("       --user:     User name to login nexus\n");
    print("       --password: User password to login nexus\n");
    print("       --repo:     Nexus repository, example:public.\n");
    print("       --group:    Group of artifact, example:com.any\n");
    print("       --artifact: Artifact, example: log4j\n");
    print("       --ver:      Version number of artifact\n");
    print("       --ext:      Package file extention name.\n");
    print("       --saveto:   Save to sub directory relative to project.\n");

    exit(-1);
}

sub main {
    my ( $isHelp,  $envPath, $version, $buildNo );
    my ( $baseUrl, $user,    $pass );
    my ( $repo,    $group,   $artifact, $artifactVer, $ext, $saveDir );

    GetOptions(
        'h|help'     => \$isHelp,
        'envpath=s'  => \$envPath,
        'version=s'  => \$version,
        'buildno=s'  => \$buildNo,
        'baseurl=s'  => \$baseUrl,
        'user=s'     => \$user,
        'password=s' => \$pass,
        'repo=s'     => \$repo,
        'group=s'    => \$group,
        'artifact=s' => \$artifact,
        'ver=s'      => \$artifactVer,
        'ext=s'      => \$ext,
        'saveto=s'   => \$saveDir
    );

    usage() if ( defined($isHelp) );

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version, $buildNo );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};
    $buildNo = $buildEnv->{BUILD_NO};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( not defined($buildNo) or $buildNo eq '' ) {
        $optionError = 1;
        print("ERROR: Build number not defined by option --buildno or Environment:BUILD_NO\n");
    }

    if ( not defined($baseUrl) or $baseUrl eq '' ) {
        $optionError = 1;
        print("ERROR: Jfrog base url not defined by option --baseurl\n");
    }

    if ( not defined($user) or $user eq '' ) {
        $optionError = 1;
        print("ERROR: Jfrog user name not defined by option --user\n");
    }

    if ( not defined($pass) or $pass eq '' ) {
        $optionError = 1;
        print("ERROR: Jfrog password not defined by option --password\n");
    }

    if ( not defined($repo) or $repo eq '' ) {
        print("ERROR: Must defind repository id\n");
        $optionError = 1;
    }

    if ( not defined($group) or $group eq '' ) {
        print("ERROR: Must defind group id\n");
        $optionError = 1;
    }

    if ( not defined($artifact) or $artifact eq '' ) {
        print("ERROR: Must defind artifact id\n");
        $optionError = 1;
    }

    if ( not defined($artifactVer) or $artifactVer eq '' ) {
        $optionError = 1;
        print("ERROR: Artifact version not defined by option --ver or Environment:VERSION\n");
    }

    if ( not defined($ext) or $ext eq '' ) {
        print("ERROR: Must defind download file extention\n");
        $optionError = 1;
    }

    if ( $optionError == 1 ) {
        usage();
    }

    $baseUrl =~ s/\/+$//;
    my $hasError = 0;

    my $dirInfo = $deployUtils->getDataDirStruct($buildEnv);
    my $distDir = $dirInfo->{distribute};

    my $prjPath = $buildEnv->{PRJ_PATH};
    if ( not -e $prjPath ) {
        $hasError = $hasError + 1;
        print("ERROR: Directory $prjPath not exists.\n");
    }

    my $saveDir = Cwd::abs_path("$prjPath/$saveDir");

    my $lock      = DeployLock->new($buildEnv);
    my $buildLock = $lock->lockBuild($DeployLock::WRITE);

    END {
        if ( defined($lock) ) {
            $lock->unlockBuild($buildLock);
        }
    }

    my $serverAdapter = ServerAdapter->new();

    #my $verInfo       = $serverAdapter->getVer( $buildEnv, $version );
    my $versionInfo = {
        version => $version,
        buildNo => $buildEnv->{BUILD_NO},
        status  => 'releasing'
    };
    $serverAdapter->updateVer( $buildEnv, $versionInfo );

    my $authToken = 'Basic ' . MIME::Base64::encode( $user . ':' . $pass );
    $authToken =~ s/\s*$//;
    my $headers = { Authorization => $authToken };
    my $http    = HTTP::Tiny->new();

    my $pkgFileName = "$artifact.$ext";
    my $pkgURI      = "$repo/$group/$artifact/$artifactVer";
    my $pkgURL      = "$baseUrl/$pkgURI";

    my $response = $http->mirror( $pkgURL, "$saveDir/$pkgFileName", { headers => $headers } );
    if ( $response->{success} ) {
        print("FINE: Download $pkgURL to $saveDir/$pkgFileName success.\n");
    }
    else {
        $hasError = $hasError + 1;
        my $content = $response->{content};
        print("ERROR: Download $pkgURL to $saveDir/$pkgFileName failed.\n$content.\n");
    }

    my $md5URL  = "$baseUrl/api/storage/$pkgURI";
    my $md5Res  = $http->get( $md5URL, { headers => $headers } );
    my $content = $md5Res->{content};
    if ( $md5Res->{success} ) {
        my $md5Json    = from_json($content);
        my $srvSideMd5 = $md5Json->{checksums}->{md5};
        my $md5Sum     = FileUtils::getFileMd5("$saveDir/$pkgFileName");
        if ( $md5Sum ne $srvSideMd5 ) {
            $hasError = $hasError + 1;
            print("ERROR: File $pkgFileName md5sum($md5Sum) not equal server side md5sum($srvSideMd5).\n");
        }
    }
    else {
        $hasError = $hasError + 1;
        print("ERROR: Get file $pkgFileName md5sum by url:$md5URL failed,\n$content\n");
    }

    if ( $hasError == 0 ) {
        eval {
            my $buildUtils = BuildUtils->new();
            $buildUtils->release( $buildEnv, $version, $buildNo );
        };
        if ($@) {
            $hasError = 1;
            print("ERRROR: $@\n");
        }
    }

    if ( $hasError == 0 ) {
        $versionInfo->{status} = 'released';
    }
    else {
        $versionInfo->{status} = 'release-failed';
    }
    $serverAdapter->updateVer( $buildEnv, $versionInfo );

    return $hasError;
}

#TODO: 没有经过验证，需要Jfrog进行测试
exit main();
