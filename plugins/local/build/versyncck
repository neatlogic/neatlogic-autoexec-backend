#!/usr/bin/perl

use FindBin;

use strict;
use Getopt::Long;
use File::Copy;
use File::Path;
use Cwd;

use DeployUtils;
use DeployLock;
use VerGet;
use ServerAdapter;

sub usage {
    my $pname = $FindBin::Script;

    print("usage: $pname [-v 0|1] [--envpath EnvPath] [--lang LANG] \n");
    print("              [--version VERSION]\n");
    print("              [--username USERNAME] [--password PASSWORD]\n");
    print("\n");
    print("optional arguments:\n");
    print("  --envpath\toptionnal, name path for application\n");
    print("  --lang\toptionnal, LANG\n");
    print("  --version\toptionnal, Version number\n");
    print("  --buildno\ttoptionnal, Build number\n");

    exit(1);
}

sub main {
    my ( $isHelp, $isVerbose, $lang, $envPath, $version, $buildNo, $startPath );
    my ( $userName, $password );

    GetOptions(
        'h|help'      => \$isHelp,
        'v|verbose=i' => \$isVerbose,
        'envpath=s'   => \$envPath,
        'lang=s'      => \$lang,
        'version=s'   => \$version,
        'buildno=s'   => \$buildNo,
        'startpath=s' => \$startPath,
        'user=s'      => \$userName,
        'password=s'  => \$password
    );

    usage() if ( defined($isHelp) );

    if ( defined($lang) ) {
        $ENV{LANG}   = $lang;
        $ENV{LC_ALL} = $lang;
    }

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version, $buildNo );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};
    $buildNo = $buildEnv->{BUILD_NO};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( not defined($buildNo) or $buildNo eq '' ) {
        $optionError = 1;
        print("ERROR: Build number not defined by option --buildno or Environment:BUILD_NO\n");
    }
    if ( $optionError == 1 ) {
        usage();
    }

    my $namePath = $buildEnv->{NAME_PATH};

    my $serverAdapter = ServerAdapter->new();

    my $lock        = DeployLock->new($buildEnv);
    my $spaceLockId = $lock->lockWorkspace($DeployLock::WRITE);

    END {
        local $?;
        if ( defined($lock) ) {
            $lock->unlockWorkspace($spaceLockId);
        }
    }

    my $verInfo = $serverAdapter->getVer($buildEnv);
    $verInfo->{startPath} = $startPath;

    if ( not defined($verInfo) ) {
        print("ERROR: Can not find application $namePath version:$version.\n");
        return 3;
    }

    if ( defined($userName) and $userName ne '' ) {
        $verInfo->{username} = $userName;
    }
    if ( defined($password) and $password ne '' ) {
        $password = $deployUtils->decryptPwd($password);
        $verInfo->{password} = $password;
    }

    my $verGet = VerGet->new( $buildEnv, $verInfo, $isVerbose );
    my $ret    = $verGet->checkBaseLineMerged();

    if ( $ret eq 0 ) {
        print("FINE: $namePath version:$version has merged baseline changes.\n");
    }
    else {
        my $versionInfo = {
            version => $version,
            buildNo => $buildEnv->{BUILD_NO},
            status  => 'release-failed'
        };
        $serverAdapter->updateVer( $buildEnv, $versionInfo );
        print("ERROR: $namePath version:$version has not merged baseline changes.\n");
    }

    return $ret;
}

exit main();

