#!/usr/bin/perl
use strict;
use FindBin;
use Getopt::Long;
use JSON;

use VerGet;
use DeployLock;
use DeployUtils;
use ServerAdapter;

sub usage {
    my $pname = $FindBin::Script;

    print("usage: $pname [-v 0|1] [--envpath EnvPath] [--version VERSION] [--lang LANG] \n");
    print("              --repotype GIT|SVN --repo REPO \n");
    print("              --trunk TRUNK [--branch BRANCH] [--tagsdir TAGSDIR] [--tag TAG]\n");
    print("              [--username USERNAME] [--password PASSWORD]\n");
    print("\n");
    print("optional arguments:\n");
    print("  --envpath\toptionnal, name path for application\n");
    print("  --version\tVersion number\n");
    print("  --buildno\tBuild number\n");
    print("  --repo\tGIT or SVN repo address\n");
    print("  --trunk\tGIT master branch or SVN trunk address\n");
    print("  --branch\tcheckout branch\n");
    print("  --tagsdir\tSVN directory to save tagsdir. example https://xxxx/abc/tags\n");
    print("  --tag\tGIT tag or SVN tag address\n");

    exit(1);
}

sub main {
    my ( $isHelp,   $isVerbose, $lang, $envPath, $version, $buildNo );
    my ( $isLib,    $repoType,  $repo, $trunk,   $branch,  $tagsDir, $tag, $startPath );
    my ( $userName, $password );
    my $pname = $FindBin::Script;
    $isLib = 0;

    GetOptions(
        'h|help'      => \$isHelp,
        'v|verbose=i' => \$isVerbose,
        'lang=s'      => \$lang,
        'envpath=s'   => \$envPath,
        'version=s'   => \$version,
        'buildno=s'   => \$buildNo,
        'islib=i'     => \$isLib,
        'repotype=s'  => \$repoType,
        'repo=s'      => \$repo,
        'trunk=s'     => \$trunk,
        'branch=s'    => \$branch,
        'tagsdir=s'   => \$tagsDir,
        'tag=s'       => \$tag,
        'user=s'      => \$userName,
        'password=s'  => \$password,
        'startpath=s' => \$startPath
    );

    usage() if ( defined($isHelp) );

    if ( defined($lang) ) {
        $ENV{LANG}   = $lang;
        $ENV{LC_ALL} = $lang;
    }

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version, $buildNo );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};
    $buildNo = $buildEnv->{BUILD_NO};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( not defined($buildNo) or $buildNo eq '' ) {
        $optionError = 1;
        print("ERROR: Build number not defined by option --buildno or Environment:BUILD_NO\n");
    }
    if ( not defined($repo) or $repo eq '' ) {
        $optionError = 1;
        print("ERROR: Option for repository --repo not defined.\n");
    }
    if ( $repo =~ /^http/ and ( not defined($userName) or $userName eq '' ) ) {
        $optionError = 1;
        print("ERROR: UserName is empty.\n");
    }
    if ( $optionError == 1 ) {
        usage();
    }

    my $namePath = $buildEnv->{NAME_PATH};

    my $serverAdapter = ServerAdapter->new();
    my $versionInfo   = {
        version   => $version,
        buildNo   => $buildNo,
        repoType  => uc($repoType),
        repo      => $repo,
        trunk     => $trunk,
        branch    => $branch,
        tagsDir   => $tagsDir,
        tag       => $tag,
        startPath => $startPath
    };

    my $verInfo = $serverAdapter->getVer( $buildEnv, $version );

    if ( defined($verInfo) ) {
        if ( $verInfo->{isFreeze} ne 0 ) {
            print("ERROR: Version: $namePath $version is freezed, please contact the configuration manager.\n");
            return 3;
        }

        $versionInfo->{buildNo}  = $verInfo->{buildNo};
        $versionInfo->{startRev} = $verInfo->{startRev};
        $versionInfo->{endRev}   = $verInfo->{endRev};
    }
    else {
        $serverAdapter->addVer( $buildEnv, $versionInfo );
    }

    if ( defined($userName) and $userName ne '' ) {
        $versionInfo->{username} = $userName;
    }
    if ( defined($password) and $password ne '' ) {
        $password = $deployUtils->decryptPwd($password);
        $versionInfo->{password} = $password;
    }

    my $lock        = DeployLock->new($buildEnv);
    my $spaceLockId = $lock->lockWorkspace($DeployLock::WRITE);

    END {
        local $?;
        if ( defined($lock) ) {
            $lock->unlockWorkspace($spaceLockId);
        }
    }

    my $verGet = VerGet->new( $buildEnv, $versionInfo, $isVerbose );
    my $ret    = $verGet->get();

    my $desc = "Get version for $namePath version:$version";
    if ( $ret eq 0 ) {
        $versionInfo->{status} = 'pending';
        print("FINE: $desc success.\n");
    }
    else {
        $versionInfo->{status} = 'failed';
        print("ERROR: $desc failed.\n");
    }

    if ( $isLib == 0 ) {
        $serverAdapter->updateVer( $buildEnv, $versionInfo );
    }

    if ( $ret > 255 ) {
        $ret = $ret >> 8;
    }

    return $ret;
}

exit main();

