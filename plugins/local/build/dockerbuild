#!/usr/bin/perl
use strict;
use FindBin;

use DeployUtils;
use DeployLock;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              --registry Registry --project Project --image ImageName --tag TagName\n");
    print("\n");
    print("       --envpath: Env path in the data directory, example:ATM/ATMP/PRD/ATMP-1\n");
    print("       --version: version number of sub system\n");
    print("       --buildno: Build number\n");
    print("       --image:   Image name\n");
    print("       --tagname: Tag name.\n");
    print("       --project: Project\n");

    exit(-1);
}

sub main {
    my ( $envPath, $version, $buildNo,  $isHelp );
    my ( $image,   $tagname, $registry, $project );

    GetOptions(
        'h|help'     => $isHelp,
        'envpath=s'  => \$envPath,
        'version=s'  => \$version,
        'buildno=s'  => \$buildNo,
        'registry=s' => \$registry,
        'project=s'  => \$project,
        'image=s'    => \$image,
        'tagname=s'  => \$tagname
    );

    usage() if ( defined($isHelp) );

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version, $buildNo );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};
    $buildNo = $buildEnv->{BUILD_NO};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( not defined($buildNo) or $buildNo eq '' ) {
        $optionError = 1;
        print("ERROR: Build number not defined by option --buildno or Environment:VERSION\n");
    }
    if ( not defined($image) or not defined($tagname) or not defined($project) ) {
        $optionError = 1;
        print("ERROR: Must defined option: --image and --tagname and --project.\n");
    }

    if ( $optionError == 1 ) {
        usage();
    }

    my $dirInfo = $deployUtils->getDataDirStruct($buildEnv);
    my $distDir = $dirInfo->{distribute};

    $project = lc($project);
    $image   = lc($image);
    $tagname = lc($tagname);

    my $lock      = DeployLock->new($buildEnv);
    my $appLockId = $lock->lockEnvApp($DeployLock::READ);

    END {
        local $?;
        if ( defined($lock) ) {
            $lock->unlockEnvApp($appLockId);
        }
    }

    my $serverAdapter = ServerAdapter->new();
    $serverAdapter->releaseVerToEnv( $buildEnv, 'pending' );

    my $cmd = "sudo docker build -t $registry/$project/$image:$tagname $distDir/app";
    print("INFO:execute->$cmd\n");
    my $ret = $deployUtils->execmd($cmd);

    if ( $ret eq 0 ) {
        print("INFO: build success!\n");
    }
    else {
        print("ERROR: build failed\n");
    }
    return $ret;
}

exit main();
