#!/usr/bin/perl
use strict;
use FindBin;

use Cwd;
use IO::File;
use File::Basename;
use Data::Dumper;
use LWP::UserAgent;
use Getopt::Long;

use DeployUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              --baseurl NexusBaseUrl --user UserName --password Password\n");
    print("              --repo Repository --group Group --artifact Artifact\n");
    print("              --artifactfile FilePath --pomfile PomFilePath\n");
    print("\n");
    print("       --envpath:      Env path in the data directory, example:ATM/ATMP/PRD/ATMP-1\n");
    print("       --version:      Version number of sub system\n");
    print("       --baseurl:      Nexus base url, example:http://192.168.0.13:8080\n");
    print("       --user:         User name to login nexus\n");
    print("       --password:     User password to login nexus\n");
    print("       --repo:         Nexus repository, example:public.\n");
    print("       --group:        Group of artifact, example:com.any\n");
    print("       --artifact:     Artifact, example: log4j\n");
    print("       --artifactfile: Jar file path relative to project.\n");
    print("       --pomfile:      pom.xml file path relative to project.\n");

    exit(-1);
}

sub getBoundary {
    my @charsSet;
    push( @charsSet, chr($_) ) for 48 .. 57;
    push( @charsSet, chr($_) ) for 97 .. 122;
    push( @charsSet, chr($_) ) for 65 .. 90;

    my $randStr = '----';
    $randStr = $randStr . $charsSet[ rand 62 ] for 1 .. 28;
    return $randStr;
}

sub main {
    my ( $isHelp, $envPath, $version );
    my ( $baseUrl, $user, $pass, $repo, $group, $artifact, $filePath, $pom );

    GetOptions(
        'h|help'         => \$isHelp,
        'envpath:s'      => \$envPath,
        'version=s'      => \$version,
        'baseurl=s'      => \$baseUrl,
        'user:s'         => \$user,
        'password:s'     => \$pass,
        'repo=s'         => \$repo,
        'group=s'        => \$group,
        'artifact=s'     => \$artifact,
        'artifactfile=s' => \$filePath,
        'pomfile:s'      => \$pom,

    );

    usage() if ( defined($isHelp) );

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }

    if ( not defined($repo) or $repo eq '' ) {
        print("ERROR: Must defind repository id\n");
        $optionError = 1;
    }

    if ( not defined($group) or $group eq '' ) {
        print("ERROR: Must defind group id\n");
        $optionError = 1;
    }

    if ( not defined($artifact) or $artifact eq '' ) {
        print("ERROR: Must defind artifact id\n");
        $optionError = 1;
    }

    if ( not defined($filePath) or $filePath eq '' ) {
        print("ERROR: Must defind filepath path\n");
        $optionError = 1;
    }

    if ( $optionError == 1 ) {
        usage();
    }

    my $dirInfo = $deployUtils->getDataDirStruct($buildEnv);
    my $distDir = $dirInfo->{distribute};

    my $prjPath = $buildEnv->{PRJ_PATH};

    my $realFilePath = "$prjPath/$filePath";
    my $autoexecHome = $buildEnv->{AUTOEXEC_HOME};
    my $TMPDIR       = "$autoexecHome/tmp";

    my $tmp    = File::Temp->newdir( "nexusupd-XXXXX", DIR => $TMPDIR, UNLINK => 1 );
    my $tmpDir = $tmp->dirname();

    my $tmpPomFilePath = "$tmpDir/pom.xml";
    if ( defined($pom) ) {
        my $pomFilePath = "$prjPath/$pom";
        my $content     = $deployUtils->getFileContent("$pomFilePath");
        $content =~ s/<version>.*?<\/version>/<version>$version<\/version>/g;
        my $fh = IO::File->new(">$tmpPomFilePath");
        if ( defined($fh) ) {
            print $fh ($content);
            $fh->close();
        }
        else {
            die("ERROR: Can not write to file $tmpPomFilePath, $!\n");
        }
    }
    else {
        my $pomInZip = "META-INF/maven/$group/$artifact/pom.xml";

        #TODO：unzip需要测试
        my $unzipRet = system("unzip -jod '$tmpDir' '$realFilePath' '$pomInZip'");
        if ( $unzipRet != 0 ) {
            die("ERROR: Unzip $pomInZip from $realFilePath failed.\n");
        }

        my $content = $deployUtils->getFileContent($tmpPomFilePath);
        $content =~ s/<version>.*?<\/version>/<version>$version<\/version>/g;

        my $fh = IO::File->new(">$tmpPomFilePath");
        if ( defined($fh) ) {
            print $fh ($content);
            $fh->close();
        }
        else {
            die("ERROR: Can not write to file $tmpPomFilePath, $!\n");
        }
    }

    my $ext = '';
    if ( $filePath =~ /\.([^\.])$/ ) {
        $ext = $1;
    }

    my $contentMap = [
        'maven2.groupId'           => $group,
        'maven2.artifactId'        => $artifact,
        'maven2.version'           => $version,
        'maven2.asset1'            => [ $realFilePath, basename($realFilePath), Content_Type => 'application/octet-stream' ],
        'maven2.asset1.classifier' => '',
        'maven2.asset1.extension'  => $ext
    ];

    if ( defined($pom) and -f $tmpPomFilePath ) {
        push(
            @$contentMap,
            'maven2.asset2'            => [ $tmpPomFilePath, basename($tmpPomFilePath), Content_Type => 'application/octet-stream' ],
            'maven2.asset2.extension'  => 'pom',
            'maven2.asset2.classifier' => ''
        );
    }

    my $url = "$baseUrl/service/rest/v1/components?repository=$repo";

    my $ua = LWP::UserAgent->new( timeout => 120 );

    my $response = $ua->post(
        "$url",
        'Authorization', 'Basic ' . MIME::Base64::encode( $user . ':' . $pass ),
        'Content_Type' => 'multipart/form-data;boundary=' . getBoundary(),
        'Content'      => $contentMap
    );
    my $content = $response->content;

    #TODO: 缺少了url请求后的错误检测
}

exit main();
