#!/usr/bin/perl
use strict;

use FindBin;

use REST::Client;
use LWP::Simple qw(getstore);
use MIME::Base64;
use JSON;
use Cwd;
use Data::Dumper;
use Getopt::Long;

use DeployUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              --baseurl NexusBaseUrl --repo Repository --group Group --artifact Artifact\n");
    print("              --saveto SubDirInProject\n");
    print("\n");
    print("       --envpath:  Env path in the data directory, example:ATM/ATMP/PRD/ATMP-1\n");
    print("       --version:  Version number of sub system\n");
    print("       --baseurl:  Nexus base url, example:http://192.168.0.13:8080/nexus\n");
    print("       --user:         User name to login nexus\n");
    print("       --password:     User password to login nexus\n");
    print("       --repo:     Nexus repository, example:public.\n");
    print("       --group:    Group of artifact, example:com.any\n");
    print("       --artifact: Artifact, example: log4j\n");
    print("       --ext:      Package file extention name.\n");
    print("       --saveto:   Save to sub directory relative to project.\n");

    exit(-1);
}

sub main {

    my ( $isHelp,  $envPath, $version );
    my ( $baseUrl, $user,    $pass );
    my ( $repo,    $group,   $artifact, $ext, $saveDir );

    GetOptions(
        'h|help'     => \$isHelp,
        'envpath=s'  => \$envPath,
        'version=s'  => \$version,
        'baseurl=s'  => \$baseUrl,
        'user=s'     => \$user,
        'password=s' => \$pass,
        'repo=s'     => \$repo,
        'group=s'    => \$group,
        'artifact=s' => \$artifact,
        'ext=s'      => \$ext,
        'saveto=s'   => \$saveDir
    );

    usage() if ( defined($isHelp) );

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }

    if ( not defined($repo) or $repo eq '' ) {
        print("ERROR: Must defind repository id\n");
        $optionError = 1;
    }

    if ( not defined($group) or $group eq '' ) {
        print("ERROR: Must defind group id\n");
        $optionError = 1;
    }

    if ( not defined($artifact) or $artifact eq '' ) {
        print("ERROR: Must defind artifact id\n");
        $optionError = 1;
    }

    if ( not defined($ext) or $ext eq '' ) {
        print("ERROR: Must defind download file extention\n");
        $optionError = 1;
    }

    if ( $optionError == 1 ) {
        usage();
    }

    my $dirInfo = $deployUtils->getDataDirStruct($buildEnv);
    my $distDir = $dirInfo->{distribute};

    my $prjPath = $buildEnv->{PRJ_PATH};
    my $saveDir = "$prjPath/$saveDir";

    my $hasError = 0;

    my $client = REST::Client->new();
    $client->addHeader( 'Authorization', 'Basic ' . MIME::Base64::encode( $user . ':' . $pass ) );
    
    #my $url    = "$baseUrl/service/rest/v1/components?repository=$repo"; #老的browser整个仓库的方法，不合理，改为使用search方法
    #searchUrl
    #http://repo.techsure.cn:9008/nexus/service/rest/v1/search?repository=techsure-release&maven.groupId=com.techsure&maven.artifactId=tagent&maven.extension=jar&version=1.2.2.1
    my $url = "$baseUrl//service/rest/v1/search?repository=$repo&maven.groupId=$group&maven.artifactId=$artifact&maven.extension=$ext&version=$version";

    $client->setTimeout(30);
    $client->GET($url);
    if ( $client->responseCode() ne 200 ) {
        $hasError = $hasError + 1;
        my $errMsg = $client->responseContent();
        print("ERROR: Search artifact by URL:$url failed, cause by:$errMsg\n");
        return $hasError;
    }

    my $content = $client->responseContent();
    my $retObj  = from_json($content);
    my $items   = $retObj->{'items'};
    if ( scalar(@$items) <= 0 ) {
        $hasError = $hasError + 1;
        print("ERROR: Can not find artifact by URL:$url.\n");
        return $hasError;
    }
    else{
        print("INFO: Search by by URL:$url finished.\n");
    }

    foreach my $item (@$items) {
        my $assets = $item->{'assets'};
        foreach my $asset (@$assets) {
            my $downUrl     = $asset->{'downloadUrl'};
            my @downUrlSegs = split( /\//, $downUrl );

            #使用LWP::Simple getstore下载文件
            getstore( $downUrl, "$saveDir/$downUrlSegs[-1]" );
        }
    }

    return $hasError;
}

exit main();
