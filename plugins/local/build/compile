#!/usr/bin/perl
use strict;

use FindBin;
use File::Path;
use Cwd;
use Getopt::Long;
Getopt::Long::Configure("pass_through");

use DeployUtils;
use DeployLock;
use BuildUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--verbose 0|1] [--envpath EnvPath] [--version VERSION] [--type ant|maven|gradle|npm]\n");
    print("              [--jdk JDK_VERSION] [--startpath CompileBaseDir] [--lang LANG] [--args EXT_OPTIONS]\n");
    print("       --envpath:      example:SYS-A/MODULE-X/SIT\n");
    print("       --version:      version number\n");
    print("       --buildno:      Build number\n");
    print("       --jdk:          jdk version ,support [1.6|1.7(default)|1.8]\n");
    print("       --startpath:    project releative path which contains build config file: build.xml, pom.xml...\n");
    print("       --lang:         LANGUAGE, default: en_US.UTF8\n");
    print("       --type:         build type: maven|ant|gradle|npm|ant1.5, default is auto detect.\n");
    print("       --args:         arguments for ant|maven|gradle, default is blank.\n");

    exit(1);
}

sub main {
    my ( $isHelp, $isVerbose, $lang, $envPath, $version, $buildNo );
    my ( $startPath, $jdk, $buildType, $args, $isUpdate );
    my $pname = $FindBin::Script;

    my $makeToolVer = '';

    GetOptions(
        'h|help'    => \$isHelp,
        'verbose=i' => \$isVerbose,

        #'update=i'    => \$isUpdate,
        'envpath=s'   => \$envPath,
        'version=s'   => \$version,
        'buildno=s'   => \$buildNo,
        'startpath=s' => \$startPath,
        'lang=s'      => \$lang,
        'jdk=s'       => \$jdk,

        #'nodejs=s'    => \$nodejsVer,
        'type=s' => \$buildType,
        'args=s' => \$args
    );

    usage() if ( defined($isHelp) );

    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version, $buildNo );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};
    $buildNo = $buildEnv->{BUILD_NO};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( not defined($buildNo) or $buildNo eq '' ) {
        $optionError = 1;
        print("ERROR: Build number not defined by option --buildno or Environment:VERSION\n");
    }
    if ( $optionError == 1 ) {
        usage();
    }

    my $namePath  = $buildEnv->{NAME_PATH};
    my $isRelease = $buildEnv->{IS_RELEASE};
    if ( $isRelease == 1 ) {
        print("WARN: $namePath version:$version build $buildNo is released, compile again.\n");
    }

    my $toolsPath = $buildEnv->{TOOLS_PATH};
    my $prjPath   = $buildEnv->{PRJ_PATH};

    my $lock        = DeployLock->new($buildEnv);
    my $spaceLockId = $lock->lockWorkspace($DeployLock::WRITE);

    END {
        if ( defined($lock) ) {
            $lock->unlockWorkspace($spaceLockId);
        }
    }

    my $opts = {
        buildEnv    => $buildEnv,
        version     => $version,
        prjPath     => $prjPath,
        buildType   => $buildType,
        lang        => $lang,
        startPath   => $startPath,
        toolsPath   => $toolsPath,
        jdk         => $jdk,
        args        => $args,
        isVerbose   => $isVerbose,
        makeToolVer => $makeToolVer
    };

    my $buildUtils = BuildUtils->new();
    $buildUtils->compile($opts);
}

exit main();

