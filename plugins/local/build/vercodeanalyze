#!/usr/bin/python3
# -*- coding: utf-8 -*-

import json
from pathlib import Path
import subprocess
import AutoExecUtils
import Utils
import os
import sys
import time
import argparse

binPaths = os.path.split(os.path.realpath(__file__))
libPath = os.path.realpath(binPaths[0]+'/../lib')
sys.path.append(libPath)


if __name__ == "__main__":

    # for key, value in os.environ.items():
    #     print(key + " : " + value)
    # 参数处理
    parser = argparse.ArgumentParser()
    parser.add_argument('--repotype', default='GIT', help='GIT or SVN')
    parser.add_argument('--repo', default='', help='GIT or SVN repo address')
    parser.add_argument('--trunk', default='', help='GIT master branch or SVN trunk address')
    parser.add_argument('--branch', default='', help='checkout branch')
    parser.add_argument('--user', default='', help='username')
    parser.add_argument('--password', default='', help='password')
    parser.add_argument('--verbose', default='0', help='verbose')

    args = parser.parse_args()
    # args.branch = '3.0.0'
    # 主体处理逻辑
    # print("Get options:============\n")
    # print("input:" + args)

    project_path = os.environ.get('PRJ_PATH')
    output_path = os.environ.get('VER_ROOT') + '/diff.json'

    if not project_path:
        print('ERROR: project path not found')
        exit(1)

    java_path = 'java'
    if 'JAVA_HOME' in os.environ:
        java_path = str(Path(os.environ['JAVA_HOME']) / 'bin/java')

    diff_jar_path = Path(__file__).resolve().parent / 'lib/neatlogic-diff-1.0-jar-with-dependencies.jar'
    if not diff_jar_path.exists():
        print('ERROR: diff jar not exists, ' + diff_jar_path)
        exit(1)

    # print(' '.join([java_path, '-jar', str(Path(__file__).resolve().parent / 'lib/neatlogic-diff-1.0-jar-with-dependencies.jar'), '--type', args.repotype, '--path', project_path, '--url', args.repo, '--username',
    #                args.user, '--password', args.password, '--sourceBranch', args.branch, '--targetBranch', args.trunk, '--output', output_path, '--verbose', args.verbose]))

    result = subprocess.run([java_path, '-jar', str(Path(__file__).resolve().parent / 'lib/neatlogic-diff-1.0-jar-with-dependencies.jar'), '--type', args.repotype, '--path', project_path, '--url', args.repo, '--username',args.user, '--password', args.password, '--sourceBranch', args.branch, '--targetBranch', args.trunk, '--output', output_path, '--verbose', args.verbose], stderr=subprocess.STDOUT)

    # print(result)
    # print(result.returncode)
    if result.returncode == 0:
        data = json.load(open(output_path, 'r', encoding='utf-8'))
        del data['fileDiffList']
        data['version'] = os.environ.get('VERSION')
        data['appSystemId'] = os.environ.get('SYS_ID')
        data['appModuleId'] = os.environ.get('MODULE_ID')
        data['repo'] = args.repo
        data['type'] = 'svn' if args.repotype.lower() == 'svn' else 'gitlab'
        data['user'] = args.user
        context = AutoExecUtils.getAutoexecContext()
        config = context.config
        passKey = config['server']['password.key']
        data['password'] = '{ENCRYPTED}'+Utils._rc4_encrypt_hex(passKey, args.password)
        retObj = AutoExecUtils.saveVersionMetrics(data)
        if retObj.get('Status') == 'OK':
            print('INFO: save version code analyze finished')
        else:
            print('ERROR: save version code analyze failed, error: {}'.format(str(retObj)))
            exit(1)
    
    print('INFO: output path {}'.format(output_path))
    exit(result.returncode)
