#!/usr/bin/perl
use strict;
use FindBin;
use Cwd;
use Getopt::Long;
use File::Path;

use DeployUtils;
use DeployLock;

Getopt::Long::Configure("pass_through");

sub usage {
    my $pname = $FindBin::Script;
    print("Usage: $pname [-v|--verbose 0|1] [--envpath EnvPath] [--version VERSION]\n");
    print("\n");
    print("       --envpath: Env path in the data directory, example:10/10/10\n");

    exit(1);
}

sub main {
    my ( $isHelp, $isVerbose, $envPath, $version );
    my $pname = $FindBin::Script;

    GetOptions(
        'h|help'      => \$isHelp,
        'envpath=s'   => \$envPath,
        'version=s'   => \$version,
        'v|verbose=i' => \$isVerbose
    );
    usage() if ( defined($isHelp) );
    my $optionError = 0;

    usage() if ( $optionError == 1 );
    my $deployUtils = DeployUtils->new();

    my $buildEnv = $deployUtils->deployInit( $envPath, $version );
    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( $optionError == 1 ) {
        usage();
    }

    my $namePath  = $buildEnv->{NAME_PATH};
    my $dataPath  = $buildEnv->{DATA_PATH};
    my $envName   = $buildEnv->{ENV_NAME};
    my $buildNo   = $buildEnv->{BUILD_NO};
    my $isRelease = $buildEnv->{IS_RELEASE};

    if ( $isRelease != 1 ) {
        print("ERROR: $namePath version:$version build $buildNo is not released, can not release to env.\n");
        return 3;
    }

    my $dirInfo    = $deployUtils->getDataDirStruct($buildEnv);
    my $releaseDir = $dirInfo->{release};
    my $distDir    = $dirInfo->{distribute};

    my $hasError = 0;
    my $ret      = 0;
    if ( not -e $distDir ) {
        if ( not mkpath($distDir) ) {
            $hasError = $hasError + 1;
            print("ERROR: Can not Create directory:$distDir $!\n");
        }
    }

    if ( -e "$distDir/app" ) {
        if ( not rmtree("$distDir/app") ) {
            $hasError = $hasError + 1;
            print("ERROR: Remove directory $distDir/app failed, $!\n");
        }
    }

    if ( -e "$distDir/db" ) {
        if ( not rmtree("$distDir/db") ) {
            $hasError = $hasError + 1;
            print("ERROR: Remove directory $distDir/db failed, $!\n");
        }
    }

    if ( -e "$distDir/doc" ) {
        if ( not rmtree("$distDir/doc") ) {
            $hasError = $hasError + 1;
            print("ERROR: Remove directory $distDir/doc failed, $!\n");
        }
    }

    if ( $hasError > 0 ) {
        return $hasError;
    }

    my $lock        = DeployLock->new($buildEnv);
    my $spaceLockId = $lock->lockWorkspace($DeployLock::READ);
    my $appLockId   = $lock->lockEnvApp($DeployLock::WRITE);
    my $sqlLockId   = $lock->lockEnvSql($DeployLock::WRITE);

    END {
        $lock->unlockEnvSql($sqlLockId);
        $lock->unlockEnvApp($appLockId);
        $lock->unLockWorkspace($spaceLockId);
    }

    my $relItemCount = 0;
    print("INFO: Try to release $namePath $version build:$buildNo to $envName...\n");
    if ( -d "$releaseDir/app" ) {
        $deployUtils->copyTree( "$releaseDir/app", "$distDir/" );
        $relItemCount = $relItemCount + 1;
        print("INFO: Release application to $envName success.\n");
    }

    if ( -d "$releaseDir/db" ) {
        $deployUtils->copyTree( "$releaseDir/db", "$distDir/" );
        $relItemCount = $relItemCount + 1;
        print("INFO: Release DB scripts to $envName success.\n");
    }

    if ( -d "$releaseDir/doc" ) {
        $deployUtils->copyTree( "$releaseDir/doc", "$distDir/" );
        $relItemCount = $relItemCount + 1;
        print("INFO: Release documents to $envName success.\n");
    }

    if ( $relItemCount == 0 ) {
        print("WARN: Artifacts of $namePath $version build:$buildNo are empty.\n");
    }

    print("FINEST: Release $namePath $version build:$buildNo to $envName success.\n");
    return $hasError;
}

exit main();

