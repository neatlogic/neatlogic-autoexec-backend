#!/usr/bin/perl
use strict;
use FindBin;
use File::Basename;
use File::Path;
use Getopt::Long;

use SyncLocalFile;
use FileUtils;
use DeployLock;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--verbose 0|1] [--envpath EnvPath] [--version VERSION]\n");
    print("              [--blacklist BlackList] [-exp ExcludeDirs]\n");
    print("              [--nodelete 0|1] [--noattrs 0|1] [--md5check 0|1]\n");
    print("              [--src SyncSourceDir] [--dest SyncDestDir]\n");
    print("              [--nomd5 0|1] [--notime 0|1] \n");
    print("\n");
    print("       sync files from  build to ENV/app, doc/db to ENV/db\n");
    print("       --envpath:    env path in the data directory, example:ATM/ATMP/PRD\n");
    print("       --version:    version number\n");
    print("       --blalcklist: blakck list for db schemas, example:mydb.myuser,myadb.myauser\n");
    print("       --src:        relative path for <sys>/<subsys>/<ver number>/appbuild/app\n");
    print("       --dest:       releative path for <sys>/<subsys>/<ver number>/<env>/appsync\n");
    print("       --exp:        which dirs not to be sync.\n");
    print("       --nomd5:      do not compare file md5, only compare size and mtime of file\n");
    print("       --notime:     do not compare file mtime, only compare size of file\n");
    print("       --nodelete:   do not delete the files in the destination direcotry\n");
    print("       --noattrs:    do not preserve the attributes of the source files\n");

    exit(1);
}

sub isEmptyDir {
    my ($dir) = @_;
    my $isEmpty = 1;

    my $dirHandle;
    opendir( $dirHandle, $dir );

    if ( defined($dirHandle) ) {
        my $entry;
        while ( $entry = readdir($dirHandle) ) {
            if ( $entry ne '.' and $entry ne '..' ) {
                $isEmpty = 0;
                last;
            }
        }
        close($dirHandle);
    }

    return $isEmpty;
}

sub main {
    my ( $isHelp, $envPath, $version );
    my $pname = $FindBin::Script;
    $ENV{CMD_LINE} = join( ' ', $0, @ARGV );

    my ( $schemaBlackList, $src, $dest, $expDir, $md5Check, $noDelete, $noAttrs );
    my $isVerbose  = 0;
    my $needMd5    = 1;
    my $noMd5      = 0;
    my $needMTime  = 1;
    my $noMTime    = 0;
    my $needBackup = 0;
    my $isRollback = 0;

    GetOptions(
        'h|help'      => \$isHelp,
        'v|verbose=i' => \$isVerbose,
        'envpath=s'   => \$envPath,
        'version=s'   => \$version,
        'blacklist=s' => \$schemaBlackList,
        'nodelete=i'  => \$noDelete,
        'noattrs=i'   => \$noAttrs,
        'backup=i'    => \$needBackup,
        'rollback=i'  => \$isRollback,
        'nomd5=i'     => \$noMd5,
        'md5check=i'  => \$md5Check,
        'notime=i'    => \$noMTime,
        'src=s'       => \$src,
        'x|exp=s'     => \$expDir,
        'dest=s'      => \$dest
    );

    usage() if ( defined($isHelp) );

    $needMd5   = 0 if ( $noMd5 == 1 );
    $needMTime = 0 if ( $noMTime == 1 );

    my $deployUtils = DeployUtils->new();
    $src    = $deployUtils->charsetConv( $src,    'utf-8' );
    $dest   = $deployUtils->charsetConv( $dest,   'utf-8' );
    $expDir = $deployUtils->charsetConv( $expDir, 'utf-8' );

    my $buildEnv = $deployUtils->deployInit( $envPath, $version );
    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};

    my $optionError = 0;
    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }
    if ( $optionError == 1 ) {
        usage();
    }

    my $namePath  = $buildEnv->{NAME_PATH};
    my $dataPath  = $buildEnv->{DATA_PATH};
    my $envName   = $buildEnv->{ENV_NAME};
    my $buildNo   = $buildEnv->{BUILD_NO};
    my $isRelease = $buildEnv->{IS_RELEASE};

    my $tmpDir = $buildEnv->{AUTOEXEC_HOME} . '/tmp';

    if ( $isRelease != 1 ) {
        print("ERROR: $namePath version:$version build $buildNo is not released, can not release to env.\n");
        return 3;
    }

    my $dirInfo    = $deployUtils->getDataDirStruct($buildEnv);
    my $releaseDir = $dirInfo->{release};
    my $distDir    = $dirInfo->{distribute};
    my $mirrorDir  = $dirInfo->{mirror};

    my $dbSrc  = "$releaseDir/db";
    my $docSrc = "$releaseDir/doc";

    my ( $dbDest, $docDest );

    if ( not defined($src) ) {
        $src = "$releaseDir/app";
    }
    else {
        my $srcPath = $src;
        $srcPath =~ s/\/+/\//g;
        $srcPath =~ s/^\///;

        $srcPath = "$releaseDir/app/$srcPath";
        $src     = $srcPath;
    }

    if ( not defined($dest) ) {
        $dest   = $mirrorDir;
        $dbDest = "$distDir/db";
        if ( not -e $dbDest and -d $dbSrc ) {
            mkpath($dbDest);
        }
        $docDest = "$distDir/doc";
        if ( not -e $docDest and -d $docSrc ) {
            mkpath($docDest);
        }
    }
    else {
        my $destPath = $dest;
        $destPath =~ s/^\///;
        $destPath = "$mirrorDir/$destPath";
        $dest     = $destPath;
    }

    if ( not -e $dest ) {
        if ( not mkpath($dest) ) {
            print("ERROR: Create directory $dest failed, $!\n");
            return 3;
        }
    }

    my $lock        = DeployLock->new($buildEnv);
    my $spaceLockId = $lock->lockWorkspace($DeployLock::READ);
    my $mirrorLock  = $lock->lockMirror($DeployLock::WRITE);

    END {
        $lock->unlockMirror($mirrorLock);
        $lock->unLockWorkspace($spaceLockId);
    }

    print("INFO: Try to release(sync) $namePath $version build:$buildNo to $envName(mirror)...\n");
    my $isFail      = 0;
    my $insDiffDest = "$dest.ins";
    eval {
        my $syncExec = new SyncLocalFile(
            version => $version,
            md5     => $needMd5,
            backup  => $needBackup,
            mtime   => $needMTime,
            tmpDir  => $tmpDir
        );

        if ($isRollback) {
            $syncExec->rollback( $src, $dest );
        }
        else {
            $syncExec->upgradeFiles( $src, $dest, $expDir, $noDelete, $noAttrs );
        }

        if ( -d $dbSrc ) {

            #clean the schema black list dir
            foreach my $schema ( split( ',', $schemaBlackList ) ) {
                if ( $schema ne '' and -e "$dbDest/$schema" ) {
                    rmtree("$dbDest/$schema");
                }
            }

            my $dbExpDirs = $expDir;
            if ( defined($schemaBlackList) and $schemaBlackList ne '' ) {
                if ( defined($expDir) and $expDir ne '' ) {
                    $dbExpDirs = "$schemaBlackList,$dbExpDirs";
                }
                else {
                    $dbExpDirs = $schemaBlackList;
                }
            }

            my $dbSyncExec = new SyncLocalFile(
                version => $version,
                md5     => 1,
                backup  => 0
            );

            $dbSyncExec->upgradeFiles( $dbSrc, $dbDest, $dbExpDirs );
        }

        if ( isEmptyDir($dest) == 1 ) {
            rmtree($dest);
        }
        elsif ( defined($md5Check) ) {
            eval { FileUtils::checkMd5($dest); };
            if ($@) {
                $isFail = 1;
                my $errMsg = $@;
                $errMsg =~ s/ at\s*.*$//;
                print($errMsg );
            }
        }

        if ( isEmptyDir($dbSrc) == 1 ) {
            rmtree($dbDest);
        }
        elsif ( defined($md5Check) ) {
            eval { FileUtils::checkMd5($dbDest); };
            if ($@) {
                $isFail = 1;
                my $errMsg = $@;
                $errMsg =~ s/ at\s*.*$//;
                print($errMsg );
            }
        }

        if ( isEmptyDir($docDest) == 1 ) {
            rmtree($docDest);
        }
    };
    if ($@) {
        my $msg = $@;
        $msg =~ s/ at .*?$//;
        print("$msg\n");
        $isFail = 1;
    }

    if ( $isFail != 0 ) {
        print("ERROR: Release(sync) $namePath $version build:$buildNo to $envName(mirror) faled.\n");
    }
    else {
        print("FINEST: Release(sync) $namePath $version build:$buildNo to $envName(mirror) success.\n");
    }

    return $isFail;
}

exit main();

