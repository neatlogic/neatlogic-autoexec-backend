#!/usr/bin/perl

use FindBin;
use lib "$FindBin::Bin/../lib/perl-lib/lib/perl5";
use lib "$FindBin::Bin/../lib";

use strict;
use Getopt::Long;
use AutoCfg;
use SQLFileRunner;
use DBInfo;
use EnvCheck;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              [--checkins 0|1] [--checkdb 0|1] [--checksql 0|1]\n");
    print("\n");
    print("       --envpath: subsys env path in the data directory, example:ATM/ATMP/PRD\n");
    print("       --version: version number\n");
    print("       --checkdb:         check if the db can be connected\n");
    print("       --checkins:        check if the ins can be connected\n");
    print("       --checksql:        check if the sql syntax correct\n");

    exit(1);
}

sub checkSql {
    my ( $envPath, $version ) = @_;

    my $hasError = 0;
    my $runBatch = new RunBatch( $envPath, $version );
    my $envInfo  = ENVInfo::parse( $envPath, $version );

    my $bookItem;

    my $allSqlFiles      = $runBatch->getAllSqlFilePath();
    my $rollbackSqlFiles = $runBatch->getAllSqlFilePath('rollback');
    push( @$allSqlFiles, @$rollbackSqlFiles );
    my $dbTypeCache = {};
    my $sqlFile;
    foreach $sqlFile (@$allSqlFiles) {
        my $pos = index( $sqlFile, '/' );
        my $dbDesc = substr( $sqlFile, 0, $pos );

        my $dbType = $dbTypeCache->{$dbDesc};

        if ( not defined($dbType) ) {
            my @dbDescs   = split( '\.', $dbDesc );
            my $dbName    = $dbDescs[0];
            my $userAlias = $dbDescs[1];

            my ( $host, $port, $user, $pass, $oraWallet );
            eval { $dbType = DBInfo::getDBType( $envPath, $dbName ); };

            $dbTypeCache->{$dbDesc} = $dbType;
        }

        if ( defined($dbType) and $dbType ne '' ) {
            if ( $sqlFile !~ /\.ctl$/i and $sqlFile !~ /\.dmp$/i ) {
                my $ret = SQLFileRunner::checkSqlFiles( $sqlFile, $dbType );
                $hasError = $hasError + $ret;
                if ( $ret eq 0 ) {
                    print("ERROR: $sqlFile check failed.\n");
                }
                else {
                    print("INFO: check sql file $sqlFile success.\n");
                }
            }
        }
        else {
            $hasError = $hasError + 1;
            print("ERROR: $sqlFile check failed because of db not defined in config.\n");
        }
    }

    return $hasError;
}

sub checkDBSchemaPassByClient {
    my ( $envPath, $version ) = @_;

    my $envInfo = ENVPathInfo::parse( $envPath, $version );
    my $runBatch = new RunBatch( $envPath, $version );
    my $allschemas = $runBatch->getAllSchema();

    my $hasError = 0;

    foreach my $schema (@$allschemas) {
        my @dbDescs   = split( '\.', $schema );
        my $dbName    = $dbDescs[0];
        my $userAlias = $dbDescs[1];

        print("INFO: database $schema connecting...\n");
        my $sqlRunner = SQLFileRunner->new( envPathInfo => $envInfo, dbName => $dbName, userAlias => $userAlias );

        $hasError = $sqlRunner->test();
    }

    return $hasError;
}

sub checkDBPassByIpPort {
    my ( $dbType, $host, $port, $dbName, $user, $pass ) = @_;

    my $hasError = SQLFileRunner::testByIpPort( $dbType, $host, $port, $dbName, $user, $pass );

    return $hasError;
}

sub main {
    my ( $isHelp,  $envPath,  $version );
    my ( $checkDB, $checkINS, $checkSQL );

    GetOptions(
        'h|help'     => \$isHelp,
        'envpath=s'  => \$envPath,
        'version=s'  => \$version,
        'checkdb=i'  => \$checkDB,
        'checksql=i' => \$checkSQL,
        'checkins=i' => \$checkINS,
    );
    usage() if ($isHelp);
    usage() if ( not defined($envPath) or not defined($version) );

    my $buildEnv = DeployUtils->deployInit( $envPath, $version );

    my $hasError = 0;
    if ( defined($checkSQL) ) {
        my $ret = checkSql( $envPath, $version );
        $hasError = $hasError + $ret;
    }

    if ( defined($checkDB) ) {
        my $ret = checkDBSchemaPassByClient( $envPath, $version );
        $hasError = $hasError + $ret;
    }

    if ( $hasError ne 0 ) {
        print("ERROR: check $envPath failed.\n");
    }
    else {
        print("FINEST: check $envPath success.\n");
    }

    return $hasError;
}

exit main();

