#!/usr/bin/perl
use strict;
use FindBin;
use IO::Socket::INET;
use File::Basename;
use Getopt::Long;
use Time::Local;
use File::Path;

use DeployUtils;
use ServerAdapter;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              --proxytourl BaseURLForConsole --user UserName --password Password\n");
    print("              --runnow 0|1 --user --trigtype auto|manual --wait 0|1\n");
    print("              --plantime PlanTime --round RoundCount --senario Senario\n");
    print("              --createuser JobUser --instances IP:PORT1,IP:PORT2\n");
    print("              arg1=value1 arg2=value2");
    print("\n");
    print("       --envpath:       Env path in the data directory, example:10.10.0.0/16,10.20.0.0/24\n");
    print("       --version:       Version number of sub system\n");
    print("       --buildno:       Build number\n");
    print("       --targetenvpath: Target EnvPath\n");
    print("       --targetver:     Target version\n");
    print("       --targetbuildno: Target build no\n");
    print("       --proxytourl:    If cross deploy system, need to defined the target deploy system url\n");
    print("       --runnow:        Create job and execute the job\n");
    print("       --plantime:      Job executeion plan time，example: 2022-2-22 17:00:00\n");
    print("       --trigtype:      Trigger type at plan time, auto|manual\n");
    print("       --wait:          Wait the job complete\n");
    print("       --round:         Execution round for job\n");
    print("       --senario:       Senario for system\n");
    print("       --execuser:       Job user\n");
    print("       --instances:     Instances for job, example:192.168.0.1:8080,192.168.0.2:8080\n");

    exit(-1);
}

sub main {
    my ( $isHelp, $envPath, $version, $buildNo );
    my ($proxyToUrl);
    my ( $targetEnvPath, $targetVer, $targetBuildNo );

    my $pname = $FindBin::Script;
    my $senario;
    my $isVerbose  = 0;
    my $trigType   = 0;
    my $waitJob    = 1;
    my $roundCount = 1;
    my $planTime   = '';
    my $jobUser    = $ENV{AUTOEXEC_USER};
    my $instances  = '';

    GetOptions(
        'h|help'        => \$isHelp,
        'v|verbose=i'   => \$isVerbose,
        'envpath=s'     => \$envPath,
        'version=s'     => \$version,
        'buildno=s'     => \$buildNo,
        'proxytourl=s'  => \$proxyToUrl,
        'targetenvpath' => \$targetEnvPath,
        'targetver'     => \$targetVer,
        'targetBuildNo' => \$targetBuildNo,
        'plantime=s'    => \$planTime,
        'trigtype=s'    => \$trigType,
        'wait=i'        => \$waitJob,
        'round=i'       => \$roundCount,
        'senario=s'     => \$senario,
        'execuser=s'    => \$jobUser,
        'instances=s'   => \$instances,
        '<>'            => \&pushItems
    );

    usage() if ( defined($isHelp) );
    my $deployUtils = DeployUtils->new();
    my $buildEnv    = $deployUtils->deployInit( $envPath, $version, $buildNo );

    $envPath = $buildEnv->{NAME_PATH};
    $version = $buildEnv->{VERSION};
    $buildNo = $buildEnv->{BUILD_NO};

    my $optionError = 0;

    my $jobParams = {};

    sub pushItems {
        my ($item) = @_;
        $item =~ s/^\s+//;
        $item =~ s/\s+$//;

        # example: TS_OPT_name1=A=value1 TS_OPT_name2=B=value2
        my @arg = split( /\s*=\s*/, $item, 2 );

        if ( not defined( $arg[0] ) or $arg[0] eq '' or not defined( $arg[0] ) or $arg[1] eq '' ) {
            print("ERROR: invalid args format: '$item', valid format is 'name=value'\n");
            usage();
        }

        $jobParams->{ $arg[0] } = $arg[1];
    }

    if ( not defined($envPath) or $envPath eq '' ) {
        $optionError = 1;
        print("ERROR: EnvPath not defined by option --envpath or Environment:NAME_PATH\n");
    }
    if ( not defined($version) or $version eq '' ) {
        $optionError = 1;
        print("ERROR: Version not defined by option --version or Environment:VERSION\n");
    }

    if ( not defined($trigType) ) {
        print("ERROR: must define option --trigtype.\n");
        $optionError = 1;
    }

    if ( not defined($planTime) and $trigType ne 'now' ) {
        print("ERROR: must define option --plantime.\n");
        $optionError = 1;
    }

    usage() if ( $optionError == 1 );

    if ( not defined($targetEnvPath) or $targetEnvPath eq '' ) {
        $targetEnvPath = $envPath;
    }
    if ( not defined($targetVer) or $targetVer eq '' ) {
        $targetVer = $version;
    }
    if ( not defined($targetBuildNo) or $targetBuildNo eq '' ) {
        $targetBuildNo = $buildNo;
    }

    my $serverAdapter = ServerAdapter->new();
    print("INFO: begin to create job...\n");

    my $hasError = 0;

    my $jobId = $ENV{AUTOEXEC_JOBID};
    if ( not defined($jobId) or $jobId eq '' ) {
        $jobId = 0;
    }

    my ( $targetSysName, $targetModuleName, $targetEnvName ) = split( '/', $targetEnvPath );

    my @nodeList = ();
    foreach my $insLine ( split( /\s*,\s*/, $instances ) ) {
        my @nodeInfo = split( /\s*:\s*/, $insLine );
        push( @nodeList, { ip => $nodeInfo[0], port => $nodeInfo[1] } );
    }

    # %args说明
    # {
    #     name => 'xxxxx', #作业名
    #     version => 'xxxxx', #目标版本号
    #     nodeList => [{ip=>'xxxxx', port=>dddd}], #节点列表，默认空就是全部
    #     scenarioName => 'xxxxx', #场景名
    #     roudnCount => 2, #分组运行组的数量
    #     param => {key => 'value',....} #扩展参数
    # }
    my $planStartTime;
    if ( defined($planTime) and $planTime ne '' ) {

        #2022-2-22 17:00:00
        my ( $year, $month, $day, $hour, $minute, $second );

        if ( $planTime =~ /^\s*(\d{1,4})\W*0*(\d{1,2})\W*0*(\d{1,2})\W*0*(\d{0,2})\W*0*(\d{0,2})\W*0*(\d{0,2})/ ) {
            $year   = $1;
            $month  = $2;
            $day    = $3;
            $hour   = $4;
            $minute = $5;
            $second = $6;
            $hour   |= 0;
            $minute |= 0;
            $second |= 0;
            $year          = ( $year < 100 ? ( $year < 70 ? 2000 + $year : 1900 + $year ) : $year );
            $planStartTime = timelocal( $second, $minute, $hour, $day, $month - 1, $year ) * 1000;
        }
    }

    my $createdJobId;
    eval {
        $createdJobId = $serverAdapter->createJob(
            $jobId,
            sysName       => $targetSysName,
            moduleName    => $targetModuleName,
            envName       => $targetEnvName,
            version       => $targetVer,
            buildNo       => $targetBuildNo,
            scenarioName  => $senario,
            proxyToUrl    => $proxyToUrl,
            triggerType   => $trigType,
            planStartTime => $planStartTime,
            roundCount    => $roundCount,
            execUser      => $jobUser,
            nodeList      => \@nodeList,
            params        => $jobParams
        );
    };
    if ( $@ or not defined($createdJobId) ) {
        $hasError = $hasError + 1;
        print("ERROR: $@");
        print("ERROR: $pname $envPath $version $senario failed.\n");
    }
    else {
        print("INFO: Job $createdJobId created.\n");
    }

    if ( $hasError == 0 and $trigType eq 'now' and $waitJob eq 1 ) {
        my $jobStatus;
        my $loopCount = 0;
        while ( $jobStatus = $serverAdapter->getJobStatus( $createdJobId, proxyToUrl => $proxyToUrl ) ) {
            if ( not defined($jobStatus) ) {
                print("ERROR: can not get job status for jobId:$createdJobId on $proxyToUrl\n");
            }
            elsif ( $jobStatus eq 'succeed' or $jobStatus eq 'checked' ) {
                print("FINEST: job:$createdJobId on $proxyToUrl succeed.\n");
                last;
            }
            elsif ( $jobStatus eq 'running' or $jobStatus eq 'waiting' or $jobStatus eq 'pending' ) {
                if ( $loopCount % 5 eq 0 ) {
                    print("INFO: job:$createdJobId status:$jobStatus, wait...\n");
                }
                $loopCount = $loopCount + 1;
                sleep(3);
                next;
            }
            else {
                $hasError = $hasError + 1;
                print("ERROR: job:$createdJobId on $proxyToUrl $jobStatus.\n");
                last;
            }
        }
    }

    if ( $hasError == 0 ) {
        print("FINEST: $pname $envPath $version $senario succeed.\n");
    }
    else {
        print("ERROR: $pname $envPath $version $senario failed.\n");
    }

    return $hasError;
}

exit main();

