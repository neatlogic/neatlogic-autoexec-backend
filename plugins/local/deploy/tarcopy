#!/usr/bin/perl
#!/usr/bin/perl
use strict;
use FindBin;
use Getopt::Long;
use File::Glob qw(bsd_glob);
use Cwd;

use TarSCPExec;
use DeployUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--envpath EnvPath] [--version VERSION]\n");
    print("              [--verbose 0|1] [--cpifexists 0|1] [--followlinks 0|1] [--pull 0|1]\n");
    print("              [--pdir approot|project|release|distribute|mirror]\n");
    print("              <src> <dest>\n");
    print("\n");
    print("       --envpath: Env path in the data directory, example:ATM/ATMP/PRD/ATMP-1\n");
    print("       --version: version number of sub system\n");
    print("       --cpifexists: copy if local dir or file exists.\n");
    print("       --pull: pull from remote site to local site\n");

    exit(-1);
}

sub main {
    my ( $isHelp, $isVerbose, $envPath, $version );
    my ( $isPull, $isPush, $cpIfExists, $followLinks, $pdir, $node );

    my $pname = $FindBin::Script;

    $isPull      = 0;
    $isVerbose   = 0;
    $followLinks = 0;
    $pdir        = 'distribute';

    GetOptions(
        'h|help'         => \$isHelp,
        'v|verbose=i'    => \$isVerbose,
        'envpath=s{0,1}' => \$envPath,
        'version=s'      => \$version,
        'pull=i'         => \$isPull,
        'cpifexists=i'   => \$cpIfExists,
        'followlinks=i'  => \$followLinks,
        'pdir=s'         => \$pdir,
        'node=s'         => \$node,
        '<>'             => \&pushItems
    );

    usage() if ( defined($isHelp) );

    my ( @items, @dirs );

    sub pushItems {
        my ($item) = @_;
        push( @items, $item );
    }

    my $optionError = 0;
    if ( not defined($envPath) or not defined($version) ) {
        print("ERROR: must defined option --envpath and --version.\n");
        $optionError = 1;
    }

    if ( scalar(@items) < 2 ) {
        print("ERROR: must define local path and remote path.\n");
        $optionError = 1;
    }

    for ( my $i = 0 ; $i < scalar(@items) ; $i++ ) {
        my $dir = $items[$i];
        if ( $dir =~ /\/\.\.\// or $dir =~ /^\.\.\// or $dir =~ /\/\.\.$/ ) {
            print("ERROR: path can not has parent dir opertor:\"..\".\n");
            $optionError = 1;
        }
        else {
            $dir = DeployUtils->charsetConv( $items[$i], 'utf-8' );
            $items[$i] = $dir;
        }
    }

    my $buildEnv = DeployUtils->deployInit( $envPath, $version );
    my $dirInfo  = DeployUtils->getDataDirStruct($buildEnv);
    my $verPath  = $dirInfo->{$pdir};

    if ( defined($pdir) ) {
        if ( not defined($verPath) ) {
            print("ERROR: $pdir not valid, not in appsync|mirror|appbuild|version.\n");
            $optionError = 1;
        }
    }

    my $nodeInfo = {};
    if ( not defined($node) ) {
        $node = $ENV{AUTOEXEC_NODE};
    }

    if ( not defined($node) or $node eq '' ) {
        $optionError = 1;
    }
    else {
        $nodeInfo = from_json($node);
    }

    usage() if ( $optionError == 1 );

    my ( @srcs, $dest );
    $dest = pop(@dirs);

    my $direction = 'push';
    if ( $isPull == 1 ) {
        $direction = 'pull';
    }

    my ( $env, $insId, $insName, $verPath, $verDiffPath );

    my $envName = $buildEnv->{ENV_NAME};
    my $verRoot = $dirInfo->{appRoot};

    my $host    = $nodeInfo->{host};
    my $port    = $nodeInfo->{protocolPort};
    my $user    = $nodeInfo->{username};
    my $pass    = $nodeInfo->{password};
    my $insId   = $nodeInfo->{resourceId};
    my $insName = $nodeInfo->{nodeName};

    $port = 22 if ( not defined($port) );

    my $insLockPath = "$verRoot/.$host.$insId.lock";
    my $verDiffPath = "$verPath.ins/$insName";

    if ( $isPull eq 0 ) {
        foreach my $dir (@items) {
            my $aSrc         = "$verPath/$dir";
            my @aSrcExpanded = bsd_glob($aSrc);

            if ( scalar(@aSrcExpanded) == 0 ) {
                if ( defined($cpIfExists) ) {
                    print("WARN: the src $aSrc does not match any file!\n");
                    next;
                }
            }

            foreach my $d (@aSrcExpanded) {
                push( @dirs, $d );
            }

            my $hasDiff  = 0;
            my @diffDirs = bsd_glob("$verDiffPath/$dir");
            foreach my $diffDir (@diffDirs) {
                if ( -e $diffDir ) {
                    $hasDiff = 1;
                    last;
                }
            }
            if ( $hasDiff == 1 ) {
                push( @dirs, "$verDiffPath/$dir" );
            }
        }
    }
    else {
        @dirs = @items;
    }

    my $hasError = 0;
    if ( $isPull eq 1 ) {
        $dest = "$verPath/$dest";

        foreach my $dir (@dirs) {
            if ( $dir =~ /^\.\.\// or $dir =~ /\/\.\.$/ or $dir =~ /\/\.\.\// ) {
                print("ERROR: FileTrans name can not has '..':$dir.\n");
                exit(-1);
            }

            my $tarScpExec = new TarSCPExec( $host, $port, $user, $pass, $dir, $dest, 1, $followLinks, $isVerbose );
            my $rc = $tarScpExec->exec();

            if ( $rc == 0 ) {
                print("FINEST: pull $host:$dir to $dest success.\n");
            }
            else {
                $hasError = $hasError + $rc;
                print("ERROR: pull $host:$dir to $dest failed.\n");
                last;
            }
        }
    }
    else {
        foreach my $dir (@dirs) {
            if ( $dir =~ /^\.\.\// or $dir =~ /\/\.\.$/ or $dir =~ /\/\.\.\// ) {
                $hasError = $hasError + 1;
                print("ERROR: file name can not has '..':$dir.\n");
                exit($hasError);
            }
            my $tarScpExec = new TarSCPExec( $host, $port, $user, $pass, $dir, $dest, 0, $followLinks, $isVerbose );
            my $rc = $tarScpExec->exec();

            if ( $rc == 0 ) {
                print("FINEST: push $dir to $host:$dest success.\n");
            }
            else {
                $hasError = $hasError + $rc;
                print("ERROR: push $dir to $host:$dest failed.\n");
                last;
            }
        }
    }

    if ( $hasError > 0 ) {
        print( "ERROR: $pname --$direction " . join( ' ', @dirs ) . " failed.\n" );
    }

    return $hasError;
}

exit main();
