#!/usr/bin/perl
use strict;
use FindBin;
use JSON;
use File::Basename;
use Cwd 'abs_path';
use Getopt::Long;

use SSHRemoteExec;
use DeployUtils;

Getopt::Long::Configure("pass_through");

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--verbose 0|1]\n");
    print("              [--supass SuPassword] [--eofstr EOFString] [--failstr FailString]\n");
    print("              [--timeout TimeoutSecs] [-o SSHOptions] cmd\n");
    print("\n");
    print("       --node:         Host node json\n");
    print("       --supass:       su execute user password\n");
    print("       --eofstr:       When command outpute match eofstr, the execute will be terminated\n");
    print("       --failstr:      When command outpute match failstr, the execute will be terminated and return faled\n");
    print("       --timeout:      Tiemout for ssh execute\n");
    print("       --destencoding: Target OS encoding\n");
    print("       --o:            SSH options, example: \"SendEnv EXEC_PASSWORD;ForwardX11 yes\"\n");
    print("       cmd:            command text\n");

    exit(1);
}

sub main {
    my ( $isHelp, $isVerbose, $destCharset );
    my ( $node, $supass, $sshOpts, $cmd, $eofStr, $failStr, $timeOut );

    $isVerbose = 0;

    $destCharset = 'utf-8';
    $cmd         = '';

    sub addCmd {
        my $item = shift(@_);
        $cmd = $cmd . ' ' . $item;
    }

    GetOptions(
        'h|help'         => \$isHelp,
        'v|verbose=i'    => \$isVerbose,
        'destencoding=s' => \$destCharset,
        'node=s'         => \$node,
        'supass=s'       => \$supass,
        'eofstr=s'       => \$eofStr,
        'failstr=s'      => \$failStr,
        'timeout=i'      => \$timeOut,
        'o=s'            => \$sshOpts,
        '<>'             => \&addCmd
    );

    usage() if ( defined($isHelp) );

    my $optionError = 0;

    if ( $cmd eq '' ) {
        $optionError = 1;
        print("ERROR: Must defined cmd with command arguments.\n");
    }

    if ( $destCharset eq '' ) {
        $destCharset = 'utf-8';
    }
    else {
        $destCharset = lc($destCharset);
    }

    if ( defined($eofStr) ) {
        if ( $eofStr =~ /^\{([\w-\d]+)\}/ ) {
            $eofStr =~ s/^\{[\w-\d]+\}//;
            $eofStr = Encode::encode( lc($1), Encode::decode( 'utf-8', $eofStr ) );
        }
        elsif ( $destCharset ne 'utf-8' ) {
            $eofStr = Encode::encode( $destCharset, Encode::decode( 'utf-8', $eofStr ) );
        }
    }

    if ( defined($failStr) ) {
        if ( $failStr =~ /^\{([\w-\d]+)\}/ ) {
            $failStr =~ s/^\{[\w-\d]+\}//;
            $failStr = Encode::encode( lc($1), Encode::decode( 'utf-8', $failStr ) );
        }
        elsif ( $destCharset ne 'utf-8' ) {
            $failStr = Encode::encode( $destCharset, Encode::decode( 'utf-8', $failStr ) );
        }
    }

    if ( defined($cmd) ) {
        if ( $destCharset ne 'utf-8' ) {
            $cmd = Encode::encode( $destCharset, Encode::decode( 'utf-8', $cmd ) );
        }
    }

    my $hasError = 0;

    my $deployUtils = DeployUtils->new();

    my $nodeInfo = $deployUtils->getNodeInfo($node);
    if ( not $nodeInfo ) {
        $optionError = 1;
        print("ERROR: Execute node json not defined by environment AUTOEXEC_NODE or option --node\n");
    }

    if ( $optionError == 1 ) {
        usage();
    }

    my $host    = $nodeInfo->{host};
    my $port    = $nodeInfo->{protocolPort};
    my $user    = $nodeInfo->{username};
    my $pass    = $nodeInfo->{password};
    my $insId   = $nodeInfo->{resourceId};
    my $insName = $nodeInfo->{nodeName};

    if ( defined($pass) and $pass ne '' ) {
        if ( $pass =~ s/^\{ENCRYPTED\}// ) {
            $pass = $deployUtils->decryptPwd($pass);
        }
    }

    my $namePath = $ENV{DEPLOY_PATH};
    my $idPath   = $ENV{DEPLOY_ID_PATH};
    if ( defined($namePath) and $namePath ne '' ) {
        $ENV{INS_ID_PATH} = "$idPath/$insId";
        $ENV{INS_PATH}    = "$namePath/$insName";
    }

    my $sshExec = new SSHRemoteExec(
        host       => $host,
        port       => $port,
        username   => $user,
        password   => $pass,
        verbose    => $isVerbose,
        cmd        => $cmd,
        scriptFile => undef,
        eofStr     => $eofStr,
        failStr    => $failStr,
        supass     => $supass,
        timeout    => $timeOut,
        sshOpts    => $sshOpts
    );

    my $ret = $sshExec->exec();

    $hasError = $hasError + $ret;

    if ( $sshExec->{status} eq 'SUCCESS' ) {
        print("FINEST: ssh remote exec success.\n");
    }
    elsif ( $sshExec->{status} eq 'WARN' ) {
        print("WARN: ssh remote exec has warning.\n");
    }
    elsif ( $sshExec->{status} eq 'ERROR' ) {
        $hasError = $hasError + 1;
        print("ERROR: ssh remote exec has error.\n");
    }

    return $hasError;
}

exit main();

