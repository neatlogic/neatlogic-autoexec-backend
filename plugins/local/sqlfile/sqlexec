#!/usr/bin/perl

use FindBin;
use lib $FindBin::Bin;
use lib "$FindBin::Bin/../lib/perl-lib/lib/perl5";

use strict;
use Cwd;
use Digest::MD5;
use Getopt::Long;
use Expect;
use JSON;

use DBInfo;
use SQLFileRunner;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--verbose 0|1] [--dryrun 0|1] [--autocommit 0|1]\n");
    print("              [--dbversion DBVersion] [--dbargs DBArguments]\n");
    print("              [--encoding SqlFileEncoding] --sqlfilejson SqlFileJsonArray\n");
    print("       --dryrun:      only test, not realy execute the sql script\n");
    print("       --autocommit:  permit autocommit on mysql, postgresql\n");
    print("       --dbVersion:   db major version number, example:orale 11g, --dbversion 11\n");
    print("       --dbArgs:      db client tool extend arguments, example:oracle, --dbargs 'fully=y'\n");
    print("       --encoding:    encoding for sql file\n");
    print("       --sqlfilejson: sql file json array, example:[\"1.sql\",\"2.sql\"]\n");

    exit(1);
}

sub main {
    my $isforce = 0;

    my $node;
    my $isHelp        = 0;
    my $isVerbose     = 0;
    my $isDryRun      = 0;
    my $isForce       = 0;
    my $isAutoCommit  = 0;
    my $parallelCount = 0;

    my $dbVersion;
    my $dbArgs;
    my $charSet;
    my $dbNodeJson;
    my $sqlFileJson;

    GetOptions(
        'help'          => \$isHelp,
        'node=s'        => \$node,
        'v|verbose=i'   => \$isVerbose,
        'force=i'       => \$isForce,
        'dryrun'        => \$isDryRun,
        'parallel=i'    => \$parallelCount,
        'autocommit'    => \$isAutoCommit,
        'dbversion=s'   => \$dbVersion,
        'dbargs=s'      => \$dbArgs,
        'encoding=s'    => \$charSet,
        'sqlfilejson=s' => \$sqlFileJson
    );

    $ENV{IS_INTERACT} = 1;
    my $hasOptError = 0;

    my $dbNode;
    my $dbNodeJson = $ENV{AUTOEXEC_NODE};
    if ( defined($dbNodeJson) and $dbNodeJson ne '' ) {
        $dbNode = from_json($dbNodeJson);
    }

    if ( not defined($dbNode) ) {
        $hasOptError = 1;
        print("ERROR: Must define db schema with environment varialble AUTOEXEC_NODE in json string.\n");
    }

    my $phaseName = $ENV{AUTOEXEC_PHASE_NAME};
    if ( not defined($phaseName) or $phaseName eq '' ) {
        $hasOptError = 1;
        print("ERROR: Must define phase name with envirment varialble AUTOEXEC_PHASE_NAME.\n");
    }

    my $execUser = $ENV{AUTOEXEC_USER};
    if ( not defined($execUser) or $execUser eq '' ) {
        $ENV{AUTOEXEC_USER} = 'anonymous';
    }

    my $sqlFiles = [];
    if ( defined($sqlFileJson) and $sqlFileJson ne '' ) {
        my $sqlFileArray = from_json($sqlFileJson);
        foreach my $sqlFile (@$sqlFileArray) {
            $sqlFile =~ s/^\/?file\///;
            push( @$sqlFiles, $sqlFile );
        }
    }
    if ( scalar(@$sqlFiles) == 0 ) {
        $hasOptError = 1;
        print("ERROR: Must define sql files with option --sqlfiles in json string.\n");
    }

    if ( $hasOptError == 1 ) {
        usage();
    }

    my $jobPath = $ENV{AUTOEXEC_WORK_PATH};
    if ( not defined($jobPath) or $jobPath eq '' ) {
        $jobPath = getcwd();
    }

    #sqlfile, log, status
    #jobpath/
    #|-- file
    #|   |-- 1.sql
    #|   `-- 2.sql
    #|-- log
    #|   `-- phase-run
    #|       `-- 192.168.0.26-3306-bsm
    #|           |-- 2.sql.hislog
    #|           |   |-- 20210625-163515-failed-anonymous.txt
    #|           |   |-- 20210625-163607-failed-anonymous.txt
    #|           |   `-- 20210625-164543-failed-anonymous.txt
    #|           `-- 2.sql.txt
    #|-- sqlfile
    #|   `-- phase-run
    #|       `-- 2.sql
    #`-- status
    #    `-- phase-run
    #            `-- 192.168.0.26-3306-bsm
    #                        `-- 2.sql.txt

    my $sqlUploadDir = "$jobPath/file";
    my $sqlFileDir   = "$jobPath/sqlfile/$phaseName";
    my $logFileDir   = "$jobPath/log/$phaseName/$dbNode->{host}-$dbNode->{port}-$dbNode->{resourceId}";
    my $sqlStatusDir = "$jobPath/status/$phaseName/$dbNode->{host}-$dbNode->{port}-$dbNode->{resourceId}";

    my $dbExtArgs = {
        fileCharset => $charSet,
        autocommit  => $isAutoCommit,
        version     => $dbVersion,
        args        => $dbArgs
    };

    my $dbInfo = DBInfo->new( $dbNode, $dbExtArgs );

    my $sqlFileRunner = SQLFileRunner->new(
        dbInfo       => $dbInfo,          #单DB目标执行需要的特有的属性
        nodeInfo     => $dbNode,
        sqlUploadDir => $sqlUploadDir,    #单DB目标执行需要的上传sql的上传路径（相对于作业路径）

        sqlFileDir   => $sqlFileDir,
        sqlStatusDir => $sqlStatusDir,
        logFileDir   => $logFileDir,
        sqlFiles     => $sqlFiles,
        isForce      => $isForce,
        isDryRun     => $isDryRun,
        istty        => 0
    );
    my $rc = 0;
    $rc = $sqlFileRunner->checkSqlFiles();

    if ( $rc == 0 ) {
        $rc = $sqlFileRunner->execSqlFiles();
    }

    return $rc;
}

exit main();

