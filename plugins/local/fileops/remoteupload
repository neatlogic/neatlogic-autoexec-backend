#!/usr/bin/perl
use strict;
use FindBin;
use JSON;
use Getopt::Long qw(GetOptionsFromArray);
Getopt::Long::Configure("pass_through");

use DeployUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--verbose 0|1] [--node NodeJson] [--direction push|pull]\n");
    print("              [--np NoPermission] [--followlinks FollowLinks] [--cpifexists CopyIfExists]]\n");
    print("              [--src SourceDirectory] [--dest DestinationDirectory] \n");
    print("\n");
    print("       --node:        Host node json\n");
    print("       --src:         copy source files json.\n");
    print("       --dest:        remote target path .\n");
    exit(1);
}

sub main {
    my ( $isHelp, $node );

    my $pname  = $FindBin::Script;
    my $binDir = $FindBin::Bin;

    my $srcFileConf;
    my $isHelp      = 0;
    my $isVerbose   = 0;
    my $node        = '';
    my $srcFileConf = '';
    my $dest        = '';

    GetOptions(
        'h|help'      => \$isHelp,
        'v|verbose=i' => \$isVerbose,
        'node=s'      => \$node,
        'src=s'       => \$srcFileConf,
        'dest=s'      => \$dest
    );

    my $srcFiles = from_json($srcFileConf);
    my $src      = join( ',', @$srcFiles );

    my $deployUtils = DeployUtils->new();
    my $optionError = 0;

    my $nodeInfo = $deployUtils->getNodeInfo($node);
    if ( not $nodeInfo ) {
        $optionError = 1;
        print("ERROR: Execute node json not defined by environment AUTOEXEC_NODE or option --node\n");
    }

    if ( $optionError == 1 ) {
        usage();
    }

    my $hasError = 0;

    my @args     = ( 'node', $node, '--direction', 'push', '--verbose', $isVerbose, '--src', $src, '--dest', $dest );
    my $protocol = $nodeInfo->{protocol};
    if ( $protocol eq 'tagent' ) {
        exec( "$binDir/tagentcopy", @args );
    }
    elsif ( $protocol eq 'ssh' ) {
        exec( "$binDir/scpexec", @args );
    }
    else {
        print("ERROR: Protolc $protocol not supported by $pname, failed.\n");
        $hasError = 1;
    }

    return $hasError;
}

exit main();
