#!/usr/bin/perl
use strict;
use FindBin;
use File::Basename;
use Getopt::Long;
use File::Glob qw(bsd_glob);
use Cwd;

use AutoExecUtils;
use TagentClient;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--verbose 0|1] [--node NodeJson] [--direction push|pull]\n");
    print("              [--np NoPermission] [--followlinks FollowLinks] [--cpifexists CopyIfExists]]\n");
    print("              [--pdir approot|project|release|distribute|mirror]\n");
    print("              [--src SourceDirectory] [--dest DestinationDirectory] \n");
    print("\n");
    print("       --node:        Host node json\n");
    print("       --direction:   push from local site to remote site or pull from remote site to local site .\n");
    print("       --np:          not preserve the mode of file\n");
    print("       --cpifexists:  copy if local dir or file exists.\n");
    print("       --followlinks: symbol link as directory\n");
    print("       --src:         copy source path ,many src path , separated .\n");
    print("       --dest:        remote target path .\n");
    exit(1);
}

sub main {
    my ( $isHelp, $isVerbose, $envPath, $version );
    my ( $pdir, $node, $direction, $src, $dest, $np, $cpIfExists, $followLinks );
    AutoExecUtils::setEnv();

    my $pname = basename($0);

    $isVerbose   = 0;
    $np          = 0;
    $followLinks = 0;
    $cpIfExists  = 0;

    GetOptions(
        'h|help'         => \$isHelp,
        'envpath=s{0,1}' => \$envPath,
        'version=s'      => \$version,
        'v|verbose=i'    => \$isVerbose,
        'node=s'         => \$node,
        'direction=s'    => \$direction,
        'pdir=s'         => \$pdir,
        'src=s'          => \$src,
        'dest=s'         => \$dest,
        'np=i'           => \$np,
        'followlinks=i'  => \$followLinks,
        'cpifexists=i'   => \$cpIfExists
    );

    usage() if ( defined($isHelp) );

    my $optionError = 0;

    my $deployUtils = DeployUtils->new();

    my $nodeInfo = $deployUtils->getNodeInfo($node);
    if ( not $nodeInfo ) {
        $optionError = 1;
        print("ERROR: Execute node json not defined by environment AUTOEXEC_NODE or option --node\n");
    }

    if ( not defined($direction) or $direction eq '' ) {
        print("ERROR: must define direction value pull or push .\n");
        $optionError = 1;
    }

    if ( not defined($src) or $src eq '' ) {
        print("ERROR: must define src path.\n");
        $optionError = 1;
    }
    if ( $src =~ /\/\.\.\// or $src =~ /^\.\.\// or $src =~ /\/\.\.$/ ) {
        print("ERROR: src path can not has parent dir opertor:\"..\".\n");
        $optionError = 1;
    }

    if ( not defined($dest) or $dest eq '' ) {
        print("ERROR: must define src path.\n");
        usage();
    }
    if ( $dest =~ /\/\.\.\// or $dest =~ /^\.\.\// or $dest =~ /\/\.\.$/ ) {
        print("ERROR: dest path can not has parent dir opertor:\"..\".\n");
        $optionError = 1;
    }

    my $deployEnv = $deployUtils->deployInit( $envPath, $version );
    $envPath = $deployEnv->{NAME_PATH};
    $version = $deployEnv->{VERSION};
    my $dirInfo = $deployUtils->getDataDirStruct($deployEnv);
    my $verPath = $dirInfo->{$pdir};

    if ( defined($pdir) ) {
        if ( not defined($verPath) ) {
            print("ERROR: $pdir not valid, not in appsync|mirror|appbuild|version.\n");
            $optionError = 1;
        }
    }

    if ( $optionError == 1 ) {
        usage();
    }

    my $host = $nodeInfo->{host};
    my $port = $nodeInfo->{protocolPort};
    my $user = $nodeInfo->{username};
    my $pass = $nodeInfo->{password};

    #my $insId   = $nodeInfo->{resourceId};
    #my $insName = $nodeInfo->{nodeName};
    my $insUniqName = $nodeInfo->{nodeUniqueName};

    if ( defined($pass) and $pass ne '' ) {
        $pass = $deployUtils->decryptPwd($pass);
    }

    if ( not defined($port) or $port eq '' ) {
        $port = 3939;
    }

    my $ret     = 0;
    my @srcDirs = split( /,/, $src );
    my $tagent  = new TagentClient( $host, $port, $pass );

    if ( $direction eq 'push' ) {
        my $verDiffPath = "$verPath.ins/$insUniqName";

        foreach my $target (@srcDirs) {
            my @targetDirs = bsd_glob("$verPath/$target");
            if ( scalar(@targetDirs) == 0 ) {
                $ret = 1;
                print("ERROR: Source file or directory:$target not found.\n");
                last;
            }

            foreach my $dir (@targetDirs) {
                $ret = $tagent->upload( $user, $dir, $dest, $isVerbose, 0, $followLinks );
                if ( $ret ne 0 ) {
                    last;
                }
            }

            if ( $ret ne 0 ) {
                last;
            }

            foreach my $diffDir ( bsd_glob("$verDiffPath/$target") ) {
                $ret = $tagent->upload( $user, $diffDir, $dest, $isVerbose, 0, $followLinks );
                if ( $ret ne 0 ) {
                    last;
                }
            }

            if ( $ret ne 0 ) {
                last;
            }
        }
    }
    elsif ( $direction eq 'pull' ) {
        if ( !-d $dest ) {
            $ret = 1;
            print("ERROR: dest path $dest not exists .\n");
        }
        else {
            foreach my $target (@srcDirs) {
                $ret = $tagent->download( $user, $target, $dest, $isVerbose, $followLinks );
                if ( $ret ne 0 ) {
                    last;
                }
            }
        }
    }

    if ( $ret ne 0 ) {
        print("ERROR: $pname --$direction $src $dest failed.\n");
    }
    else {
        print("INFO: $pname --$direction $src $dest success.\n");
    }
    return $ret;
}

exit( main() );

