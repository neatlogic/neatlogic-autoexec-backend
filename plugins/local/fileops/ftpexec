#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/../lib/perl-lib/lib/perl5";
use lib "$FindBin::Bin/../lib";

use strict;
use AutoExecUtils;
use IO::File;
use Getopt::Long;
use File::Basename;
use Net::FTP::Recursive;

sub usage {
    my $pname = $FindBin::Script;

    print("Usage: $pname [--verbose 0|1] [--node NodeJson] [--direction push|pull]\n");
    print("              [--src SourceDirectory] [--dest DestinationDirectory] \n");
    print("\n");
    print("       --node:      Host node json\n");
    print("       --direction: push from local site to remote site or pull from remote site to local site .\n");
    print("       --src:       copy source path ,many src path , separated .\n");
    print("       --dest:      remote target path .\n");
    exit(1);
}

sub main {
    my ( $isHelp, $isVerbose );
    my ( $node, $direction, $src, $dest );

    AutoExecUtils::setEnv();
    my $pname = $FindBin::Script;

    my $isVerbose = 0;

    GetOptions(
        'h|help'      => \$isHelp,
        'v|verbose=i' => \$isVerbose,
        'node=s'      => \$node,
        'direction:s' => \$direction,
        'src:s'       => \$src,
        'dest:s'      => \$dest
    );

    usage() if ( defined($isHelp) );

    my $optionError = 0;
    my $nodeInfo    = {};
    if ( not defined($node) ) {
        $node = $ENV{AUTOEXEC_NODE};
    }

    if ( not defined($node) or $node eq '' ) {
        $optionError = 1;
    }
    else {
        $nodeInfo = from_json($node);
    }

    if ( not defined($direction) or $direction eq '' ) {
        print("ERROR: must define direction value pull or push .\n");
        $optionError = 1;
    }

    if ( not defined($src) or $src eq '' ) {
        print("ERROR: must define src path.\n");
        $optionError = 1;
    }
    if ( $src =~ /\/\.\.\// or $src =~ /^\.\.\// or $src =~ /\/\.\.$/ ) {
        print("ERROR: src path can not has parent dir opertor:\"..\".\n");
        $optionError = 1;
    }

    if ( not defined($dest) or $dest eq '' ) {
        print("ERROR: must define src path.\n");
        usage();
    }
    if ( $dest =~ /\/\.\.\// or $dest =~ /^\.\.\// or $dest =~ /\/\.\.$/ ) {
        print("ERROR: dest path can not has parent dir opertor:\"..\".\n");
        $optionError = 1;
    }

    if ( $optionError == 1 ) {
        usage();
    }

    my $host    = $nodeInfo->{host};
    my $port    = $nodeInfo->{protocolPort};
    my $user    = $nodeInfo->{username};
    my $pass    = $nodeInfo->{password};
    my $insId   = $nodeInfo->{resourceId};
    my $insName = $nodeInfo->{nodeName};

    if ( not defined($port) or $port eq '' ) {
        $port = 21;
    }

    my $isSuccess = 0;
    my $ftp = Net::FTP::Recursive->new( $host, Port => $port, Debug => 0, Timeout => 30 ) or die "ERROR::connect ftp $host $port failed.\n";
    $ftp->login( $user, $pass ) or die "ERROR::$user login failed.\n";
    $ftp->binary();
    print("INFO:login ftp success.\n");

    my @src_dirs = split( /,/, $src );
    if ( $direction eq 'push' ) {
        foreach my $target (@src_dirs) {
            my $isFile = 0;
            if ( !-d $target and !-e $target ) {
                $isSuccess = 1;
                print("ERROR:: src path $target not exists.\n");
                last;
            }
            if ( -d $target ) {
                $isFile = 0;
            }
            else {
                $isFile = 1;
            }
            if ( $isFile == 0 ) {
                my $target_name = basename($target);
                print("INFO::upload folder $target.\n");

                #切换目标根路径
                $ftp->cwd($dest);
                $ftp->mkdir($target_name);
                $ftp->cwd($target_name);
                chdir($target);
                $ftp->rput($target);
            }
            else {
                print("INFO::upload file $target.\n");
                $ftp->put($target);
            }
        }
    }
    elsif ( $direction eq 'pull' ) {
        if ( !-d $dest ) {
            $isSuccess = 1;
            print("ERROR:: dest path $dest not exists.\n");
        }
        else {
            foreach my $target (@src_dirs) {
                my $isFile = 0;
                unless ( $ftp->cwd($target) ) {
                    $isFile = 1;
                }
                else {
                    $isFile = 0;
                }
                chdir($dest);
                if ( $isFile == 0 ) {
                    print("INFO::download folder $target.\n");
                    my $folder = File::Spec->catfile( $dest, $target );
                    if ( !-d $folder ) {
                        system("mkdir -p $folder");
                    }
                    chdir($folder);
                    $ftp->rget( $target, $folder );
                }
                else {
                    print("INFO::download file $target.\n");
                    $ftp->get($target);
                }
            }
        }
    }
    $ftp->quit;
    if ( $isSuccess ne 0 ) {
        print("ERROR: $pname --$direction $src $dest failed.\n");
    }
    else {
        print("INFO: $pname --$direction $src $dest success.\n");
    }
    return $isSuccess;
}

exit( main() );

