.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SOAPSH 1"
.TH SOAPSH 1 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SOAPsh.pl \- Interactive shell for SOAP calls
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  perl SOAPsh.pl http://services.soaplite.com/examples.cgi http://www.soaplite.com/My/Examples
\&  > getStateName(2)
\&  > getStateNames(1,2,3,7)
\&  > getStateList([1,9])
\&  > getStateStruct({a=>1, b=>24})
\&  > Ctrl\-D (Ctrl\-Z on Windows)
.Ve
.PP
or
.PP
.Vb 3
\&  # all parameters after uri will be executed as methods
\&  perl SOAPsh.pl http://soap.4s4c.com/ssss4c/soap.asp http://simon.fell.com/calc doubler([10,20,30])
\&  > Ctrl\-D (Ctrl\-Z on Windows)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SOAPsh.pl is a shell for making \s-1SOAP\s0 calls. It takes two parameters:
mandatory endpoint and optional uri (actually it will tell you about it
if you try to run it). Additional commands can follow.
.PP
After that you'll be able to run any methods of SOAP::Lite, like autotype,
readable, encoding, etc. You can run it the same way as you do it in
your Perl script. You'll see output from method, result of \s-1SOAP\s0 call,
detailed info on \s-1SOAP\s0 faulure or transport error.
.PP
For full list of available methods see documentation for SOAP::Lite.
.PP
Along with methods of SOAP::Lite you'll be able (and that's much more
interesting) run any \s-1SOAP\s0 methods you know about on remote server and
see processed results. You can even switch on debugging (with call
something like: \f(CW\*(C`on_debug(sub{print@_})\*(C'\fR) and see \s-1SOAP\s0 code with
headers sent and received.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000 Paul Kulchenko. All rights reserved.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Kulchenko (paulclinger@yahoo.com)
