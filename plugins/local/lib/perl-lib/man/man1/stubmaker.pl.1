.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STUBMAKER 1"
.TH STUBMAKER 1 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
stubmaker.pl \- Generates client stubs from a WSDL file.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-d <dirname>" 4
.IX Item "-d <dirname>"
Specifies the directory you wish to output the files to. The directory must already exist.
.IP "\-v" 4
.IX Item "-v"
Turns on \*(L"verbose\*(R" output during the code stub generation process. To be honest, there is not much the program outputs, but if you must see something output to the console, then this fits the bill.
.IP "\-\-help" 4
.IX Item "--help"
Outputs a short help message.
.IP "\-\-version" 4
.IX Item "--version"
Outputs the current version of stubmaker.pl.
.SH "STUB FILES"
.IX Header "STUB FILES"
.SS "\s-1STUB SUBROUTINES\s0"
.IX Subsection "STUB SUBROUTINES"
The \*(L"class\*(R" or \*(L"package\*(R" created by stubmaker.pl is actually a sub-class of
the core SOAP::Lite object. As a result, all methods one can call upon
SOAP::Lite one can also call upon generated stubs.
.PP
For example, suppose you wanted to obtain readable output from the generated
stub, then simply call \f(CWreadable(1)\fR on the stub's instance. See the example
below.
.PP
The following subroutines are unique to generated stub classes, and help the
user control and configure the stub class.
.IP "want_som(boolean)" 4
.IX Item "want_som(boolean)"
When set to 1, SOAP::Lite will return \s-1SOAP::SOM\s0 objects to the user upon
invoking a method on a remote service. This is very helpful when you need
to check to see if the return value is a SOAP::Fault or not. When set to 0,
SOAP::Lite will return the return value of the method.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Invoking stubmaker.pl from the command line"
.IX Subsection "Invoking stubmaker.pl from the command line"
> perl stubmaker.pl http://www.xmethods.net/sd/StockQuoteService.wsdl
Or:
> perl \*(L"\-MStockQuoteService qw(:all)\*(R" \-le \*(L"print getQuote('\s-1MSFT\s0')\*(R"
.SS "Working with stub classes"
.IX Subsection "Working with stub classes"
Command line:
> perl stubmaker.pl http://ws1.api.re2.yahoo.com/ws/soap\-demo/full.wsdl
.PP
File: echo.pl
> use full;
> use SOAP::Lite +trace => qw( debug );
> my \f(CW$f\fR = new full;
> \f(CW$f\fR\->\fBuse_prefix\fR\|(0);
> \f(CW$f\fR\->\fBreadable\fR\|(1);
> \f(CW$f\fR\->\fBwant_som\fR\|(1);
> \f(CW$som\fR = \f(CW$f\fR\->echoViaBase64(\*(L"foo\*(R");
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2005 Paul Kulchenko. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
