.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PERLSH 1"
.TH PERLSH 1 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlsh \- one\-line perl evaluator with line editing function and
	 variable name completion function
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  perlsh
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program reads input a line, and evaluates it by perl interpreter,
and prints the result.  If the result is a list value then each value
of the list is printed line by line.  This program can be used as a
very strong calculator which has whole perl functions.
.PP
This is a sample program Term::ReadLine::Gnu module.  When you input a
line, the line editing function of \s-1GNU\s0 Readline Library is available.
Perl symbol name completion function is also available.
.PP
Before invoking, this program reads \fI~/.perlshrc\fR and evaluates the
content of the file.
.PP
When this program is terminated, the content of the history buffer is
saved in a file \fI~/.perlsh_history\fR, and it is read at next
invoking.
.SH "VARIABLES"
.IX Header "VARIABLES"
You can customize the behavior of \f(CW\*(C`perlsh\*(C'\fR by setting following
variables in \fI~/.perlshrc\fR;
.ie n .IP "$PerlSh::PS1" 4
.el .IP "\f(CW$PerlSh::PS1\fR" 4
.IX Item "$PerlSh::PS1"
The primary prompt string.  The following backslash-escaped special
characters can be used.
.Sp
.Vb 4
\&        \eh: host name
\&        \eu: user name
\&        \ew: package name
\&        \e!: history number
.Ve
.Sp
The default value is `\f(CW\*(C`\ew[\e!]$ \*(C'\fR'.
.ie n .IP "$PerlSh::PS2" 4
.el .IP "\f(CW$PerlSh::PS2\fR" 4
.IX Item "$PerlSh::PS2"
The secondary prompt string.  The default value is `\f(CW\*(C`> \*(C'\fR'.
.ie n .IP "$PerlSh::HISTFILE" 4
.el .IP "\f(CW$PerlSh::HISTFILE\fR" 4
.IX Item "$PerlSh::HISTFILE"
The name of the file to which the command history is saved.  The
default value is \f(CW\*(C`~/.perlsh_history\*(C'\fR.
.ie n .IP "$PerlSh::HISTSIZE" 4
.el .IP "\f(CW$PerlSh::HISTSIZE\fR" 4
.IX Item "$PerlSh::HISTSIZE"
If not \f(CW\*(C`undef\*(C'\fR, this is the maximum number of commands to remember in
the history.  The default value is 256.
.ie n .IP "$PerlSh::STRICT" 4
.el .IP "\f(CW$PerlSh::STRICT\fR" 4
.IX Item "$PerlSh::STRICT"
If true, restrict unsafe constructs.  See \f(CW\*(C`use strict\*(C'\fR in perl man
page.  The default value is 0;
.SH "FILES"
.IX Header "FILES"
.IP "\fI~/.perlshrc\fR" 4
.IX Item "~/.perlshrc"
This file is eval-ed at initialization.  If a subroutine \f(CW\*(C`afterinit\*(C'\fR
is defined in this file, it will be eval-ed after initialization.
Here is a sample.
.Sp
.Vb 3
\&        # \-*\- mode: perl \-*\-
\&        # decimal to hexa
\&        sub h { map { sprintf("0x%x", $_ ) } @_;}
\&
\&        sub tk {
\&            $t\->tkRunning(1);
\&            use Tk;
\&            $mw = MainWindow\->new();
\&        }
\&
\&        # for debugging Term::ReadLine::Gnu
\&        sub afterinit {
\&            *t = \e$PerlSh::term;
\&            *a = \e$PerlSh::attribs;
\&        }
.Ve
.IP "\fI~/.perlsh_history\fR" 4
.IX Item "~/.perlsh_history"
.PD 0
.IP "\fI~/.inputrc\fR" 4
.IX Item "~/.inputrc"
.PD
A initialization file for the \s-1GNU\s0 Readline Library.  Refer its manual
for details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::ReadLine::Gnu <http://search.cpan.org/dist/Term-ReadLine-Gnu/>
.PP
\&\s-1GNU\s0 Readline Library <http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Hiroo Hayashi <hiroo.hayashi@computer.org>
