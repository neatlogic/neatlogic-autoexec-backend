.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Parameters 3"
.TH Mojo::Parameters 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Parameters \- Parameters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Parameters;
\&
\&  # Parse
\&  my $params = Mojo::Parameters\->new(\*(Aqfoo=bar&baz=23\*(Aq);
\&  say $params\->param(\*(Aqbaz\*(Aq);
\&
\&  # Build
\&  my $params = Mojo::Parameters\->new(foo => \*(Aqbar\*(Aq, baz => 23);
\&  push @$params, i => \*(Aqâ™¥ mojolicious\*(Aq;
\&  say "$params";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Parameters is a container for form parameters used by Mojo::URL,
based on \s-1RFC 3986\s0 <http://tools.ietf.org/html/rfc3986> and the
\&\s-1HTML\s0 Living Standard <https://html.spec.whatwg.org>.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Parameters implements the following attributes.
.SS "charset"
.IX Subsection "charset"
.Vb 2
\&  my $charset = $params\->charset;
\&  $params     = $params\->charset(\*(AqUTF\-8\*(Aq);
.Ve
.PP
Charset used for encoding and decoding parameters, defaults to \f(CW\*(C`UTF\-8\*(C'\fR.
.PP
.Vb 2
\&  # Disable encoding and decoding
\&  $params\->charset(undef);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojo::Parameters inherits all methods from Mojo::Base and implements the
following new ones.
.SS "append"
.IX Subsection "append"
.Vb 4
\&  $params = $params\->append(foo => \*(Aqba&r\*(Aq);
\&  $params = $params\->append(foo => [\*(Aqba&r\*(Aq, \*(Aqbaz\*(Aq]);
\&  $params = $params\->append(foo => [\*(Aqbar\*(Aq, \*(Aqbaz\*(Aq], bar => 23);
\&  $params = $params\->append(Mojo::Parameters\->new);
.Ve
.PP
Append parameters. Note that this method will normalize the parameters.
.PP
.Vb 2
\&  # "foo=bar&foo=baz"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar\*(Aq)\->append(Mojo::Parameters\->new(\*(Aqfoo=baz\*(Aq));
\&
\&  # "foo=bar&foo=baz"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar\*(Aq)\->append(foo => \*(Aqbaz\*(Aq);
\&
\&  # "foo=bar&foo=baz&foo=yada"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar\*(Aq)\->append(foo => [\*(Aqbaz\*(Aq, \*(Aqyada\*(Aq]);
\&
\&  # "foo=bar&foo=baz&foo=yada&bar=23"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar\*(Aq)\->append(foo => [\*(Aqbaz\*(Aq, \*(Aqyada\*(Aq], bar => 23);
.Ve
.SS "clone"
.IX Subsection "clone"
.Vb 1
\&  my $params2 = $params\->clone;
.Ve
.PP
Clone parameters.
.SS "every_param"
.IX Subsection "every_param"
.Vb 1
\&  my $values = $params\->every_param(\*(Aqfoo\*(Aq);
.Ve
.PP
Similar to \*(L"param\*(R", but returns all values sharing the same name as an
array reference. Note that this method will normalize the parameters.
.PP
.Vb 2
\&  # Get first value
\&  say $params\->every_param(\*(Aqfoo\*(Aq)\->[0];
.Ve
.SS "merge"
.IX Subsection "merge"
.Vb 4
\&  $params = $params\->merge(foo => \*(Aqba&r\*(Aq);
\&  $params = $params\->merge(foo => [\*(Aqba&r\*(Aq, \*(Aqbaz\*(Aq]);
\&  $params = $params\->merge(foo => [\*(Aqbar\*(Aq, \*(Aqbaz\*(Aq], bar => 23);
\&  $params = $params\->merge(Mojo::Parameters\->new);
.Ve
.PP
Merge parameters. Note that this method will normalize the parameters.
.PP
.Vb 2
\&  # "foo=baz"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar\*(Aq)\->merge(Mojo::Parameters\->new(\*(Aqfoo=baz\*(Aq));
\&
\&  # "yada=yada&foo=baz"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar&yada=yada\*(Aq)\->merge(foo => \*(Aqbaz\*(Aq);
\&
\&  # "yada=yada"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar&yada=yada\*(Aq)\->merge(foo => undef);
.Ve
.SS "names"
.IX Subsection "names"
.Vb 1
\&  my $names = $params\->names;
.Ve
.PP
Return an array reference with all parameter names.
.PP
.Vb 2
\&  # Names of all parameters
\&  say for @{$params\->names};
.Ve
.SS "new"
.IX Subsection "new"
.Vb 5
\&  my $params = Mojo::Parameters\->new;
\&  my $params = Mojo::Parameters\->new(\*(Aqfoo=b%3Bar&baz=23\*(Aq);
\&  my $params = Mojo::Parameters\->new(foo => \*(Aqb&ar\*(Aq);
\&  my $params = Mojo::Parameters\->new(foo => [\*(Aqba&r\*(Aq, \*(Aqbaz\*(Aq]);
\&  my $params = Mojo::Parameters\->new(foo => [\*(Aqbar\*(Aq, \*(Aqbaz\*(Aq], bar => 23);
.Ve
.PP
Construct a new Mojo::Parameters object and \*(L"parse\*(R" parameters if
necessary.
.SS "pairs"
.IX Subsection "pairs"
.Vb 2
\&  my $array = $params\->pairs;
\&  $params   = $params\->pairs([foo => \*(Aqb&ar\*(Aq, baz => 23]);
.Ve
.PP
Parsed parameter pairs. Note that this method will normalize the parameters.
.PP
.Vb 2
\&  # Remove all parameters
\&  $params\->pairs([]);
.Ve
.SS "param"
.IX Subsection "param"
.Vb 4
\&  my $value = $params\->param(\*(Aqfoo\*(Aq);
\&  $params   = $params\->param(foo => \*(Aqba&r\*(Aq);
\&  $params   = $params\->param(foo => qw(ba&r baz));
\&  $params   = $params\->param(foo => [\*(Aqba;r\*(Aq, \*(Aqbaz\*(Aq]);
.Ve
.PP
Access parameter values. If there are multiple values sharing the same name,
and you want to access more than just the last one, you can use
\&\*(L"every_param\*(R". Note that this method will normalize the parameters.
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&  $params = $params\->parse(\*(Aqfoo=b%3Bar&baz=23\*(Aq);
.Ve
.PP
Parse parameters.
.SS "remove"
.IX Subsection "remove"
.Vb 1
\&  $params = $params\->remove(\*(Aqfoo\*(Aq);
.Ve
.PP
Remove parameters. Note that this method will normalize the parameters.
.PP
.Vb 2
\&  # "bar=yada"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar&foo=baz&bar=yada\*(Aq)\->remove(\*(Aqfoo\*(Aq);
.Ve
.SS "to_hash"
.IX Subsection "to_hash"
.Vb 1
\&  my $hash = $params\->to_hash;
.Ve
.PP
Turn parameters into a hash reference. Note that this method will normalize the
parameters.
.PP
.Vb 2
\&  # "baz"
\&  Mojo::Parameters\->new(\*(Aqfoo=bar&foo=baz\*(Aq)\->to_hash\->{foo}[1];
.Ve
.SS "to_string"
.IX Subsection "to_string"
.Vb 1
\&  my $str = $params\->to_string;
.Ve
.PP
Turn parameters into a string.
.PP
.Vb 2
\&  # "foo=bar&baz=23"
\&  Mojo::Parameters\->new\->pairs([foo => \*(Aqbar\*(Aq, baz => 23])\->to_string;
.Ve
.SH "OPERATORS"
.IX Header "OPERATORS"
Mojo::Parameters overloads the following operators.
.SS "array"
.IX Subsection "array"
.Vb 1
\&  my @pairs = @$params;
.Ve
.PP
Alias for \*(L"pairs\*(R". Note that this will normalize the parameters.
.PP
.Vb 2
\&  say $params\->[0];
\&  say for @$params;
.Ve
.SS "bool"
.IX Subsection "bool"
.Vb 1
\&  my $bool = !!$params;
.Ve
.PP
Always true.
.SS "stringify"
.IX Subsection "stringify"
.Vb 1
\&  my $str = "$params";
.Ve
.PP
Alias for \*(L"to_string\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
