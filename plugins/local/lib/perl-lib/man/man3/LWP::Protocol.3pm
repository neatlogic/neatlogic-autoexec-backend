.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::Protocol 3"
.TH LWP::Protocol 3 "2021-07-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::Protocol \- Base class for LWP protocols
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& package LWP::Protocol::foo;
\& require LWP::Protocol;
\& @ISA=qw(LWP::Protocol);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used as the base class for all protocol implementations
supported by the \s-1LWP\s0 library.
.PP
When creating an instance of this class using
\&\f(CW\*(C`LWP::Protocol::create($url)\*(C'\fR, and you get an initialized subclass
appropriate for that access method. In other words, the
\&\fILWP::Protocol::create()\fR function calls the constructor for one of its
subclasses.
.PP
All derived \f(CW\*(C`LWP::Protocol\*(C'\fR classes need to override the \fIrequest()\fR
method which is used to service a request. The overridden method can
make use of the \fIcollect()\fR function to collect together chunks of data
as it is received.
.PP
The following methods and functions are provided:
.ie n .IP "$prot = LWP::Protocol\->\fInew()\fR" 4
.el .IP "\f(CW$prot\fR = LWP::Protocol\->\fInew()\fR" 4
.IX Item "$prot = LWP::Protocol->new()"
The LWP::Protocol constructor is inherited by subclasses. As this is a
virtual base class this method should \fBnot\fR be called directly.
.ie n .IP "$prot = LWP::Protocol::create($scheme)" 4
.el .IP "\f(CW$prot\fR = LWP::Protocol::create($scheme)" 4
.IX Item "$prot = LWP::Protocol::create($scheme)"
Create an object of the class implementing the protocol to handle the
given scheme. This is a function, not a method. It is more an object
factory than a constructor. This is the function user agents should
use to access protocols.
.ie n .IP "$class = LWP::Protocol::implementor($scheme, [$class])" 4
.el .IP "\f(CW$class\fR = LWP::Protocol::implementor($scheme, [$class])" 4
.IX Item "$class = LWP::Protocol::implementor($scheme, [$class])"
Get and/or set implementor class for a scheme.  Returns '' if the
specified scheme is not supported.
.ie n .IP "$prot\->request(...)" 4
.el .IP "\f(CW$prot\fR\->request(...)" 4
.IX Item "$prot->request(...)"
.Vb 3
\& $response = $protocol\->request($request, $proxy, undef);
\& $response = $protocol\->request($request, $proxy, \*(Aq/tmp/sss\*(Aq);
\& $response = $protocol\->request($request, $proxy, \e&callback, 1024);
.Ve
.Sp
Dispatches a request over the protocol, and returns a response
object. This method needs to be overridden in subclasses.  Refer to
LWP::UserAgent for description of the arguments.
.ie n .IP "$prot\->collect($arg, $response, $collector)" 4
.el .IP "\f(CW$prot\fR\->collect($arg, \f(CW$response\fR, \f(CW$collector\fR)" 4
.IX Item "$prot->collect($arg, $response, $collector)"
Called to collect the content of a request, and process it
appropriately into a scalar, file, or by calling a callback.  If \f(CW$arg\fR
is undefined, then the content is stored within the \f(CW$response\fR.  If
\&\f(CW$arg\fR is a simple scalar, then \f(CW$arg\fR is interpreted as a file name and
the content is written to this file.  If \f(CW$arg\fR is a reference to a
routine, then content is passed to this routine.
.Sp
The \f(CW$collector\fR is a routine that will be called and which is
responsible for returning pieces (as ref to scalar) of the content to
process.  The \f(CW$collector\fR signals \s-1EOF\s0 by returning a reference to an
empty string.
.Sp
The return value from \fIcollect()\fR is the \f(CW$response\fR object reference.
.Sp
\&\fBNote:\fR We will only use the callback or file argument if
\&\f(CW$response\fR\->\fIis_success()\fR.  This avoids sending content data for
redirects and authentication responses to the callback which would be
confusing.
.ie n .IP "$prot\->collect_once($arg, $response, $content)" 4
.el .IP "\f(CW$prot\fR\->collect_once($arg, \f(CW$response\fR, \f(CW$content\fR)" 4
.IX Item "$prot->collect_once($arg, $response, $content)"
Can be called when the whole response content is available as
\&\f(CW$content\fR.  This will invoke \fIcollect()\fR with a collector callback that
returns a reference to \f(CW$content\fR the first time and an empty string the
next.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Inspect the \fILWP/Protocol/file.pm\fR and \fILWP/Protocol/http.pm\fR files
for examples of usage.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-2001 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
