.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SOAP::Schema 3"
.TH SOAP::Schema 3 "2019-10-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SOAP::Schema \- provides an umbrella for the way in which SOAP::Lite manages service description schemas
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides an umbrella for the way in which SOAP::Lite manages service description schemas. Currently, the only support present is for the Web Services Description Language (\s-1WSDL\s0). This is another of the classes not generally designed to be directly instantiated by an application, though it can be if so desired.
.SH "METHODS"
.IX Header "METHODS"
.IP "new(optional key/value pairs)" 4
.IX Item "new(optional key/value pairs)"
.Vb 1
\&    $schema = SOAP::Schema\->new(parse => $schema_uri);
.Ve
.Sp
This is the class constructor. With no arguments, it creates a blank object of the class. Any arguments that are passed are treated as key/value pairs in which the key represents one of the methods described here, and the value is what gets passed when the method itself gets invoked.
.IP "parse(service description \s-1URI\s0)" 4
.IX Item "parse(service description URI)"
.Vb 1
\&    $schema\->parse(\*(Aqhttp://schemas.w3.org/soap.wsdl\*(Aq);
.Ve
.Sp
Parses the internal representation of the service description prior to the generation of stub routines to provide method-like access to the remote services.
.IP "access(service description \s-1URI\s0)" 4
.IX Item "access(service description URI)"
.Vb 1
\&    $schema\->access(\*(Aqhttp://soap.org/service.wsdl\*(Aq);
.Ve
.Sp
Loads the specified service description from the given \s-1URL,\s0 using the current value of the schema accessor if none is provided. The full content of the \s-1URL\s0 is returned on success, or an exception is thrown (via \f(CW\*(C`die\*(C'\fR) on error.
.IP "load" 4
.IX Item "load"
.Vb 1
\&    $schema\->load;
.Ve
.Sp
Takes the internal representation of the service and generates code stubs for the remote methods, allowing them to be called as local object methods. Stubs are generated for all the functions declared in the \s-1WSDL\s0 description with this call because it's enough of a class framework to allow for basic object creation for use as handles.
.IP "schema" 4
.IX Item "schema"
.Vb 1
\&    $current_schema = $schema\->schema;
.Ve
.Sp
Gets (or sets) the current schema representation to be used by this object. The value to be passed when setting this is just the \s-1URI\s0 of the schema. This gets passed to other methods such as access for loading the actual content.
.IP "services" 4
.IX Item "services"
.Vb 1
\&    $hashref = $schema\->services;
.Ve
.Sp
Gets or sets the services currently stored on the object. The services are kept as a hash reference, whose keys and values are the list of returned values from the \s-1WSDL\s0 parser. Keys represent the names of the services themselves (names have been normalized into Perl-compatible identifiers), with values that are also hash references to the internal representation of the service itself.
.IP "stub" 4
.IX Item "stub"
Returns the autogenerated Perl code as a string. This code is generated from the \s-1WSDL\s0 provided by the \f(CW\*(C`service\*(C'\fR method call. The code contains a package definition for the service being called.
.Sp
.Vb 5
\&    my $client = SOAP::Lite\->new;
\&    my $code = $client\->service($WSDL_URL)\->stub;
\&    open FILE,">ServicePackage.pm";
\&    print FILE $code;
\&    close FILE;
.Ve
.IP "cache_dir" 4
.IX Item "cache_dir"
Sets/retrieves the value of the directory where generated stubs will be cached. If \f(CW\*(C`cache_dir\*(C'\fR is null, then no caching will be performed.
.Sp
.Vb 2
\&    my $client = SOAP::Lite\->new;
\&    my $code = $client\->cache_dir("/tmp")\->service($WSDL_URL)\->stub;
.Ve
.Sp
If \f(CW\*(C`cache_dir\*(C'\fR is undefined, no caching will take place.
.IP "cache_ttl" 4
.IX Item "cache_ttl"
Sets/retrieves the value of the time to live (in seconds) for cached files. This is only relevant when used in conjunction with \f(CW\*(C`cache_dir\*(C'\fR.
.Sp
If \f(CW\*(C`cache_ttl\*(C'\fR is set to 0, the cache will never expire. Files will have to be removed manually in order for the cache to be refreshed.
.Sp
.Vb 2
\&    my $client = SOAP::Lite\->new;
\&    my $code = $client\->cache_ttl(3600)\->cache_dir("/tmp")\->service($WSDL_URL)\->stub;
.Ve
.Sp
The default time to live is 0.
.IP "useragent(LWP::UserAgent)" 4
.IX Item "useragent(LWP::UserAgent)"
.Vb 5
\&    my $client = SOAP::Lite\->new;
\&    $ua = $client\->schema\->useragent;
\&    $ua\->agent("Fubar! 0.1");
\&    my $response = $client\->service("http://localhost/some.wsdl")
\&                          \->someMethod("Foo");
.Ve
.Sp
Gets or sets the classes UserAgent used for retrieving schemas over the web.
This allows users to have direct access to the UserAgent so that they may control
the credentials passed to a remote server, or the specific configuration of their
\&\s-1HTTP\s0 agent.
.SH "SOAP::Schema::WSDL"
.IX Header "SOAP::Schema::WSDL"
At present, the SOAP::Lite toolkit supports only loading of service descriptions in the \s-1WSDL\s0 syntax. This class manages the parsing and storing of these service specifications. As a general rule, this class should be even less likely to be used directly by an application because its presence should be completely abstracted by the previous class (SOAP::Schema). None of the methods are defined here; the class is only mentioned for sake of reference.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Special thanks to O'Reilly publishing which has graciously allowed SOAP::Lite to republish and redistribute large excerpts from \fIProgramming Web Services with Perl\fR, mainly the SOAP::Lite reference found in Appendix B.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2004 Paul Kulchenko. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Paul Kulchenko (paulclinger@yahoo.com)
.PP
Randy J. Ray (rjray@blackperl.com)
.PP
Byrne Reese (byrne@majordojo.com)
