.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::UserAgent::CookieJar 3"
.TH Mojo::UserAgent::CookieJar 3 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::UserAgent::CookieJar \- Cookie jar for HTTP user agents
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::UserAgent::CookieJar;
\&
\&  # Add response cookies
\&  my $jar = Mojo::UserAgent::CookieJar\->new;
\&  $jar\->add(
\&    Mojo::Cookie::Response\->new(
\&      name   => \*(Aqfoo\*(Aq,
\&      value  => \*(Aqbar\*(Aq,
\&      domain => \*(Aqlocalhost\*(Aq,
\&      path   => \*(Aq/test\*(Aq
\&    )
\&  );
\&
\&  # Find request cookies
\&  for my $cookie (@{$jar\->find(Mojo::URL\->new(\*(Aqhttp://localhost/test\*(Aq))}) {
\&    say $cookie\->name;
\&    say $cookie\->value;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::UserAgent::CookieJar is a minimalistic and relaxed cookie jar used by
Mojo::UserAgent, based on \s-1RFC 6265\s0 <http://tools.ietf.org/html/rfc6265>.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::UserAgent::CookieJar implements the following attributes.
.SS "ignore"
.IX Subsection "ignore"
.Vb 2
\&  my $ignore = $jar\->ignore;
\&  $jar       = $jar\->ignore(sub {...});
.Ve
.PP
A callback used to decide if a cookie should be ignored by \*(L"collect\*(R".
.PP
.Vb 2
\&  # Ignore all cookies
\&  $jar\->ignore(sub { 1 });
\&
\&  # Ignore cookies for domains "com", "net" and "org"
\&  $jar\->ignore(sub {
\&    my $cookie = shift;
\&    return undef unless my $domain = $cookie\->domain;
\&    return $domain eq \*(Aqcom\*(Aq || $domain eq \*(Aqnet\*(Aq || $domain eq \*(Aqorg\*(Aq;
\&  });
.Ve
.SS "max_cookie_size"
.IX Subsection "max_cookie_size"
.Vb 2
\&  my $size = $jar\->max_cookie_size;
\&  $jar     = $jar\->max_cookie_size(4096);
.Ve
.PP
Maximum cookie size in bytes, defaults to \f(CW4096\fR (4KB).
.SH "METHODS"
.IX Header "METHODS"
Mojo::UserAgent::CookieJar inherits all methods from Mojo::Base and
implements the following new ones.
.SS "add"
.IX Subsection "add"
.Vb 1
\&  $jar = $jar\->add(@cookies);
.Ve
.PP
Add multiple Mojo::Cookie::Response objects to the jar.
.SS "all"
.IX Subsection "all"
.Vb 1
\&  my $cookies = $jar\->all;
.Ve
.PP
Return all Mojo::Cookie::Response objects that are currently stored in the
jar.
.PP
.Vb 2
\&  # Names of all cookies
\&  say $_\->name for @{$jar\->all};
.Ve
.SS "collect"
.IX Subsection "collect"
.Vb 1
\&  $jar\->collect(Mojo::Transaction::HTTP\->new);
.Ve
.PP
Collect response cookies from transaction.
.SS "empty"
.IX Subsection "empty"
.Vb 1
\&  $jar\->empty;
.Ve
.PP
Empty the jar.
.SS "find"
.IX Subsection "find"
.Vb 1
\&  my $cookies = $jar\->find(Mojo::URL\->new);
.Ve
.PP
Find Mojo::Cookie::Request objects in the jar for Mojo::URL object.
.PP
.Vb 2
\&  # Names of all cookies found
\&  say $_\->name for @{$jar\->find(Mojo::URL\->new(\*(Aqhttp://example.com/foo\*(Aq))};
.Ve
.SS "prepare"
.IX Subsection "prepare"
.Vb 1
\&  $jar\->prepare(Mojo::Transaction::HTTP\->new);
.Ve
.PP
Prepare request cookies for transaction.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
