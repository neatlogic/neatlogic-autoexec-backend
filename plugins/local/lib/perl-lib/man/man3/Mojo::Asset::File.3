.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Asset::File 3"
.TH Mojo::Asset::File 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Asset::File \- File storage for HTTP content
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Asset::File;
\&
\&  # Temporary file
\&  my $file = Mojo::Asset::File\->new;
\&  $file\->add_chunk(\*(Aqfoo bar baz\*(Aq);
\&  say \*(AqFile contains "bar"\*(Aq if $file\->contains(\*(Aqbar\*(Aq) >= 0;
\&  say $file\->slurp;
\&
\&  # Existing file
\&  my $file = Mojo::Asset::File\->new(path => \*(Aq/home/sri/foo.txt\*(Aq);
\&  $file\->move_to(\*(Aq/yada.txt\*(Aq);
\&  say $file\->slurp;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Asset::File is a file storage backend for \s-1HTTP\s0 content.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::Asset::File inherits all events from Mojo::Asset.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Asset::File inherits all attributes from Mojo::Asset and implements
the following new ones.
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 2
\&  my $bool = $file\->cleanup;
\&  $file    = $file\->cleanup($bool);
.Ve
.PP
Delete \*(L"path\*(R" automatically once the file is not used anymore.
.SS "handle"
.IX Subsection "handle"
.Vb 2
\&  my $handle = $file\->handle;
\&  $file      = $file\->handle(IO::File\->new);
.Ve
.PP
Filehandle, created on demand for \*(L"path\*(R", which can be generated
automatically and safely based on \*(L"tmpdir\*(R".
.SS "path"
.IX Subsection "path"
.Vb 2
\&  my $path = $file\->path;
\&  $file    = $file\->path(\*(Aq/home/sri/foo.txt\*(Aq);
.Ve
.PP
File path used to create \*(L"handle\*(R".
.SS "tmpdir"
.IX Subsection "tmpdir"
.Vb 2
\&  my $tmpdir = $file\->tmpdir;
\&  $file      = $file\->tmpdir(\*(Aq/tmp\*(Aq);
.Ve
.PP
Temporary directory used to generate \*(L"path\*(R", defaults to the value of the
\&\f(CW\*(C`MOJO_TMPDIR\*(C'\fR environment variable or auto-detection.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Asset::File inherits all methods from Mojo::Asset and implements
the following new ones.
.SS "add_chunk"
.IX Subsection "add_chunk"
.Vb 1
\&  $file = $file\->add_chunk(\*(Aqfoo bar baz\*(Aq);
.Ve
.PP
Add chunk of data.
.SS "contains"
.IX Subsection "contains"
.Vb 1
\&  my $position = $file\->contains(\*(Aqbar\*(Aq);
.Ve
.PP
Check if asset contains a specific string.
.SS "get_chunk"
.IX Subsection "get_chunk"
.Vb 2
\&  my $bytes = $file\->get_chunk($offset);
\&  my $bytes = $file\->get_chunk($offset, $max);
.Ve
.PP
Get chunk of data starting from a specific position, defaults to a maximum
chunk size of \f(CW131072\fR bytes (128KB).
.SS "is_file"
.IX Subsection "is_file"
.Vb 1
\&  my $bool = $file\->is_file;
.Ve
.PP
True, this is a Mojo::Asset::File object.
.SS "move_to"
.IX Subsection "move_to"
.Vb 1
\&  $file = $file\->move_to(\*(Aq/home/sri/bar.txt\*(Aq);
.Ve
.PP
Move asset data into a specific file and disable \*(L"cleanup\*(R".
.SS "mtime"
.IX Subsection "mtime"
.Vb 1
\&  my $mtime = $file\->mtime;
.Ve
.PP
Modification time of asset.
.SS "size"
.IX Subsection "size"
.Vb 1
\&  my $size = $file\->size;
.Ve
.PP
Size of asset data in bytes.
.SS "slurp"
.IX Subsection "slurp"
.Vb 1
\&  my $bytes = $file\->slurp;
.Ve
.PP
Read all asset data at once.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
