.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Server 3"
.TH Mojo::Server 3 "2021-07-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Server \- HTTP/WebSocket server base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Mojo::Server::MyServer;
\&  use Mojo::Base \*(AqMojo::Server\*(Aq;
\&
\&  sub run {
\&    my $self = shift;
\&
\&    # Get a transaction
\&    my $tx = $self\->build_tx;
\&
\&    # Emit "request" event
\&    $self\->emit(request => $tx);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Server is an abstract base class for HTTP/WebSocket servers and server
interfaces, like Mojo::Server::CGI, Mojo::Server::Daemon,
Mojo::Server::Hypnotoad, Mojo::Server::Morbo, Mojo::Server::Prefork
and Mojo::Server::PSGI.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::Server inherits all events from Mojo::EventEmitter and can emit the
following new ones.
.SS "request"
.IX Subsection "request"
.Vb 4
\&  $server\->on(request => sub {
\&    my ($server, $tx) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted when a request is ready and needs to be handled.
.PP
.Vb 7
\&  $server\->unsubscribe(\*(Aqrequest\*(Aq)\->on(request => sub {
\&    my ($server, $tx) = @_;
\&    $tx\->res\->code(200);
\&    $tx\->res\->headers\->content_type(\*(Aqtext/plain\*(Aq);
\&    $tx\->res\->body(\*(AqHello World!\*(Aq);
\&    $tx\->resume;
\&  });
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Server implements the following attributes.
.SS "app"
.IX Subsection "app"
.Vb 2
\&  my $app = $server\->app;
\&  $server = $server\->app(MojoSubclass\->new);
.Ve
.PP
Application this server handles, defaults to a Mojo::HelloWorld object.
.SS "reverse_proxy"
.IX Subsection "reverse_proxy"
.Vb 2
\&  my $bool = $server\->reverse_proxy;
\&  $server  = $server\->reverse_proxy($bool);
.Ve
.PP
This server operates behind a reverse proxy, defaults to the value of the
\&\f(CW\*(C`MOJO_REVERSE_PROXY\*(C'\fR environment variable.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Server inherits all methods from Mojo::EventEmitter and implements
the following new ones.
.SS "build_app"
.IX Subsection "build_app"
.Vb 1
\&  my $app = $server\->build_app(\*(AqMyApp\*(Aq);
.Ve
.PP
Build application from class and assign it to \*(L"app\*(R".
.SS "build_tx"
.IX Subsection "build_tx"
.Vb 1
\&  my $tx = $server\->build_tx;
.Ve
.PP
Let application build a transaction.
.SS "daemonize"
.IX Subsection "daemonize"
.Vb 1
\&  $server\->daemonize;
.Ve
.PP
Daemonize server process.
.SS "load_app"
.IX Subsection "load_app"
.Vb 1
\&  my $app = $server\->load_app(\*(Aq/home/sri/myapp.pl\*(Aq);
.Ve
.PP
Load application from script and assign it to \*(L"app\*(R".
.PP
.Vb 1
\&  say Mojo::Server\->new\->load_app(\*(Aq./myapp.pl\*(Aq)\->home;
.Ve
.SS "new"
.IX Subsection "new"
.Vb 3
\&  my $server = Mojo::Server\->new;
\&  my $server = Mojo::Server\->new(reverse_proxy => 1);
\&  my $server = Mojo::Server\->new({reverse_proxy => 1});
.Ve
.PP
Construct a new Mojo::Server object and subscribe to \*(L"request\*(R" event
with default request handling.
.SS "run"
.IX Subsection "run"
.Vb 1
\&  $server\->run;
.Ve
.PP
Run server. Meant to be overloaded in a subclass.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
