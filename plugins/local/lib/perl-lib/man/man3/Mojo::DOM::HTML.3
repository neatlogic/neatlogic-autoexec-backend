.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::DOM::HTML 3"
.TH Mojo::DOM::HTML 3 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::DOM::HTML \- HTML/XML engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::DOM::HTML;
\&
\&  # Turn HTML into DOM tree
\&  my $html = Mojo::DOM::HTML\->new;
\&  $html\->parse(\*(Aq<div><p id="a">Test</p><p id="b">123</p></div>\*(Aq);
\&  my $tree = $html\->tree;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::DOM::HTML is the \s-1HTML/XML\s0 engine used by Mojo::DOM, based on the
\&\s-1HTML\s0 Living Standard <https://html.spec.whatwg.org> and the
Extensible Markup Language (\s-1XML\s0) 1.0 <http://www.w3.org/TR/xml/>.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::DOM::HTML implements the following attributes.
.SS "tree"
.IX Subsection "tree"
.Vb 2
\&  my $tree = $html\->tree;
\&  $html    = $html\->tree([\*(Aqroot\*(Aq]);
.Ve
.PP
Document Object Model. Note that this structure should only be used very
carefully since it is very dynamic.
.SS "xml"
.IX Subsection "xml"
.Vb 2
\&  my $bool = $html\->xml;
\&  $html    = $html\->xml($bool);
.Ve
.PP
Disable \s-1HTML\s0 semantics in parser and activate case-sensitivity, defaults to
auto-detection based on \s-1XML\s0 declarations.
.SH "METHODS"
.IX Header "METHODS"
Mojo::DOM::HTML inherits all methods from Mojo::Base and implements the
following new ones.
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&  $html = $html\->parse(\*(Aq<foo bar="baz">I â™¥ Mojolicious!</foo>\*(Aq);
.Ve
.PP
Parse \s-1HTML/XML\s0 fragment.
.SS "render"
.IX Subsection "render"
.Vb 1
\&  my $str = $html\->render;
.Ve
.PP
Render \s-1DOM\s0 to \s-1HTML/XML.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
