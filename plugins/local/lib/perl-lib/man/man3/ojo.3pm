.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ojo 3"
.TH ojo 3 "2021-07-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ojo \- Fun one\-liners with Mojo
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqsay g("mojolicious.org")\->dom\->at("title")\->text\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A collection of automatically exported functions for fun Perl one-liners. Ten
redirects will be followed by default, you can change this behavior with the
\&\f(CW\*(C`MOJO_MAX_REDIRECTS\*(C'\fR environment variable.
.PP
.Vb 1
\&  $ MOJO_MAX_REDIRECTS=0 perl \-Mojo \-E \*(Aqsay g("example.com")\->code\*(Aq
.Ve
.PP
Proxy detection is enabled by default, but you can disable it with the
\&\f(CW\*(C`MOJO_PROXY\*(C'\fR environment variable.
.PP
.Vb 1
\&  $ MOJO_PROXY=0 perl \-Mojo \-E \*(Aqsay g("example.com")\->body\*(Aq
.Ve
.PP
Every ojo one-liner is also a Mojolicious::Lite application.
.PP
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqget "/" => {inline => "%= time"}; app\->start\*(Aq get /
.Ve
.PP
If it is not already defined, the \f(CW\*(C`MOJO_LOG_LEVEL\*(C'\fR environment variable will
be set to \f(CW\*(C`fatal\*(C'\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
ojo implements the following functions, which are automatically exported.
.SS "a"
.IX Subsection "a"
.Vb 1
\&  my $app = a(\*(Aq/hello\*(Aq => sub { $_\->render(json => {hello => \*(Aqworld\*(Aq}) });
.Ve
.PP
Create a route with \*(L"any\*(R" in Mojolicious::Lite and return the current
Mojolicious::Lite object. The current controller object is also available to
actions as \f(CW$_\fR. See also Mojolicious::Guides::Tutorial for more argument
variations.
.PP
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqa("/hello" => {text => "Hello Mojo!"})\->start\*(Aq daemon
.Ve
.SS "b"
.IX Subsection "b"
.Vb 1
\&  my $stream = b(\*(Aqlalala\*(Aq);
.Ve
.PP
Turn string into a Mojo::ByteStream object.
.PP
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqb(g("mojolicious.org")\->body)\->html_unescape\->say\*(Aq
.Ve
.SS "c"
.IX Subsection "c"
.Vb 1
\&  my $collection = c(1, 2, 3);
.Ve
.PP
Turn list into a Mojo::Collection object.
.SS "d"
.IX Subsection "d"
.Vb 4
\&  my $res = d(\*(Aqexample.com\*(Aq);
\&  my $res = d(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $res = d(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $res = d(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Perform \f(CW\*(C`DELETE\*(C'\fR request with \*(L"delete\*(R" in Mojo::UserAgent and return resulting
Mojo::Message::Response object.
.SS "g"
.IX Subsection "g"
.Vb 4
\&  my $res = g(\*(Aqexample.com\*(Aq);
\&  my $res = g(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $res = g(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $res = g(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Perform \f(CW\*(C`GET\*(C'\fR request with \*(L"get\*(R" in Mojo::UserAgent and return resulting
Mojo::Message::Response object.
.PP
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqsay g("mojolicious.org")\->dom("h1")\->map("text")\->join("\en")\*(Aq
.Ve
.SS "h"
.IX Subsection "h"
.Vb 4
\&  my $res = h(\*(Aqexample.com\*(Aq);
\&  my $res = h(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $res = h(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $res = h(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Perform \f(CW\*(C`HEAD\*(C'\fR request with \*(L"head\*(R" in Mojo::UserAgent and return resulting
Mojo::Message::Response object.
.SS "j"
.IX Subsection "j"
.Vb 3
\&  my $bytes = j([1, 2, 3]);
\&  my $bytes = j({foo => \*(Aqbar\*(Aq});
\&  my $value = j($bytes);
.Ve
.PP
Encode Perl data structure or decode \s-1JSON\s0 with \*(L"j\*(R" in Mojo::JSON.
.PP
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqb(j({hello => "world!"}))\->spurt("hello.json")\*(Aq
.Ve
.SS "n"
.IX Subsection "n"
.Vb 2
\&  n {...};
\&  n {...} 100;
.Ve
.PP
Benchmark block and print the results to \f(CW\*(C`STDERR\*(C'\fR, with an optional number of
iterations, which defaults to \f(CW1\fR.
.PP
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqn { say g("mojolicious.org")\->code }\*(Aq
.Ve
.SS "o"
.IX Subsection "o"
.Vb 4
\&  my $res = o(\*(Aqexample.com\*(Aq);
\&  my $res = o(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $res = o(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $res = o(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Perform \f(CW\*(C`OPTIONS\*(C'\fR request with \*(L"options\*(R" in Mojo::UserAgent and return
resulting Mojo::Message::Response object.
.SS "p"
.IX Subsection "p"
.Vb 4
\&  my $res = p(\*(Aqexample.com\*(Aq);
\&  my $res = p(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $res = p(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $res = p(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Perform \f(CW\*(C`POST\*(C'\fR request with \*(L"post\*(R" in Mojo::UserAgent and return resulting
Mojo::Message::Response object.
.SS "r"
.IX Subsection "r"
.Vb 1
\&  my $perl = r({data => \*(Aqstructure\*(Aq});
.Ve
.PP
Dump a Perl data structure with \*(L"dumper\*(R" in Mojo::Util.
.PP
.Vb 1
\&  perl \-Mojo \-E \*(Aqsay r(g("example.com")\->headers\->to_hash)\*(Aq
.Ve
.SS "t"
.IX Subsection "t"
.Vb 4
\&  my $res = t(\*(Aqexample.com\*(Aq);
\&  my $res = t(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $res = t(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $res = t(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Perform \f(CW\*(C`PATCH\*(C'\fR request with \*(L"patch\*(R" in Mojo::UserAgent and return resulting
Mojo::Message::Response object.
.SS "u"
.IX Subsection "u"
.Vb 4
\&  my $res = u(\*(Aqexample.com\*(Aq);
\&  my $res = u(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
\&  my $res = u(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => form => {a => \*(Aqb\*(Aq});
\&  my $res = u(\*(Aqhttp://example.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => json => {a => \*(Aqb\*(Aq});
.Ve
.PP
Perform \f(CW\*(C`PUT\*(C'\fR request with \*(L"put\*(R" in Mojo::UserAgent and return resulting
Mojo::Message::Response object.
.SS "x"
.IX Subsection "x"
.Vb 1
\&  my $dom = x(\*(Aq<div>Hello!</div>\*(Aq);
.Ve
.PP
Turn \s-1HTML/XML\s0 input into Mojo::DOM object.
.PP
.Vb 1
\&  $ perl \-Mojo \-E \*(Aqsay x(b("test.html")\->slurp)\->at("title")\->text\*(Aq
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
