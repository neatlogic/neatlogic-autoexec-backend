.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MD5 3"
.TH MD5 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MD5 \- Perl interface to the MD5 Message\-Digest Algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use MD5;
\&
\& $context = new MD5;
\& $context\->reset();
\&
\& $context\->add(LIST);
\& $context\->addfile(HANDLE);
\&
\& $digest = $context\->digest();
\& $string = $context\->hexdigest();
\&
\& $digest = MD5\->hash(SCALAR);
\& $string = MD5\->hexhash(SCALAR);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`MD5\*(C'\fR module is \fBdepreciated\fR.  Use \f(CW\*(C`Digest::MD5\*(C'\fR instead.
.PP
The current \f(CW\*(C`MD5\*(C'\fR module is just a wrapper around the \f(CW\*(C`Digest::MD5\*(C'\fR
module.  It is provided so that legacy code that rely on the old
interface still work and get the speed benefit of the new module.
.PP
In addition to the methods provided for \f(CW\*(C`Digest::MD5\*(C'\fR objects, this
module provide the class methods \s-1MD5\-\s0>\fBhash()\fR and \s-1MD5\-\s0>\fBhexhash()\fR that
do the same as the \fBmd5()\fR and \fBmd5_hex()\fR functions provided by
\&\f(CW\*(C`Digest::MD5\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Digest::MD5
