.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Routes 3"
.TH Mojolicious::Routes 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Routes \- Always find your destination with routes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Routes;
\&
\&  # Simple route
\&  my $r = Mojolicious::Routes\->new;
\&  $r\->route(\*(Aq/\*(Aq)\->to(controller => \*(Aqblog\*(Aq, action => \*(Aqwelcome\*(Aq);
\&
\&  # More advanced routes
\&  my $blog = $r\->under(\*(Aq/blog\*(Aq);
\&  $blog\->get(\*(Aq/list\*(Aq)\->to(\*(Aqblog#list\*(Aq);
\&  $blog\->get(\*(Aq/:id\*(Aq => [id => qr/\ed+/])\->to(\*(Aqblog#show\*(Aq, id => 23);
\&  $blog\->patch(sub { shift\->render(text => \*(AqGo away!\*(Aq, status => 405) });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Routes is the core of the Mojolicious web framework.
.PP
See Mojolicious::Guides::Routing for more.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Routes inherits all attributes from
Mojolicious::Routes::Route and implements the following new ones.
.SS "base_classes"
.IX Subsection "base_classes"
.Vb 2
\&  my $classes = $r\->base_classes;
\&  $r          = $r\->base_classes([\*(AqMyApp::Controller\*(Aq]);
.Ve
.PP
Base classes used to identify controllers, defaults to
Mojolicious::Controller and Mojo.
.SS "cache"
.IX Subsection "cache"
.Vb 2
\&  my $cache = $r\->cache;
\&  $r        = $r\->cache(Mojo::Cache\->new);
.Ve
.PP
Routing cache, defaults to a Mojo::Cache object.
.SS "conditions"
.IX Subsection "conditions"
.Vb 2
\&  my $conditions = $r\->conditions;
\&  $r             = $r\->conditions({foo => sub {...}});
.Ve
.PP
Contains all available conditions.
.SS "hidden"
.IX Subsection "hidden"
.Vb 2
\&  my $hidden = $r\->hidden;
\&  $r         = $r\->hidden([\*(Aqattr\*(Aq, \*(Aqhas\*(Aq, \*(Aqnew\*(Aq]);
.Ve
.PP
Controller attributes and methods that are hidden from router, defaults to
\&\f(CW\*(C`attr\*(C'\fR, \f(CW\*(C`has\*(C'\fR, \f(CW\*(C`new\*(C'\fR and \f(CW\*(C`tap\*(C'\fR.
.SS "namespaces"
.IX Subsection "namespaces"
.Vb 2
\&  my $namespaces = $r\->namespaces;
\&  $r             = $r\->namespaces([\*(AqMyApp::Controller\*(Aq, \*(AqMyApp\*(Aq]);
.Ve
.PP
Namespaces to load controllers from.
.PP
.Vb 2
\&  # Add another namespace to load controllers from
\&  push @{$r\->namespaces}, \*(AqMyApp::MyController\*(Aq;
.Ve
.SS "shortcuts"
.IX Subsection "shortcuts"
.Vb 2
\&  my $shortcuts = $r\->shortcuts;
\&  $r            = $r\->shortcuts({foo => sub {...}});
.Ve
.PP
Contains all available shortcuts.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Routes inherits all methods from Mojolicious::Routes::Route
and implements the following new ones.
.SS "add_condition"
.IX Subsection "add_condition"
.Vb 1
\&  $r = $r\->add_condition(foo => sub {...});
.Ve
.PP
Register a condition.
.PP
.Vb 5
\&  $r\->add_condition(foo => sub {
\&    my ($route, $c, $captures, $arg) = @_;
\&    ...
\&    return 1;
\&  });
.Ve
.SS "add_shortcut"
.IX Subsection "add_shortcut"
.Vb 1
\&  $r = $r\->add_shortcut(foo => sub {...});
.Ve
.PP
Register a shortcut.
.PP
.Vb 4
\&  $r\->add_shortcut(foo => sub {
\&    my ($route, @args) = @_;
\&    ...
\&  });
.Ve
.SS "continue"
.IX Subsection "continue"
.Vb 1
\&  $r\->continue(Mojolicious::Controller\->new);
.Ve
.PP
Continue dispatch chain and emit the hook \*(L"around_action\*(R" in Mojolicious for
every action.
.SS "dispatch"
.IX Subsection "dispatch"
.Vb 1
\&  my $bool = $r\->dispatch(Mojolicious::Controller\->new);
.Ve
.PP
Match routes with \*(L"match\*(R" and dispatch with \*(L"continue\*(R".
.SS "hide"
.IX Subsection "hide"
.Vb 1
\&  $r = $r\->hide(\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq);
.Ve
.PP
Hide controller attributes and methods from router.
.SS "is_hidden"
.IX Subsection "is_hidden"
.Vb 1
\&  my $bool = $r\->is_hidden(\*(Aqfoo\*(Aq);
.Ve
.PP
Check if controller attribute or method is hidden from router.
.SS "lookup"
.IX Subsection "lookup"
.Vb 1
\&  my $route = $r\->lookup(\*(Aqfoo\*(Aq);
.Ve
.PP
Find route by name with \*(L"find\*(R" in Mojolicious::Routes::Route and cache all
results for future lookups.
.SS "match"
.IX Subsection "match"
.Vb 1
\&  $r\->match(Mojolicious::Controller\->new);
.Ve
.PP
Match routes with Mojolicious::Routes::Match.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
