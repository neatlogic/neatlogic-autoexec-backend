.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::EventEmitter 3"
.TH Mojo::EventEmitter 3 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::EventEmitter \- Event emitter base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Cat;
\&  use Mojo::Base \*(AqMojo::EventEmitter\*(Aq;
\&
\&  # Emit events
\&  sub poke {
\&    my $self = shift;
\&    $self\->emit(roar => 3);
\&  }
\&
\&  package main;
\&
\&  # Subscribe to events
\&  my $tiger = Cat\->new;
\&  $tiger\->on(roar => sub {
\&    my ($tiger, $times) = @_;
\&    say \*(AqRAWR!\*(Aq for 1 .. $times;
\&  });
\&  $tiger\->poke;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::EventEmitter is a simple base class for event emitting objects.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::EventEmitter can emit the following events.
.SS "error"
.IX Subsection "error"
.Vb 4
\&  $e\->on(error => sub {
\&    my ($e, $err) = @_;
\&    ...
\&  });
.Ve
.PP
This is a special event for errors, it will not be emitted directly by this
class but is fatal if unhandled.
.PP
.Vb 4
\&  $e\->on(error => sub {
\&    my ($e, $err) = @_;
\&    say "This looks bad: $err";
\&  });
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojo::EventEmitter inherits all methods from Mojo::Base and implements
the following new ones.
.SS "catch"
.IX Subsection "catch"
.Vb 1
\&  $e = $e\->catch(sub {...});
.Ve
.PP
Subscribe to \*(L"error\*(R" event.
.PP
.Vb 2
\&  # Longer version
\&  $e\->on(error => sub {...});
.Ve
.SS "emit"
.IX Subsection "emit"
.Vb 2
\&  $e = $e\->emit(\*(Aqfoo\*(Aq);
\&  $e = $e\->emit(\*(Aqfoo\*(Aq, 123);
.Ve
.PP
Emit event.
.SS "has_subscribers"
.IX Subsection "has_subscribers"
.Vb 1
\&  my $bool = $e\->has_subscribers(\*(Aqfoo\*(Aq);
.Ve
.PP
Check if event has subscribers.
.SS "on"
.IX Subsection "on"
.Vb 1
\&  my $cb = $e\->on(foo => sub {...});
.Ve
.PP
Subscribe to event.
.PP
.Vb 4
\&  $e\->on(foo => sub {
\&    my ($e, @args) = @_;
\&    ...
\&  });
.Ve
.SS "once"
.IX Subsection "once"
.Vb 1
\&  my $cb = $e\->once(foo => sub {...});
.Ve
.PP
Subscribe to event and unsubscribe again after it has been emitted once.
.PP
.Vb 4
\&  $e\->once(foo => sub {
\&    my ($e, @args) = @_;
\&    ...
\&  });
.Ve
.SS "subscribers"
.IX Subsection "subscribers"
.Vb 1
\&  my $subscribers = $e\->subscribers(\*(Aqfoo\*(Aq);
.Ve
.PP
All subscribers for event.
.PP
.Vb 2
\&  # Unsubscribe last subscriber
\&  $e\->unsubscribe(foo => $e\->subscribers(\*(Aqfoo\*(Aq)\->[\-1]);
\&
\&  # Change order of subscribers
\&  @{$e\->subscribers(\*(Aqfoo\*(Aq)} = reverse @{$e\->subscribers(\*(Aqfoo\*(Aq)};
.Ve
.SS "unsubscribe"
.IX Subsection "unsubscribe"
.Vb 2
\&  $e = $e\->unsubscribe(\*(Aqfoo\*(Aq);
\&  $e = $e\->unsubscribe(foo => $cb);
.Ve
.PP
Unsubscribe from event.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can set the \f(CW\*(C`MOJO_EVENTEMITTER_DEBUG\*(C'\fR environment variable to get some
advanced diagnostics information printed to \f(CW\*(C`STDERR\*(C'\fR.
.PP
.Vb 1
\&  MOJO_EVENTEMITTER_DEBUG=1
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
