.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SOAP::Deserializer 3"
.TH SOAP::Deserializer 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SOAP::Deserializer \- the means by which the toolkit manages the conversion of XML into an object manageable by a developer
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SOAP::Deserializer provides the means by which incoming \s-1XML\s0 is decoded into a Perl data structure.
.SH "METHODS"
.IX Header "METHODS"
.IP "context" 4
.IX Item "context"
This provides access to the calling context of \f(CW\*(C`SOAP::Deserializer\*(C'\fR. In a client side context the often means a reference to an instance of SOAP::Lite. In a server side context this means a reference to a SOAP::Server instance.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "\s-1DESERIALIZING RAW XML INTO A SOAP::SOM OBJECT\s0"
.IX Subsection "DESERIALIZING RAW XML INTO A SOAP::SOM OBJECT"
A useful utility for SOAP::Deserializer is for parsing raw \s-1XML\s0 documents or fragments into a \s-1SOAP::SOM\s0 object. SOAP::Lite developers use this technique to write unit tests for the SOAP::Lite module itself. It is a lot more efficient for testing aspects of the toolkit than generating client calls over the network. This is a perfect way for developers to write unit tests for their custom data types for example.
.PP
Here is an example of how raw \s-1XML\s0 content can be parsed into a \s-1SOAP::SOM\s0 object by using SOAP::Deserializer:
.PP
.Vb 12
\&    $xml = <<END_XML;
\&    <foo>
\&      <person>
\&        <foo>123</foo>
\&        <foo>456</foo>
\&      </person>
\&      <person>
\&        <foo>789</foo>
\&        <foo>012</foo>
\&      </person>
\&    </foo>
\&    END_XML
\&
\&    my $som = SOAP::Deserializer\->deserialize($xml);
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2004 Paul Kulchenko. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Byrne Reese (byrne@majordojo.com)
