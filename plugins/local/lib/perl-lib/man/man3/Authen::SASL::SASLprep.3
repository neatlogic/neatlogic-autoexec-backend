.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Authen::SASL::SASLprep 3"
.TH Authen::SASL::SASLprep 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Authen::SASL::SASLprep \- A Stringprep Profile for User Names and Passwords (RFC 4013)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Authen::SASL::SASLprep;
\&  $output_query = saslprep $input;
\&  $output_stored = saslprep $stored;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the \fISASLprep\fR specification, which describes how to
prepare Unicode strings representing user names and passwords for comparison.
SASLprep is a profile of the stringprep algorithm.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This module implements a single function, \f(CW\*(C`saslprep\*(C'\fR, which is exported by default.
.IP "\fBsaslprep($input, [$stored]\fR" 4
.IX Item "saslprep($input, [$stored]"
Processes \f(CW$input\fR according to the \fISASLprep\fR specification and
returns the result.
.Sp
If \f(CW$input\fR contains characters not allowed for \fISASLprep\fR, it
throws an exception (so use \f(CW\*(C`eval\*(C'\fR if necessary).
.Sp
If the boolean parameter \f(CW$stored\fR is true, an exception is also thrown when
characters are not allowed for stored strings (i.e., when characters are
unassigned in Unicode 3.2). The default is to prepare query strings, in which
unassigned characters are allowed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Claus Färber <CFAERBER@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2009\-2016 Claus Färber.
.PP
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Unicode::Stringprep, \s-1RFC 4013\s0 <http://www.ietf.org/rfc/rfc4013.txt>
