.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Unicode::Escape 3"
.TH Unicode::Escape 3 "2019-10-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Unicode::Escape \- Escape and unescape Unicode characters other than ASCII
.SH "VERSION"
.IX Header "VERSION"
This document describes Unicode::Escape version 0.0.1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Escape Unicode charactors like \*(Aq\e\eu3042\e\eu3043\e\eu3044\*(Aq.
\&    # JSON thinks No more Garble!!
\&
\&    # case 1
\&    use Unicode::Escape;
\&    my $escaped1 = Unicode::Escape::escape($str1, \*(Aqeuc\-jp\*(Aq);             # $str1 contains charactor that is not ASCII. $str1 is encoded by euc\-jp.
\&    my $escaped2 = Unicode::Escape::escape($str2);     # default is utf8 # $str2 contains charactor that is not ASCII.
\&    my $unescaped1 = Unicode::Escape::unescape($str3, \*(Aqshiftjis\*(Aq);       # $str3 contains escaped Unicode character. return value is encoded by shiftjis.
\&    my $unescaped2 = Unicode::Escape::unescape($str4); # default is utf8 # $str4 contains escaped Unicode character.
\&
\&    # case 2
\&    use Unicode::Escape qw(escape unescape);
\&    my $escaped1 = escape($str1, \*(Aqeuc\-jp\*(Aq);             # $str1 contains charactor that is not ASCII. $str1 is encoded by euc\-jp.
\&    my $escaped2 = escape($str2);     # default is utf8 # $str2 contains charactor that is not ASCII.
\&    my $unescaped1 = unescape($str3, \*(Aqshiftjis\*(Aq);       # $str3 contains escaped Unicode character. return value is encoded by shiftjis.
\&    my $unescaped2 = unescape($str4); # default is utf8 # $str4 contains escaped Unicode character.
\&
\&    # case 3
\&    use Unicode::Escape;
\&    my $escaper = Unicode::Escape\->new($str, \*(Aqshiftjis\*(Aq); # $str contains charactor that is not ASCII. $str is encoded by shiftjis.(default is utf8)
\&    my $escaped = $escaper\->escape;
\&
\&    # case 4
\&    use Unicode::Escape;
\&    my $escaper = Unicode::Escape\->new($str); # $str contains escaped Unicode character.
\&    my $unescaped1 = $escaper\->unescape(\*(Aqshiftjis\*(Aq);
\&    my $unescaped2 = $escaper\->unescape;      # default is utf8.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Escape and unescape Unicode characters other than \s-1ASCII.\s0
When the server response is javascript code, it is convenient.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new( $string[, $encode ] )"
.el .SS "new( \f(CW$string\fP[, \f(CW$encode\fP ] )"
.IX Subsection "new( $string[, $encode ] )"
.IP "string" 2
.IX Item "string"
Target string for escape or unescape.
.IP "encode" 2
.IX Item "encode"
For instance, 'utf8', 'shiftjis', and 'euc\-jp', etc. (See Encode)
.ie n .SS "escape( $string[, $encode ] )"
.el .SS "escape( \f(CW$string\fP[, \f(CW$encode\fP ] )"
.IX Subsection "escape( $string[, $encode ] )"
.IP "string" 2
.IX Item "string"
Target string. This argument is unnecessary when called as object method.
.IP "encode" 2
.IX Item "encode"
For instance, 'utf8', 'shiftjis', and 'euc\-jp', etc. (See Encode)
This argument is unnecessary when called as object method.
.ie n .SS "unescape( $string[, $encode ] )"
.el .SS "unescape( \f(CW$string\fP[, \f(CW$encode\fP ] )"
.IX Subsection "unescape( $string[, $encode ] )"
.IP "string" 2
.IX Item "string"
Target string. This argument is unnecessary when called as object method.
.IP "encode" 2
.IX Item "encode"
For instance, 'utf8', 'shiftjis', and 'euc\-jp', etc. (See Encode)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Unicode::String, Encode
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-unicode\-escape@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Hitoshi Amano  \f(CW\*(C`<seijro@gmail.com>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006, Hitoshi Amano \f(CW\*(C`<seijro@gmail.com>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE \s0(\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
