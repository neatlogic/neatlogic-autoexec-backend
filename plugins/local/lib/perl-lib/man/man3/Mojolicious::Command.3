.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Command 3"
.TH Mojolicious::Command 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Command \- Command base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Lowercase command name
\&  package Mojolicious::Command::mycommand;
\&  use Mojo::Base \*(AqMojolicious::Command\*(Aq;
\&
\&  # Short description
\&  has description => \*(AqMy first Mojo command\*(Aq;
\&
\&  # Short usage message
\&  has usage => <<EOF;
\&  Usage: APPLICATION mycommand [OPTIONS]
\&
\&  Options:
\&    \-s, \-\-something   Does something
\&  EOF
\&
\&  sub run {
\&    my ($self, @args) = @_;
\&
\&    # Magic here! :)
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Command is an abstract base class for Mojolicious commands.
.PP
See \*(L"\s-1COMMANDS\*(R"\s0 in Mojolicious::Commands for a list of commands that are
available by default.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Command implements the following attributes.
.SS "app"
.IX Subsection "app"
.Vb 2
\&  my $app  = $command\->app;
\&  $command = $command\->app(Mojolicious\->new);
.Ve
.PP
Application for command, defaults to a Mojo::HelloWorld object.
.PP
.Vb 2
\&  # Introspect
\&  say "Template path: $_" for @{$command\->app\->renderer\->paths};
.Ve
.SS "description"
.IX Subsection "description"
.Vb 2
\&  my $description = $command\->description;
\&  $command        = $command\->description(\*(AqFoo\*(Aq);
.Ve
.PP
Short description of command, used for the command list.
.SS "quiet"
.IX Subsection "quiet"
.Vb 2
\&  my $bool = $command\->quiet;
\&  $command = $command\->quiet($bool);
.Ve
.PP
Limited command output.
.SS "usage"
.IX Subsection "usage"
.Vb 2
\&  my $usage = $command\->usage;
\&  $command  = $command\->usage(\*(AqFoo\*(Aq);
.Ve
.PP
Usage information for command, used for the help screen.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Command inherits all methods from Mojo::Base and implements
the following new ones.
.SS "chmod_file"
.IX Subsection "chmod_file"
.Vb 1
\&  $command = $command\->chmod_file(\*(Aq/home/sri/foo.txt\*(Aq, 0644);
.Ve
.PP
Change mode of a file.
.SS "chmod_rel_file"
.IX Subsection "chmod_rel_file"
.Vb 1
\&  $command = $command\->chmod_rel_file(\*(Aqfoo/foo.txt\*(Aq, 0644);
.Ve
.PP
Portably change mode of a file relative to the current working directory.
.SS "create_dir"
.IX Subsection "create_dir"
.Vb 1
\&  $command = $command\->create_dir(\*(Aq/home/sri/foo/bar\*(Aq);
.Ve
.PP
Create a directory.
.SS "create_rel_dir"
.IX Subsection "create_rel_dir"
.Vb 1
\&  $command = $command\->create_rel_dir(\*(Aqfoo/bar/baz\*(Aq);
.Ve
.PP
Portably create a directory relative to the current working directory.
.SS "extract_usage"
.IX Subsection "extract_usage"
.Vb 1
\&  my $usage = $command\->extract_usage;
.Ve
.PP
Extract usage message from the \s-1SYNOPSIS\s0 section of the file this method was
called from.
.SS "help"
.IX Subsection "help"
.Vb 1
\&  $command\->help;
.Ve
.PP
Print usage information for command.
.SS "rel_dir"
.IX Subsection "rel_dir"
.Vb 1
\&  my $path = $command\->rel_dir(\*(Aqfoo/bar\*(Aq);
.Ve
.PP
Portably generate an absolute path for a directory relative to the current
working directory.
.SS "rel_file"
.IX Subsection "rel_file"
.Vb 1
\&  my $path = $command\->rel_file(\*(Aqfoo/bar.txt\*(Aq);
.Ve
.PP
Portably generate an absolute path for a file relative to the current working
directory.
.SS "render_data"
.IX Subsection "render_data"
.Vb 2
\&  my $data = $command\->render_data(\*(Aqfoo_bar\*(Aq);
\&  my $data = $command\->render_data(\*(Aqfoo_bar\*(Aq, @args);
.Ve
.PP
Render a template from the \f(CW\*(C`DATA\*(C'\fR section of the command class with
Mojo::Loader and Mojo::Template.
.SS "render_to_file"
.IX Subsection "render_to_file"
.Vb 2
\&  $command = $command\->render_to_file(\*(Aqfoo_bar\*(Aq, \*(Aq/home/sri/foo.txt\*(Aq);
\&  $command = $command\->render_to_file(\*(Aqfoo_bar\*(Aq, \*(Aq/home/sri/foo.txt\*(Aq, @args);
.Ve
.PP
Render a template from the \f(CW\*(C`DATA\*(C'\fR section of the command class with
Mojo::Template to a file and create directory if necessary.
.SS "render_to_rel_file"
.IX Subsection "render_to_rel_file"
.Vb 2
\&  $command = $command\->render_to_rel_file(\*(Aqfoo_bar\*(Aq, \*(Aqfoo/bar.txt\*(Aq);
\&  $command = $command\->render_to_rel_file(\*(Aqfoo_bar\*(Aq, \*(Aqfoo/bar.txt\*(Aq, @args);
.Ve
.PP
Portably render a template from the \f(CW\*(C`DATA\*(C'\fR section of the command class with
Mojo::Template to a file relative to the current working directory and
create directory if necessary.
.SS "run"
.IX Subsection "run"
.Vb 2
\&  $command\->run;
\&  $command\->run(@ARGV);
.Ve
.PP
Run command. Meant to be overloaded in a subclass.
.SS "write_file"
.IX Subsection "write_file"
.Vb 1
\&  $command = $command\->write_file(\*(Aq/home/sri/foo.txt\*(Aq, \*(AqHello World!\*(Aq);
.Ve
.PP
Write text to a file and create directory if necessary.
.SS "write_rel_file"
.IX Subsection "write_rel_file"
.Vb 1
\&  $command = $command\->write_rel_file(\*(Aqfoo/bar.txt\*(Aq, \*(AqHello World!\*(Aq);
.Ve
.PP
Portably write text to a file relative to the current working directory and
create directory if necessary.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
