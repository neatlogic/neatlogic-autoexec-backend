.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Key::DSA 3"
.TH Net::SSH::Perl::Key::DSA 3 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSH::Perl::Key::DSA \- DSA key object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::SSH::Perl::Key;
\&    my $key = Net::SSH::Perl::Key\->new(\*(AqDSA\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Key::DSA\fR subclasses \fINet::SSH::Perl::Key\fR
to implement a key object, \s-1SSH\s0 style. This object provides all
of the methods needed for a \s-1DSA\s0 key object; the underlying
implementation is provided by \fICrypt::DSA\fR, and this class
wraps around that module to provide SSH-specific functionality
(eg. taking in a \fINet::SSH::Perl::Buffer\fR blob and transforming
it into a key object).
.SH "USAGE"
.IX Header "USAGE"
\&\fINet::SSH::Perl::Key::DSA\fR implements the interface described in
the documentation for \fINet::SSH::Perl::Key\fR. Any differences or
additions are described here.
.ie n .SS "$key\->sign($data)"
.el .SS "\f(CW$key\fP\->sign($data)"
.IX Subsection "$key->sign($data)"
Wraps around \fICrypt::DSA::sign\fR to sign \fI\f(CI$data\fI\fR using the private
key portions of \fI\f(CI$key\fI\fR, then encodes that signature into an
SSH-compatible signature blob.
.PP
Returns the signature blob.
.ie n .SS "$key\->verify($signature, $data)"
.el .SS "\f(CW$key\fP\->verify($signature, \f(CW$data\fP)"
.IX Subsection "$key->verify($signature, $data)"
Given a signature blob \fI\f(CI$signature\fI\fR and the original signed data
\&\fI\f(CI$data\fI\fR, attempts to verify the signature using the public key
portion of \fI\f(CI$key\fI\fR. This wraps around \fICrypt::DSA::verify\fR to
perform the core verification.
.PP
\&\fI\f(CI$signature\fI\fR should be an SSH-compatible signature blob, as
returned from \fIsign\fR; \fI\f(CI$data\fI\fR should be a string of data, as
passed to \fIsign\fR.
.PP
Returns true if the verification succeeds, false otherwise.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
