.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MongoDB::BulkWrite 3"
.TH MongoDB::BulkWrite 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::BulkWrite \- MongoDB bulk write interface
.SH "VERSION"
.IX Header "VERSION"
version v2.2.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Safe::Isa;
\&    use Try::Tiny;
\&
\&    my $bulk = $collection\->initialize_ordered_bulk_op;
\&
\&    $bulk\->insert_one( $doc );
\&    $bulk\->find( $query )\->upsert\->replace_one( $doc )
\&    $bulk\->find( $query )\->update( $modification )
\&
\&    my $result = try {
\&        $bulk\->execute;
\&    }
\&    catch {
\&        if ( $_\->$isa("MongoDB::WriteConcernError") ) {
\&            warn "Write concern failed";
\&        }
\&        else {
\&            die $_;
\&        }
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class constructs a list of write operations to perform in bulk for a
single collection.  On a MongoDB 2.6 or later server with write command support
this allow grouping similar operations together for transit to the database,
minimizing network round-trips.
.PP
To begin a bulk operation, use one these methods from MongoDB::Collection:
.IP "\(bu" 4
initialize_ordered_bulk_op
.IP "\(bu" 4
initialize_unordered_bulk_op
.SS "Ordered Operations"
.IX Subsection "Ordered Operations"
With an ordered operations list, MongoDB executes the write operations in the
list serially. If an error occurs during the processing of one of the write
operations, MongoDB will return without processing any remaining write
operations in the list.
.SS "Unordered Operations"
.IX Subsection "Unordered Operations"
With an unordered operations list, MongoDB can execute in parallel, as well as
in a nondeterministic order, the write operations in the list. If an error
occurs during the processing of one of the write operations, MongoDB will
continue to process remaining write operations in the list.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "collection (required)"
.IX Subsection "collection (required)"
The MongoDB::Collection where the operations are to be performed.
.SS "ordered (required)"
.IX Subsection "ordered (required)"
A boolean for whether or not operations should be ordered (true) or
unordered (false).
.SS "bypassDocumentValidation"
.IX Subsection "bypassDocumentValidation"
A boolean for whether or not operations should bypass document validation.
Default is false.
.SH "METHODS"
.IX Header "METHODS"
.SS "find"
.IX Subsection "find"
.Vb 1
\&    $view = $bulk\->find( $query_document );
.Ve
.PP
The \f(CW\*(C`find\*(C'\fR method returns a MongoDB::BulkWriteView object that allows
write operations like \f(CW\*(C`update\*(C'\fR or \f(CW\*(C`remove\*(C'\fR, constrained by a query document.
.PP
A query document is required.  Use an empty hashref for no criteria:
.PP
.Vb 1
\&    $bulk\->find( {} )\->remove; # remove all documents!
.Ve
.PP
An exception will be thrown on error.
.SS "insert_one"
.IX Subsection "insert_one"
.Vb 1
\&    $bulk\->insert_one( $doc );
.Ve
.PP
Queues a document for insertion when \*(L"execute\*(R" is called.  The document may
be a hash reference, an array reference (with balanced key/value pairs) or a
Tie::IxHash object.  If the document does not have an \f(CW\*(C`_id\*(C'\fR field, one will
be added to the original.
.PP
The method has an empty return on success; an exception will be thrown on error.
.SS "execute"
.IX Subsection "execute"
.Vb 5
\&    my $result = $bulk\->execute;
\&    # Optional write concern:
\&    my $result = $bulk\->execute( $concern );
\&    # With options
\&    my $result = $bulk\->execute( $concern, $options );
.Ve
.PP
Executes the queued operations.  The order and semantics depend on
whether the bulk object is ordered or unordered:
.IP "\(bu" 4
ordered — operations are executed in order, but operations of the same type (e.g. multiple inserts) may be grouped together and sent to the server.  If the server returns an error, the bulk operation will stop and an error will be thrown.
.IP "\(bu" 4
unordered — operations are grouped by type and sent to the server in an unpredictable order.  After all operations are sent, if any errors occurred, an error will be thrown.
.PP
When grouping operations of a type, operations will be sent to the server in
batches not exceeding 16MiB or 1000 items (for a version 2.6 or later server)
or individually (for legacy servers without write command support).
.PP
A write concern is optional, and can either take a pre-constructed WriteConcern
object, or the arguments to construct one.  For information on write concerns,
see MongoDB::WriteConcern.
.PP
The options argument is an optional hashref which can contain the following
values:
.IP "\(bu" 4
\&\f(CW\*(C`session\*(C'\fR \- the session to use for these operations. If not supplied, will use an implicit session. For more information see MongoDB::ClientSession
.PP
This method returns a MongoDB::BulkWriteResult object if the bulk operation
executes successfully.
.PP
Typical errors might include:
.IP "\(bu" 4
\&\f(CW\*(C`MongoDB::WriteError\*(C'\fR — one or more write operations failed
.IP "\(bu" 4
\&\f(CW\*(C`MongoDB::WriteConcernError\*(C'\fR \- all writes were accepted by a primary, but the write concern failed
.IP "\(bu" 4
\&\f(CW\*(C`MongoDB::DatabaseError\*(C'\fR — a command to the database failed entirely
.PP
See MongoDB::Error for more on error handling.
.PP
\&\fB\s-1NOTE\s0\fR: it is an error to call \f(CW\*(C`execute\*(C'\fR without any operations or
to call \f(CW\*(C`execute\*(C'\fR more than once on the same bulk object.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <david@mongodb.com>
.IP "\(bu" 4
Rassi <rassi@mongodb.com>
.IP "\(bu" 4
Mike Friedman <friedo@friedo.com>
.IP "\(bu" 4
Kristina Chodorow <k.chodorow@gmail.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by MongoDB, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
