.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Subsystem::Client 3"
.TH Net::SSH::Perl::Subsystem::Client 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSH::Perl::Subsystem::Client \- Subsystem client base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package My::Subsystem;
\&
\&    use Net::SSH::Perl::Subsystem::Client;
\&    @ISA = qw( Net::SSH::Perl::Subsystem::Client );
\&
\&    use constant MSG_HELLO => 1;
\&
\&    sub init {
\&        my $system = shift;
\&        $system\->SUPER::init(@_);
\&
\&        my $msg = $system\->new_msg(MSG_HELLO);
\&        $msg\->put_str("Hello, subsystem server.");
\&        $msg\->send;
\&    }
\&
\&    sub subsystem { "mysubsystem" }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Subsystem::Client\fR simplifies the process of writing
a client for an \s-1SSH\-2\s0 subsystem. A subsystem is generally a networking
protocol that is built on top of an \s-1SSH\s0 channel\*(--the channel provides
transport, connection, encryption, authentication, message integrity,
etc. The subsystem client and server communicate over this encrypted,
secure channel (a channel built over an insecure network). \s-1SSH\s0 provides
the encrypted transport, and the subsystem is then free to act like a
standard networking protocol.
.PP
\&\fISubsystem::Client\fR is built on top of \fINet::SSH::Perl\fR, which provides
the client end of the services described above (encryption, message
integrity checking, authentication, etc.). It is designed to be used with
a subsystem server, working with respect to an agreed-upon networking
protocol.
.PP
\&\s-1SFTP\s0 is an example of a subsystem: the underlying transport is set up
by \fINet::SSH::Perl\fR, and on top of that layer, files can be transferred
and filesystems managed without knowledge of the secure tunnel.
.SH "USAGE"
.IX Header "USAGE"
\&\fINet::SSH::Perl::Subsystem::Client\fR is intended to be used as a
base class for your protocol-specific client. It handles all
interaction with \fINet::SSH::Perl\fR so that your focus can be on
sending commands to the subsystem server, etc.
.PP
Your subclass will probably be most interested in using and/or
overriding the following methods:
.ie n .SS "$sc\->init(%args)"
.el .SS "\f(CW$sc\fP\->init(%args)"
.IX Subsection "$sc->init(%args)"
Initializes a new \fISubsystem::Client\fR object: builds the \s-1SSH\s0 tunnel
using \fINet::SSH::Perl\fR, then opens up a channel along which the
subsystem traffic will be sent. It then opens a connection to the
subsystem server.
.PP
You can override this method to provide any additional functionality
that your client might need; for example, you might wish to use it
to send an 'init' message to the subsystem server.
