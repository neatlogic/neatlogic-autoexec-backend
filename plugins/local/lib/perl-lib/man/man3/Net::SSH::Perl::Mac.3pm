.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Mac 3"
.TH Net::SSH::Perl::Mac 3 "2021-07-27" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSH::Perl::Mac \- MAC support for SSH2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Net::SSH::Perl::Mac;
\&    my $mac = Net::SSH::Perl::Mac\->new(\*(Aqhmac\-sha1\*(Aq, $key);
\&    $mac\->hmac("foo bar");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Mac\fR (and its subclasses) provides \s-1MAC\s0 support
for the \s-1SSH2\s0 implementation in \fINet::SSH::Perl\fR. In the \s-1SSH2\s0
protocol, each packet sent between client and server (after the
key exchange and algorithm negotiation phase) contains a \s-1MAC\s0
to protect its integrity. The sending party computes the \s-1MAC\s0 over
the length, padding, and (encrypted) payload fields of the packet,
then appends the \s-1MAC\s0; and the receiving party recomputes the \s-1MAC\s0
against the data that it receives.
.PP
The \s-1MAC\s0 is computed using part of the key that is negotiated
during the key exchange phase. During negotiation, packets do
not contain \s-1MAC\s0; after the \fI\s-1SSH_MSG_NEWKEYS\s0\fR message is sent,
each side turns on its respective encryption, \s-1MAC,\s0 and compression
code, for each packet that is sent after that point.
.PP
\&\fINet::SSH::Perl\fR supports two \s-1MAC\s0 algorithms: \fIhmac\-sha1\fR and
\&\fIhmac\-md5\fR. These algorithms are implemented, respectively,
by \fIDigest::HMAC_SHA1\fR and \fIDigest::HMAC_MD5\fR.
.SH "USAGE"
.IX Header "USAGE"
Each \s-1MAC\s0 object supports the following methods:
.ie n .SS "$mac = Net::SSH::Perl::Mac\->new( $name )"
.el .SS "\f(CW$mac\fP = Net::SSH::Perl::Mac\->new( \f(CW$name\fP )"
.IX Subsection "$mac = Net::SSH::Perl::Mac->new( $name )"
Constructs a new \s-1MAC\s0 object and returns that object.
.ie n .SS "$mac\->init( $key )"
.el .SS "\f(CW$mac\fP\->init( \f(CW$key\fP )"
.IX Subsection "$mac->init( $key )"
Initializes \fI\f(CI$mac\fI\fR and sets its key to \fI\f(CI$key\fI\fR (or rather,
to a substring of key, \fIkey_len\fR bytes long). As this implies,
the \fIkey_len\fR method should be called before \fIinit\fR to set
the intended length of the key.
.ie n .SS "$mac\->hmac( $data )"
.el .SS "\f(CW$mac\fP\->hmac( \f(CW$data\fP )"
.IX Subsection "$mac->hmac( $data )"
Computes the \s-1MAC\s0 over \fI\f(CI$data\fI\fR, using the key set in the
initialization phase, and returns the \s-1MAC.\s0
.ie n .SS "$mac\->len"
.el .SS "\f(CW$mac\fP\->len"
.IX Subsection "$mac->len"
Returns the length of the \s-1MAC \s0(eg. \f(CW20\fR for \s-1HMAC_SHA1\s0).
.ie n .SS "$mac\->key_len( $len )"
.el .SS "\f(CW$mac\fP\->key_len( \f(CW$len\fP )"
.IX Subsection "$mac->key_len( $len )"
Given \fI\f(CI$len\fI\fR sets the key length of \fI\f(CI$mac\fI\fR to \fI\f(CI$len\fI\fR.
This should be called \fIbefore\fR the \fIinit\fR method, because
\&\fIinit\fR uses this value to take a substring of the provided
key value.
.PP
Most of the time this should just be set to the \s-1MAC\s0 length
(the \fIlen\fR method); certain \s-1SSH\s0 implementations have a bug,
however, wherein they always use only the first 16 bytes of
the provided key.
.ie n .SS "$mac\->enable"
.el .SS "\f(CW$mac\fP\->enable"
.IX Subsection "$mac->enable"
Enables the \s-1MAC\s0 object. This is used by \fINet::SSH::Perl::Kex\fR
to \*(L"turn on\*(R" the \s-1MAC\s0 after key negotiation.
.ie n .SS "$mac\->enabled"
.el .SS "\f(CW$mac\fP\->enabled"
.IX Subsection "$mac->enabled"
Tests the \fIenabled\fR flag (set with the \fIenable\fR method).
This is used by \fINet::SSH::Perl::Packet\fR to determine whether
or not to compute a \s-1MAC\s0 on an outgoing packet.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
