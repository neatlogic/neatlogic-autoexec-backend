.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MongoDB::Cursor 3"
.TH MongoDB::Cursor 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::Cursor \- A lazy cursor for Mongo query results
.SH "VERSION"
.IX Header "VERSION"
version v2.2.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    while (my $object = $cursor\->next) {
\&        ...
\&    }
\&
\&    my @objects = $cursor\->all;
.Ve
.SH "USAGE"
.IX Header "USAGE"
.SS "Multithreading"
.IX Subsection "Multithreading"
\&\fB\s-1NOTE\s0\fR: Per threads documentation, use of Perl threads is discouraged by the
maintainers of Perl and the MongoDB Perl driver does not test or provide support
for use with threads.
.PP
Cursors are cloned in threads, but not reset.  Iterating the same cursor from
multiple threads will give unpredictable results.  Only iterate from a single
thread.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "started_iterating"
.IX Subsection "started_iterating"
A boolean indicating if this cursor has queried the database yet. Methods
modifying the query will complain if they are called after the database is
queried.
.SH "QUERY MODIFIERS"
.IX Header "QUERY MODIFIERS"
These methods modify the query to be run.  An exception will be thrown if
they are called after results are iterated.
.SS "immortal"
.IX Subsection "immortal"
.Vb 1
\&    $cursor\->immortal(1);
.Ve
.PP
Ordinarily, a cursor \*(L"dies\*(R" on the database server after a certain length of
time (approximately 10 minutes), to prevent inactive cursors from hogging
resources.  This option indicates that a cursor should not die until all of its
results have been fetched or it goes out of scope in Perl.
.PP
Boolean value, defaults to 0.
.PP
Note: \f(CW\*(C`immortal\*(C'\fR only affects the server-side timeout.  If you are getting
client-side timeouts you will need to change your client configuration.
See \*(L"max_time_ms\*(R" in MongoDB::MongoClient and
\&\*(L"socket_timeout_ms\*(R" in MongoDB::MongoClient.
.PP
Returns this cursor for chaining operations.
.SS "fields"
.IX Subsection "fields"
.Vb 5
\&    $coll\->insert({name => "Fred", age => 20});
\&    my $cursor = $coll\->find\->fields({ name => 1 });
\&    my $obj = $cursor\->next;
\&    $obj\->{name}; "Fred"
\&    $obj\->{age}; # undef
.Ve
.PP
Selects which fields are returned.  The default is all fields.  When fields
are specified, _id is returned by default, but this can be disabled by
explicitly setting it to \*(L"0\*(R".  E.g.  \f(CW\*(C`_id => 0\*(C'\fR. Argument must be either a
hash reference or a Tie::IxHash object.
.PP
See Limit fields to
return <http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/>
in the MongoDB documentation for details.
.PP
Returns this cursor for chaining operations.
.SS "sort"
.IX Subsection "sort"
.Vb 2
\&    # sort by name, descending
\&    $cursor\->sort([name => \-1]);
.Ve
.PP
Adds a sort to the query.  Argument is either a hash reference or a
Tie::IxHash or an array reference of key/value pairs.  Because hash
references are not ordered, do not use them for more than one key.
.PP
Returns this cursor for chaining operations.
.SS "limit"
.IX Subsection "limit"
.Vb 1
\&    $cursor\->limit(20);
.Ve
.PP
Sets cursor to return a maximum of N results.
.PP
Returns this cursor for chaining operations.
.SS "max_await_time_ms"
.IX Subsection "max_await_time_ms"
.Vb 1
\&    $cursor\->max_await_time_ms( 500 );
.Ve
.PP
The maximum amount of time in milliseconds for the server to wait on new
documents to satisfy a tailable cursor query. This only applies to a
cursor of type 'tailble_await'.  This is ignored if the cursor is not
a 'tailable_await' cursor or the server version is less than version 3.2.
.PP
Returns this cursor for chaining operations.
.SS "max_time_ms"
.IX Subsection "max_time_ms"
.Vb 1
\&    $cursor\->max_time_ms( 500 );
.Ve
.PP
Causes the server to abort the operation if the specified time in milliseconds
is exceeded.
.PP
Returns this cursor for chaining operations.
.SS "tailable"
.IX Subsection "tailable"
.Vb 1
\&    $cursor\->tailable(1);
.Ve
.PP
If a cursor should be tailable.  Tailable cursors can only be used on capped
collections and are similar to the \f(CW\*(C`tail \-f\*(C'\fR command: they never die and keep
returning new results as more is added to a collection.
.PP
They are often used for getting log messages.
.PP
Boolean value, defaults to 0.
.PP
If you want the tailable cursor to block for a few seconds, use
\&\*(L"tailable_await\*(R" instead.  \fBNote\fR calling this with a false value
disables tailing, even if \f(CW\*(C`tailable_await\*(C'\fR was previously called.
.PP
Returns this cursor for chaining operations.
.SS "tailable_await"
.IX Subsection "tailable_await"
.Vb 1
\&    $cursor\->tailable_await(1);
.Ve
.PP
Sets a cursor to be tailable and block for a few seconds if no data
is immediately available.
.PP
Boolean value, defaults to 0.
.PP
If you want the tailable cursor without blocking, use \*(L"tailable\*(R" instead.
\&\fBNote\fR calling this with a false value disables tailing, even if \f(CW\*(C`tailable\*(C'\fR
was previously called.
.SS "skip"
.IX Subsection "skip"
.Vb 1
\&    $cursor\->skip( 50 );
.Ve
.PP
Skips the first N results.
.PP
Returns this cursor for chaining operations.
.SS "hint"
.IX Subsection "hint"
Hint the query to use a specific index by name:
.PP
.Vb 1
\&    $cursor\->hint("index_name");
.Ve
.PP
Hint the query to use index based on individual keys and direction:
.PP
.Vb 1
\&    $cursor\->hint([field_1 => 1, field_2 => \-1, field_3 => 1]);
.Ve
.PP
Use of a hash reference should be avoided except for single key indexes.
.PP
The hint must be a string or ordered document.
.PP
Returns this cursor for chaining operations.
.SS "partial"
.IX Subsection "partial"
.Vb 1
\&    $cursor\->partial(1);
.Ve
.PP
If a shard is down, mongos will return an error when it tries to query that
shard.  If this is set, mongos will just skip that shard, instead.
.PP
Boolean value, defaults to 0.
.PP
Returns this cursor for chaining operations.
.SS "read_preference"
.IX Subsection "read_preference"
.Vb 2
\&    $cursor\->read_preference($read_preference_object);
\&    $cursor\->read_preference(\*(Aqsecondary\*(Aq, [{foo => \*(Aqbar\*(Aq}]);
.Ve
.PP
Sets read preference for the cursor's connection.
.PP
If given a single argument that is a MongoDB::ReadPreference object, the
read preference is set to that object.  Otherwise, it takes positional
arguments: the read preference mode and a tag set list, which must be a valid
mode and tag set list as described in the MongoDB::ReadPreference
documentation.
.PP
Returns this cursor for chaining operations.
.SH "QUERY INTROSPECTION AND RESET"
.IX Header "QUERY INTROSPECTION AND RESET"
These methods run introspection methods on the query conditions and modifiers
stored within the cursor object.
.SS "explain"
.IX Subsection "explain"
.Vb 1
\&    my $explanation = $cursor\->explain;
.Ve
.PP
This will tell you the type of cursor used, the number of records the \s-1DB\s0 had to
examine as part of this query, the number of records returned by the query, and
the time in milliseconds the query took to execute.
.PP
See also core documentation on explain:
<http://dochub.mongodb.org/core/explain>.
.SH "QUERY ITERATION"
.IX Header "QUERY ITERATION"
These methods allow you to iterate over results.
.SS "result"
.IX Subsection "result"
.Vb 1
\&    my $result = $cursor\->result;
.Ve
.PP
This method will execute the query and return a MongoDB::QueryResult object
with the results.
.PP
The \f(CW\*(C`has_next\*(C'\fR, \f(CW\*(C`next\*(C'\fR, and \f(CW\*(C`all\*(C'\fR methods call \f(CW\*(C`result\*(C'\fR internally,
which executes the query \*(L"on demand\*(R".
.PP
Iterating with a MongoDB::QueryResult object directly instead of a
MongoDB::Cursor will be slightly faster, since the MongoDB::Cursor
methods below just internally call the corresponding method on the result
object.
.SS "has_next"
.IX Subsection "has_next"
.Vb 3
\&    while ($cursor\->has_next) {
\&        ...
\&    }
.Ve
.PP
Checks if there is another result to fetch.  Will automatically fetch more
data from the server if necessary.
.SS "next"
.IX Subsection "next"
.Vb 3
\&    while (my $object = $cursor\->next) {
\&        ...
\&    }
.Ve
.PP
Returns the next object in the cursor. Will automatically fetch more data from
the server if necessary. Returns undef if no more data is available.
.SS "batch"
.IX Subsection "batch"
.Vb 3
\&    while (my @batch = $cursor\->batch) {
\&        ...
\&    }
.Ve
.PP
Returns the next batch of data from the cursor. Will automatically fetch more
data from the server if necessary. Returns an empty list if no more data is available.
.SS "all"
.IX Subsection "all"
.Vb 1
\&    my @objects = $cursor\->all;
.Ve
.PP
Returns a list of all objects in the result.
.SS "reset"
.IX Subsection "reset"
Resets the cursor.  After being reset, pre-query methods can be
called on the cursor (sort, limit, etc.) and subsequent calls to
result, next, has_next, or all will re-query the database.
.SS "info"
.IX Subsection "info"
Returns a hash of information about this cursor.  This is intended for
debugging purposes and users should not rely on the contents of this method for
production use.  Currently the fields are:
.IP "\(bu" 4
\&\f(CW\*(C`cursor_id\*(C'\fR  \*(-- the server-side id for this cursor.  See below for details.
.IP "\(bu" 4
\&\f(CW\*(C`num\*(C'\fR \*(-- the number of results received from the server so far
.IP "\(bu" 4
\&\f(CW\*(C`at\*(C'\fR \*(-- the (zero-based) index of the document that will be returned next from \*(L"next\*(R"
.IP "\(bu" 4
\&\f(CW\*(C`flag\*(C'\fR \*(-- if the database could not find the cursor or another error occurred, \f(CW\*(C`flag\*(C'\fR may contain a hash reference of flags set in the response (depending on the error).  See <http://www.mongodb.org/display/DOCS/Mongo+Wire+Protocol#MongoWireProtocol\-OPREPLY> for a full list of flag values.
.IP "\(bu" 4
\&\f(CW\*(C`start\*(C'\fR \*(-- the index of the result that the current batch of results starts at.
.PP
If the cursor has not yet executed, only the \f(CW\*(C`num\*(C'\fR field will be returned with
a value of 0.
.PP
The \f(CW\*(C`cursor_id\*(C'\fR could appear in one of three forms:
.IP "\(bu" 4
MongoDB::CursorID object (a blessed reference to an 8\-byte string)
.IP "\(bu" 4
A perl scalar (an integer)
.IP "\(bu" 4
A Math::BigInt object (64 bit integer on 32\-bit perl)
.PP
When the \f(CW\*(C`cursor_id\*(C'\fR is zero, there are no more results to fetch.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Core documentation on cursors: <http://dochub.mongodb.org/core/cursors>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <david@mongodb.com>
.IP "\(bu" 4
Rassi <rassi@mongodb.com>
.IP "\(bu" 4
Mike Friedman <friedo@friedo.com>
.IP "\(bu" 4
Kristina Chodorow <k.chodorow@gmail.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by MongoDB, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
