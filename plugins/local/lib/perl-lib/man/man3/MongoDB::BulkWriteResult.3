.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MongoDB::BulkWriteResult 3"
.TH MongoDB::BulkWriteResult 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::BulkWriteResult \- MongoDB bulk write result document
.SH "VERSION"
.IX Header "VERSION"
version v2.2.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # returned directly
\&    my $result = $bulk\->execute;
\&
\&    # from a WriteError or WriteConcernError
\&    my $result = $error\->result;
\&
\&    if ( $result\->acknowledged ) {
\&        ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class encapsulates the results from a bulk write operation. It may be
returned directly from \f(CW\*(C`execute\*(C'\fR or it may be in the \f(CW\*(C`result\*(C'\fR attribute of a
\&\f(CW\*(C`MongoDB::DatabaseError\*(C'\fR subclass like \f(CW\*(C`MongoDB::WriteError\*(C'\fR or
\&\f(CW\*(C`MongoDB::WriteConcernError\*(C'\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "inserted_count"
.IX Subsection "inserted_count"
Number of documents inserted
.SS "upserted_count"
.IX Subsection "upserted_count"
Number of documents upserted
.SS "matched_count"
.IX Subsection "matched_count"
Number of documents matched for an update or replace operation.
.SS "deleted_count"
.IX Subsection "deleted_count"
Number of documents removed
.SS "modified_count"
.IX Subsection "modified_count"
Number of documents actually modified by an update operation. This
is not necessarily the same as \*(L"matched_count\*(R" if the document was
not actually modified as a result of the update.
.PP
This field is not available from legacy servers before version 2.6.
If results are seen from a legacy server (or from a mongos proxying
for a legacy server) this attribute will be \f(CW\*(C`undef\*(C'\fR.
.PP
You can call \f(CW\*(C`has_modified_count\*(C'\fR to find out if this attribute is
defined or not.
.SS "upserted"
.IX Subsection "upserted"
An array reference containing information about upserted documents (if any).
Each document will have the following fields:
.IP "\(bu" 4
index — 0\-based index indicating which operation failed
.IP "\(bu" 4
_id — the object \s-1ID\s0 of the upserted document
.SS "upserted_ids"
.IX Subsection "upserted_ids"
A hash reference built lazily from \f(CW\*(C`upserted\*(C'\fR mapping indexes to object
IDs.
.SS "inserted"
.IX Subsection "inserted"
An array reference containing information about inserted documents (if any).
Documents are just as in \f(CW\*(C`upserted\*(C'\fR.
.SS "inserted_ids"
.IX Subsection "inserted_ids"
A hash reference built lazily from \f(CW\*(C`inserted\*(C'\fR mapping indexes to object
IDs.
.SS "write_errors"
.IX Subsection "write_errors"
An array reference containing write errors (if any).  Each error document
will have the following fields:
.IP "\(bu" 4
index — 0\-based index indicating which operation failed
.IP "\(bu" 4
code — numeric error code
.IP "\(bu" 4
errmsg — textual error string
.IP "\(bu" 4
op — a representation of the actual operation sent to the server
.SS "write_concern_errors"
.IX Subsection "write_concern_errors"
An array reference containing write concern errors (if any).  Each error
document will have the following fields:
.IP "\(bu" 4
index — 0\-based index indicating which operation failed
.IP "\(bu" 4
code — numeric error code
.SS "op_count"
.IX Subsection "op_count"
The number of operations sent to the database.
.SS "batch_count"
.IX Subsection "batch_count"
The number of database commands issued to the server.  This will be less
than the \f(CW\*(C`op_count\*(C'\fR if multiple operations were grouped together.
.SH "METHODS"
.IX Header "METHODS"
.SS "assert"
.IX Subsection "assert"
Throws an error if write errors or write concern errors occurred.
.SS "assert_no_write_error"
.IX Subsection "assert_no_write_error"
Throws a MongoDB::WriteError if \f(CW\*(C`count_write_errors\*(C'\fR is non-zero; otherwise
returns 1.
.SS "assert_no_write_concern_error"
.IX Subsection "assert_no_write_concern_error"
Throws a MongoDB::WriteConcernError if \f(CW\*(C`count_write_concern_errors\*(C'\fR is
non-zero; otherwise returns 1.
.SS "count_write_errors"
.IX Subsection "count_write_errors"
Returns the number of write errors
.SS "count_write_concern_errors"
.IX Subsection "count_write_concern_errors"
Returns the number of write errors
.SS "last_code"
.IX Subsection "last_code"
Returns the last \f(CW\*(C`code\*(C'\fR field from either the list of \f(CW\*(C`write_errors\*(C'\fR or
\&\f(CW\*(C`write_concern_errors\*(C'\fR or 0 if there are no errors.
.SS "last_errmsg"
.IX Subsection "last_errmsg"
Returns the last \f(CW\*(C`errmsg\*(C'\fR field from either the list of \f(CW\*(C`write_errors\*(C'\fR or
\&\f(CW\*(C`write_concern_errors\*(C'\fR or the empty string if there are no errors.
.SS "last_wtimeout"
.IX Subsection "last_wtimeout"
True if a write concern timed out or false otherwise.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <david@mongodb.com>
.IP "\(bu" 4
Rassi <rassi@mongodb.com>
.IP "\(bu" 4
Mike Friedman <friedo@friedo.com>
.IP "\(bu" 4
Kristina Chodorow <k.chodorow@gmail.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2020 by MongoDB, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
