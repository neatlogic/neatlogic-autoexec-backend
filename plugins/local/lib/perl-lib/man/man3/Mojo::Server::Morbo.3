.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Server::Morbo 3"
.TH Mojo::Server::Morbo 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Server::Morbo \- Tonight at 11...DOOOOOOOOOOOOOOOM!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Server::Morbo;
\&
\&  my $morbo = Mojo::Server::Morbo\->new;
\&  $morbo\->run(\*(Aq/home/sri/myapp.pl\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Server::Morbo is a full featured, self-restart capable non-blocking
I/O \s-1HTTP\s0 and WebSocket server, built around the very well tested and reliable
Mojo::Server::Daemon, with IPv6, \s-1TLS, SNI,\s0 Comet (long polling), keep-alive
and multiple event loop support. Note that the server uses signals for process
management, so you should avoid modifying signal handlers in your applications.
.PP
To start applications with it you can use the morbo script.
.PP
.Vb 2
\&  $ morbo ./myapp.pl
\&  Server available at http://127.0.0.1:3000
.Ve
.PP
For better scalability (epoll, kqueue) and to provide non-blocking name
resolution, \s-1SOCKS5\s0 as well as \s-1TLS\s0 support, the optional modules \s-1EV\s0 (4.0+),
Net::DNS::Native (0.15+), IO::Socket::Socks (0.64+) and
IO::Socket::SSL (1.94+) will be used automatically if possible. Individual
features can also be disabled with the \f(CW\*(C`MOJO_NO_NDN\*(C'\fR, \f(CW\*(C`MOJO_NO_SOCKS\*(C'\fR and
\&\f(CW\*(C`MOJO_NO_TLS\*(C'\fR environment variables.
.PP
See \*(L"\s-1DEPLOYMENT\*(R"\s0 in Mojolicious::Guides::Cookbook for more.
.SH "SIGNALS"
.IX Header "SIGNALS"
The Mojo::Server::Morbo process can be controlled at runtime with the
following signals.
.SS "\s-1INT, TERM\s0"
.IX Subsection "INT, TERM"
Shut down server immediately.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Server::Morbo implements the following attributes.
.SS "daemon"
.IX Subsection "daemon"
.Vb 2
\&  my $daemon = $morbo\->daemon;
\&  $morbo     = $morbo\->daemon(Mojo::Server::Daemon\->new);
.Ve
.PP
Mojo::Server::Daemon object this server manages.
.SS "watch"
.IX Subsection "watch"
.Vb 2
\&  my $watch = $morbo\->watch;
\&  $morbo    = $morbo\->watch([\*(Aq/home/sri/my_app\*(Aq]);
.Ve
.PP
Files and directories to watch for changes, defaults to the application script
as well as the \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`templates\*(C'\fR directories in the current working
directory.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Server::Morbo inherits all methods from Mojo::Base and implements
the following new ones.
.SS "modified_files"
.IX Subsection "modified_files"
.Vb 1
\&  my $files = $morbo\->modified_files;
.Ve
.PP
Check if files from \*(L"watch\*(R" have been modified since the last check and
return an array reference with the results.
.PP
.Vb 2
\&  # All files that have been modified
\&  say for @{$morbo\->modified_files};
.Ve
.SS "run"
.IX Subsection "run"
.Vb 1
\&  $morbo\->run(\*(Aqscript/my_app\*(Aq);
.Ve
.PP
Run server for application and wait for \*(L"\s-1SIGNALS\*(R"\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
