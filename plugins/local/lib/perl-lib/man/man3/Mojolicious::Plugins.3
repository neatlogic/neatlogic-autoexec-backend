.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugins 3"
.TH Mojolicious::Plugins 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugins \- Plugin manager
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Plugins;
\&
\&  my $plugins = Mojolicious::Plugins\->new;
\&  push @{$plugins\->namespaces}, \*(AqMyApp::Plugin\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugins is the plugin manager of Mojolicious.
.SH "PLUGINS"
.IX Header "PLUGINS"
The following plugins are included in the Mojolicious distribution as
examples.
.IP "Mojolicious::Plugin::Charset" 2
.IX Item "Mojolicious::Plugin::Charset"
Change the application charset.
.IP "Mojolicious::Plugin::Config" 2
.IX Item "Mojolicious::Plugin::Config"
Perl-ish configuration files.
.IP "Mojolicious::Plugin::DefaultHelpers" 2
.IX Item "Mojolicious::Plugin::DefaultHelpers"
General purpose helper collection, loaded automatically.
.IP "Mojolicious::Plugin::EPLRenderer" 2
.IX Item "Mojolicious::Plugin::EPLRenderer"
Renderer for plain embedded Perl templates, loaded automatically.
.IP "Mojolicious::Plugin::EPRenderer" 2
.IX Item "Mojolicious::Plugin::EPRenderer"
Renderer for more sophisticated embedded Perl templates, loaded automatically.
.IP "Mojolicious::Plugin::HeaderCondition" 2
.IX Item "Mojolicious::Plugin::HeaderCondition"
Route condition for all kinds of headers, loaded automatically.
.IP "Mojolicious::Plugin::JSONConfig" 2
.IX Item "Mojolicious::Plugin::JSONConfig"
\&\s-1JSON\s0 configuration files.
.IP "Mojolicious::Plugin::Mount" 2
.IX Item "Mojolicious::Plugin::Mount"
Mount whole Mojolicious applications.
.IP "Mojolicious::Plugin::PODRenderer" 2
.IX Item "Mojolicious::Plugin::PODRenderer"
Renderer for turning \s-1POD\s0 into \s-1HTML\s0 and documentation browser for
Mojolicious::Guides.
.IP "Mojolicious::Plugin::TagHelpers" 2
.IX Item "Mojolicious::Plugin::TagHelpers"
Template specific helper collection, loaded automatically.
.SH "EVENTS"
.IX Header "EVENTS"
Mojolicious::Plugins inherits all events from Mojo::EventEmitter.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Plugins implements the following attributes.
.SS "namespaces"
.IX Subsection "namespaces"
.Vb 2
\&  my $namespaces = $plugins\->namespaces;
\&  $plugins       = $plugins\->namespaces([\*(AqMojolicious::Plugin\*(Aq]);
.Ve
.PP
Namespaces to load plugins from, defaults to Mojolicious::Plugin.
.PP
.Vb 2
\&  # Add another namespace to load plugins from
\&  push @{$plugins\->namespaces}, \*(AqMyApp::Plugin\*(Aq;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugins inherits all methods from Mojo::EventEmitter and
implements the following new ones.
.SS "emit_chain"
.IX Subsection "emit_chain"
.Vb 2
\&  $plugins\->emit_chain(\*(Aqfoo\*(Aq);
\&  $plugins\->emit_chain(foo => 123);
.Ve
.PP
Emit events as chained hooks.
.SS "emit_hook"
.IX Subsection "emit_hook"
.Vb 2
\&  $plugins = $plugins\->emit_hook(\*(Aqfoo\*(Aq);
\&  $plugins = $plugins\->emit_hook(foo => 123);
.Ve
.PP
Emit events as hooks.
.SS "emit_hook_reverse"
.IX Subsection "emit_hook_reverse"
.Vb 2
\&  $plugins = $plugins\->emit_hook_reverse(\*(Aqfoo\*(Aq);
\&  $plugins = $plugins\->emit_hook_reverse(foo => 123);
.Ve
.PP
Emit events as hooks in reverse order.
.SS "load_plugin"
.IX Subsection "load_plugin"
.Vb 3
\&  my $plugin = $plugins\->load_plugin(\*(Aqsome_thing\*(Aq);
\&  my $plugin = $plugins\->load_plugin(\*(AqSomeThing\*(Aq);
\&  my $plugin = $plugins\->load_plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq);
.Ve
.PP
Load a plugin from the configured namespaces or by full module name.
.SS "register_plugin"
.IX Subsection "register_plugin"
.Vb 11
\&  $plugins\->register_plugin(\*(Aqsome_thing\*(Aq, Mojolicious\->new);
\&  $plugins\->register_plugin(\*(Aqsome_thing\*(Aq, Mojolicious\->new, foo => 23);
\&  $plugins\->register_plugin(\*(Aqsome_thing\*(Aq, Mojolicious\->new, {foo => 23});
\&  $plugins\->register_plugin(\*(AqSomeThing\*(Aq, Mojolicious\->new);
\&  $plugins\->register_plugin(\*(AqSomeThing\*(Aq, Mojolicious\->new, foo => 23);
\&  $plugins\->register_plugin(\*(AqSomeThing\*(Aq, Mojolicious\->new, {foo => 23});
\&  $plugins\->register_plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq, Mojolicious\->new);
\&  $plugins\->register_plugin(
\&    \*(AqMyApp::Plugin::SomeThing\*(Aq, Mojolicious\->new, foo => 23);
\&  $plugins\->register_plugin(
\&    \*(AqMyApp::Plugin::SomeThing\*(Aq, Mojolicious\->new, {foo => 23});
.Ve
.PP
Load a plugin from the configured namespaces or by full module name and run
\&\f(CW\*(C`register\*(C'\fR, optional arguments are passed through.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicious.org>.
