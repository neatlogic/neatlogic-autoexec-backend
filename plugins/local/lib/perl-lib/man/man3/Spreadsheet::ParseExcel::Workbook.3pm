.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Spreadsheet::ParseExcel::Workbook 3"
.TH Spreadsheet::ParseExcel::Workbook 3 "2021-07-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "\fIget_active_sheet()\fP"
.IX Subsection "get_active_sheet()"
Return the number of the active (open) worksheet (at the time the workbook
was saved.  May return undef.
.SH "NAME"
Spreadsheet::ParseExcel::Workbook \- A class for Workbooks.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See the documentation for Spreadsheet::ParseExcel.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used in conjunction with Spreadsheet::ParseExcel. See the documentation for Spreadsheet::ParseExcel.
.SH "Methods"
.IX Header "Methods"
The following Workbook methods are available:
.PP
.Vb 7
\&    $workbook\->worksheets()
\&    $workbook\->worksheet()
\&    $workbook\->worksheet_count()
\&    $workbook\->get_filename()
\&    $workbook\->get_print_areas()
\&    $workbook\->get_print_titles()
\&    $workbook\->using_1904_date()
.Ve
.SS "\fIworksheets()\fP"
.IX Subsection "worksheets()"
The \f(CW\*(C`worksheets()\*(C'\fR method returns an array of Worksheet objects. This was most commonly used to iterate over the worksheets in a workbook:
.PP
.Vb 3
\&    for my $worksheet ( $workbook\->worksheets() ) {
\&        ...
\&    }
.Ve
.SS "\fIworksheet()\fP"
.IX Subsection "worksheet()"
The \f(CW\*(C`worksheet()\*(C'\fR method returns a single \f(CW\*(C`Worksheet\*(C'\fR object using either its name or index:
.PP
.Vb 2
\&    $worksheet = $workbook\->worksheet(\*(AqSheet1\*(Aq);
\&    $worksheet = $workbook\->worksheet(0);
.Ve
.PP
Returns \f(CW\*(C`undef\*(C'\fR if the sheet name or index doesn't exist.
.SS "\fIworksheet_count()\fP"
.IX Subsection "worksheet_count()"
The \f(CW\*(C`worksheet_count()\*(C'\fR method returns the number of Woksheet objects in the Workbook.
.PP
.Vb 1
\&    my $worksheet_count = $workbook\->worksheet_count();
.Ve
.SS "\fIget_filename()\fP"
.IX Subsection "get_filename()"
The \f(CW\*(C`get_filename()\*(C'\fR method returns the name of the Excel file of \f(CW\*(C`undef\*(C'\fR if the data was read from a filehandle rather than a file.
.PP
.Vb 1
\&    my $filename = $workbook\->get_filename();
.Ve
.SS "\fIget_print_areas()\fP"
.IX Subsection "get_print_areas()"
The \f(CW\*(C`get_print_areas()\*(C'\fR method returns an array ref of print areas.
.PP
.Vb 1
\&    my $print_areas = $workbook\->get_print_areas();
.Ve
.PP
Each print area is as follows:
.PP
.Vb 1
\&    [ $start_row, $start_col, $end_row, $end_col ]
.Ve
.PP
Returns undef if there are no print areas.
.SS "\fIget_print_titles()\fP"
.IX Subsection "get_print_titles()"
The \f(CW\*(C`get_print_titles()\*(C'\fR method returns an array ref of print title hash refs.
.PP
.Vb 1
\&    my $print_titles = $workbook\->get_print_titles();
.Ve
.PP
Each print title array ref is as follows:
.PP
.Vb 4
\&    {
\&        Row    => [ $start_row, $end_row ],
\&        Column => [ $start_col, $end_col ],
\&    }
.Ve
.PP
Returns undef if there are no print titles.
.SS "\fIusing_1904_date()\fP"
.IX Subsection "using_1904_date()"
The \f(CW\*(C`using_1904_date()\*(C'\fR method returns true if the Excel file is using the 1904 date epoch instead of the 1900 epoch.
.PP
.Vb 1
\&    my $using_1904_date = $workbook\->using_1904_date();
\&
\& The Windows version of Excel generally uses the 1900 epoch while the Mac version of Excel generally uses the 1904 epoch.
.Ve
.PP
Returns 0 if the 1900 epoch is in use.
.SH "AUTHOR"
.IX Header "AUTHOR"
Current maintainer 0.60+: Douglas Wilson dougw@cpan.org
.PP
Maintainer 0.40\-0.59: John McNamara jmcnamara@cpan.org
.PP
Maintainer 0.27\-0.33: Gabor Szabo szabgab@cpan.org
.PP
Original author: Kawai Takanori kwitknr@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2014 Douglas Wilson
.PP
Copyright (c) 2009\-2013 John McNamara
.PP
Copyright (c) 2006\-2008 Gabor Szabo
.PP
Copyright (c) 2000\-2006 Kawai Takanori
.PP
All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public License or the Artistic License, as specified in the Perl \s-1README\s0 file.
