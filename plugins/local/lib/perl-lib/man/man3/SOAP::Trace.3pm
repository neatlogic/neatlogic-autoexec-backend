.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SOAP::Trace 3"
.TH SOAP::Trace 3 "2019-10-08" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SOAP::Trace \- used only to manage and manipulate the runtime tracing of execution within the toolkit
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class has no methods or objects. It is used only to manage and manipulate the runtime tracing of execution within the toolkit. In absence of methods, this section reviews the events that may be configured and the ways of configuring them.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Tracing is enabled by the SOAP::Lite import method. This is usually done at compile-time, though it may be done explicitly by calling import directly. The commands for setting up tracing start with the keyword +trace. Alternately, +debug may be used; the two are interchangeable. After the initial keyword, one or more of the signals detailed here may be specified, optionally with a callback to handle them. When specifying multiple signals to be handled by a single callback, it is sufficient to list all of them first, followed finally by the callback, as in:
.PP
.Vb 3
\&   use SOAP::Lite +trace =>
\&     method => fault => \e&message_level,
\&     trace => objects => \e&lower_level;
.Ve
.PP
In the fragment, the reference to message_level is installed as the callback for both method and fault signals, while lower_level is installed for trace and object events. If callbacks aren't explicitly provided, the default tracing action is to log a message to Perl's \s-1STDOUT\s0 file descriptor. Callbacks should expect a one or more arguments passed in, though the nature of the arguments varies based on the signal.
.PP
Any signal can be disabled by prefacing the name with a hyphen, such as \-result. This is useful with the pseudosignal \*(L"all,\*(R" which is shorthand for the full list of signals. The following fragment disables only the two signals, while still enabling the rest:
.PP
.Vb 1
\&    SOAP::Lite\->import(+trace => all => \-result => \-parameters);
.Ve
.PP
If the keyword +trace (or +debug) is used without any signals specified, it enables all signals (as if all were implied).
.PP
The signals and their meaning follow. Each also bears a note as to whether the signal is relevant to a server application, client application, or both.
.SH "TRACE SIGNALS"
.IX Header "TRACE SIGNALS"
.IP "transport \fIClient only\fR" 4
.IX Item "transport Client only"
Triggered in the transport layer just before a request is sent and immediately after a response is received. Each time the signal is sent, the sole argument to the callback is the relevant object. On requests, this is a HTTP::Request object; for responses, it's a HTTP::Response object.
.IP "dispatch \fIServer only\fR" 4
.IX Item "dispatch Server only"
Triggered with the full name of the method being dispatched, just before execution is passed to it. It is currently disabled in SOAP::Lite 0.55.
.IP "result \fIServer only\fR" 4
.IX Item "result Server only"
Triggered after the method has been dispatched and is passed the results returned from the method as a list. The result values have not yet been serialized when this signal is sent.
.IP "parameters \fIServer only\fR" 4
.IX Item "parameters Server only"
Triggered before a method call is actually dispatched, with the data that is intended for the call itself. The parameters for the method call are passed in as a list, after having been deserialized into Perl data.
.IP "headers \fIServer only\fR" 4
.IX Item "headers Server only"
This signal should be for triggering on the headers of an incoming message, but it isn't implemented as of SOAP::Lite 0.55.
.IP "objects \fIClient or server\fR" 4
.IX Item "objects Client or server"
Highlights when an object is instantiated or destroyed. It is triggered in the new and \s-1DESTROY\s0 methods of the various SOAP::Lite classes.
.IP "method \fIClient or server\fR" 4
.IX Item "method Client or server"
Triggered with the list of arguments whenever the envelope method of SOAP::Serializer is invoked with an initial argument of method. The initial string itself isn't passed to the callback.
.IP "fault \fIClient or server\fR" 4
.IX Item "fault Client or server"
As with the method signal earlier, except that this signal is triggered when SOAP::Serializer::envelope is called with an initial argument of fault.
.IP "freeform \fIClient or server\fR" 4
.IX Item "freeform Client or server"
Like the two previous, this signal is triggered when the method SOAP::Serializer::envelope is called with an initial parameter of freeform. This syntax is used when the method is creating SOAP::Data objects from free-form input data.
.IP "trace \fIClient or server\fR" 4
.IX Item "trace Client or server"
Triggered at the entry-point of many of the more-significant functions. Not all the functions within the SOAP::Lite classes trigger this signal. Those that do are primarily the highly visible functions described in the interface descriptions for the various classes.
.IP "debug \fIClient or server\fR" 4
.IX Item "debug Client or server"
Used in the various transport modules to track the contents of requests and responses (as ordinary strings, not as objects) at different points along the way.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "\s-1SELECTING SIGNALS TO TRACE\s0"
.IX Subsection "SELECTING SIGNALS TO TRACE"
The following code snippet will enable tracing for all signals:
.PP
.Vb 1
\&  use SOAP::Lite +trace => \*(Aqall\*(Aq;
.Ve
.PP
You can disable tracing for a set of signals by prefixing the signal name with a hyphen. Therefore, if you wish to enable tracing for every signal \s-1EXCEPT\s0 transport signals, then you would use the code below:
.PP
.Vb 1
\&  use SOAP::Lite +trace => [ qw(all \-transport) ];
.Ve
.SS "\s-1LOGGING SIGNALS TO A FILE\s0"
.IX Subsection "LOGGING SIGNALS TO A FILE"
You can optionally provide a subroutine or callback to each signal trace you declare. Each time a signal is received, it is passed to the corresponding subroutine. For example, the following code effectively logs all fault signals to a file called fault.log:
.PP
.Vb 1
\&  use SOAP::Lite +trace => [ fault => \e&log_faults ];
\&
\&  sub log_faults {
\&    open LOGFILE,">fault.log";
\&    print LOGFILE, $_[0] . "\en";
\&    close LOGFILE;
\&  }
.Ve
.PP
You can also use a single callback for multiple signals using the code below:
.PP
.Vb 1
\&  use SOAP::Lite +trace => [ method, fault => \e&log ];
.Ve
.SS "\s-1LOGGING MESSAGE CONTENTS\s0"
.IX Subsection "LOGGING MESSAGE CONTENTS"
The transport signal is unique in the that the signal is not a text string, but the actually HTTP::Request being sent (just prior to be sent), or HTTP::Response object (immediately after it was received). The following code sample shows how to make use of this:
.PP
.Vb 1
\&  use SOAP::Lite +trace => [ transport => \e&log_message ];
\&
\&  sub log_message {
\&    my ($in) = @_;
\&    if (class($in) eq "HTTP::Request") {
\&      # do something...
\&      print $in\->contents; # ...for example
\&    } elsif (class($in) eq "HTTP::Response") {
\&      # do something
\&    }
\&  }
.Ve
.SS "\s-1ON_DEBUG\s0"
.IX Subsection "ON_DEBUG"
The \f(CW\*(C`on_debug\*(C'\fR method is available, as in:
.PP
.Vb 5
\&  use SOAP::Lite;
\&  my $client = SOAP::Lite
\&    \->uri($NS)
\&    \->proxy($HOST)
\&    \->on_debug( sub { print @_; } );
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Special thanks to O'Reilly publishing which has graciously allowed SOAP::Lite to republish and redistribute large excerpts from \fIProgramming Web Services with Perl\fR, mainly the SOAP::Lite reference found in Appendix B.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2004 Paul Kulchenko. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS"
.IX Header "AUTHORS"
Paul Kulchenko (paulclinger@yahoo.com)
.PP
Randy J. Ray (rjray@blackperl.com)
.PP
Byrne Reese (byrne@majordojo.com)
