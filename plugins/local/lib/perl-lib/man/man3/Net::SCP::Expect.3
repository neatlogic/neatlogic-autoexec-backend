.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Expect 3"
.TH Expect 3 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SCP::Expect \- Wrapper for scp that allows passwords via Expect.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBExample 1 \- uses login method, longhand scp:\fR
.PP
.Vb 3
\& my $scpe = Net::SCP::Expect\->new;
\& $scpe\->login(\*(Aquser name\*(Aq, \*(Aqpassword\*(Aq);
\& $scpe\->scp(\*(Aqfile\*(Aq,\*(Aqhost:/some/dir\*(Aq);
.Ve
.PP
\&\fBExample 2 \- uses constructor, shorthand scp:\fR
.PP
.Vb 2
\& my $scpe = Net::SCP::Expect\->new(host=>\*(Aqhost\*(Aq, user=>\*(Aquser\*(Aq, password=>\*(Aqxxxx\*(Aq);
\& $scpe\->scp(\*(Aqfile\*(Aq,\*(Aq/some/dir\*(Aq); # \*(Aqfile\*(Aq copied to \*(Aqhost\*(Aq at \*(Aq/some/dir\*(Aq
.Ve
.PP
\&\fBExample 3 \- copying from remote machine to local host\fR
.PP
.Vb 2
\& my $scpe = Net::SCP::Expect\->new(user=>\*(Aquser\*(Aq,password=>\*(Aqxxxx\*(Aq);
\& $scpe\->scp(\*(Aqhost:/some/dir/filename\*(Aq,\*(Aqnewfilename\*(Aq);
.Ve
.PP
\&\fBExample 4 \- uses login method, longhand scp, IPv6 compatible:\fR
.PP
.Vb 3
\& my $scpe = Net::SCP::Expect\->new;
\& $scpe\->login(\*(Aquser name\*(Aq, \*(Aqpassword\*(Aq);
\& $scpe\->scp(\*(Aqfile\*(Aq,\*(Aq[ipv6\-host]:/some/dir\*(Aq); # <\-\- Important: scp() with explicit IPv6 host in to or from address must use square brackets
.Ve
.PP
See the \fB\fBscp()\fB\fR method for more information on valid syntax.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
Expect 1.14.  May work with earlier versions, but was tested with 1.14 (and now 1.15)
only.
.PP
Term::ReadPassword 0.01 is required if you want to execute the interactive test script.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is simply a wrapper around the scp call.  The primary difference between
this module and \fINet::SCP\fR is that you may send a password programmatically, instead
of being forced to deal with interactive sessions.
.SH "USAGE"
.IX Header "USAGE"
.SS "\fBNet::SCP::Expect\->new(\fP\fIoption=>val\fP, ...\fB)\fP"
.IX Subsection "Net::SCP::Expect->new(option=>val, ...)"
Creates a new object and optionally takes a series of options (see \*(L"\s-1OPTIONS\*(R"\s0 below).
All \*(L"\s-1OBJECT METHODS\*(R"\s0 apply to this constructor.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.SS "\fBauto_yes\fP"
.IX Subsection "auto_yes"
Set this to 1 if you want to automatically pass a 'yes' string to
any yes or no questions that you may encounter before actually being asked for
a password, e.g. \*(L"Are you sure you want to continue connecting (yes/no)?\*(R" for
first time connections, etc.
.SS "\fBerror_handler(\fP\fIsub ref\fP\fB)\fP"
.IX Subsection "error_handler(sub ref)"
This sets up an error handler to catch any problems with a call to '\fBscp()\fR'.  If you
do not define an error handler, then a simple '\fBcroak()\fR' call will occur, with the last
line sent to the terminal added as part of the error message.
.PP
The method will immediately return with a void value after your error handler has been
called.
.SS "\fBhost(\fP\fIhost\fP\fB)\fP"
.IX Subsection "host(host)"
Sets the host for the current object
.SS "\fBlogin(\fP\fIlogin, password\fP\fB)\fP"
.IX Subsection "login(login, password)"
If the login and password are not passed as options to the constructor, they
must be passed with this method (or set individually \- see 'user' and 'password'
methods).  If they were already set, this method will overwrite them with the new
values.  Password will not be changed if only one argument is passed (user).
.SS "\fBpassword(\fP\fIpassword\fP\fB)\fP"
.IX Subsection "password(password)"
Sets the password for the current user, or the passphrase for the identify file if
identity_file option is specified in the constructor
.SS "\fBuser(\fP\fIuser\fP\fB)\fP"
.IX Subsection "user(user)"
Sets the user for the current object
.SS "\fBscp()\fP"
.IX Subsection "scp()"
Copies the file from source to destination.  If no host is specified, you
will be using 'scp' as an expensive form of 'cp'.
.PP
There are several valid ways to use this method
.PP
\fILocal to Remote\fR
.IX Subsection "Local to Remote"
.PP
\&\fBscp(\fR\fIsource, user@host:destination\fR\fB);\fR
.PP
\&\fBscp(\fR\fIsource, user@[ipv6\-host]:destination\fR\fB);\fR  # Same as previous, with IPv6 host
.PP
\&\fBscp(\fR\fIsource, host:destination\fR\fB);\fR # User already defined
.PP
\&\fBscp(\fR\fIsource, [ipv6\-host]:destination\fR\fB);\fR # Same as previous, with IPv6 host
.PP
\&\fBscp(\fR\fIsource, :destination\fR\fB);\fR # User and host already defined
.PP
\&\fBscp(\fR\fIsource, destination\fR\fB);\fR # Same as previous
.PP
\&\fBscp(\fR\fIsource\fR\fB);\fR # Same as previous; destination will use base name of source
.PP
\fIRemote to Local\fR
.IX Subsection "Remote to Local"
.PP
\&\fBscp(\fR\fIuser@host:source, destination\fR\fB);\fR
.PP
\&\fBscp(\fR\fIuser@[ipv6\-host]:source, destination\fR\fB);\fR # Same as previous, with IPv6 host
.PP
\&\fBscp(\fR\fIhost:source, destination\fR\fB);\fR
.PP
\&\fBscp(\fR\fI[ipv6\-host]:source, destination\fR\fB);\fR # Same as previous, with IPv6 host
.PP
\&\fBscp(\fR\fI:source, destination\fR\fB);\fR
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fBauto_quote\fR \- Auto-encapsulate all option values and scp from/to arguments in
single-quotes to insure that special characters, such as spaces in file names,
do not cause inadvertant shell exceptions.  Default is enabled.
Note: Be aware that this feature may break backward compatibility with scripts
that manually quoted input arguments to work around unquoted argument limitations
in 0.12 or earlier of this module; in such cases, try disabling it or update
your script to take advantage of the auto_quote feature.
.PP
\&\fBauto_yes\fR \- Set this to 1 if you want to automatically pass a 'yes' string to
any yes or no questions that you may encounter before actually being asked for
a password, e.g. \*(L"Are you sure you want to continue connecting (yes/no)?\*(R" for
first time connections, etc.
.PP
\&\fBcipher\fR \- Selects the cipher to use for encrypting the data transfer.
.PP
\&\fBcompress\fR \- Compression enable.  Passes the \-C flag to \fBssh\fR\|(1) to enable compression.
.PP
\&\fBforce_ipv4\fR \- Forces scp to use IPv4 addresses only.
.PP
\&\fBforce_ipv6\fR \- Forces scp to use IPv6 addresses only.
.PP
\&\fBhost\fR \- Specify the host name.  This is now useful for both local-to-remote
and remote-to-local transfers.  For IPv6 addresses, either regular or square-bracket
encapsulated host are allowed (since command-line scp normally expects IPv6
addresses to be encapsulated in square brackets).
.PP
\&\fBidentity_file\fR \- Specify the identify file to use.
.PP
\&\fBno_check\fR \- Set this to 1 if you want to turn off error checking.  Use this
if you're absolutely positive you won't encounter any errors and you want to
speed up your scp calls \- up to 2 seconds per call (based on the defaults).
.PP
\&\fBoption\fR \- Specify options from the config file.  This is the equivalent
of \-o.
.PP
\&\fBpassword\fR \- The password for the given login.  If not specified, then
identity_file must be specified or an error will occur on login.  If both
identity_file and password are specified, the password will be treated as the
passphrase for the identity file.
.PP
\&\fBport\fR \- Use the specified port.
.PP
\&\fBpreserve\fR \- Preserves modification times, access times, and modes from
the original file.
.PP
\&\fBprotocol\fR \- Specify the ssh protocol to use for scp.  The default is undef,
which simply means scp will use whatever it normally would use.
.PP
\&\fBrecursive\fR \- Set to 1 if you want to recursively copy entire directories.
.PP
\&\fBscp_path\fR \- The path for the scp binary to use, i.e.: /usr/bin/scp, defaults
to use the first scp on your \f(CW$PATH\fR variable.
.PP
\&\fBsubsystem\fR \- Specify a subsystem to invoke on the remote system.  This
option is only valid with ssh2 and openssh afaik.
.PP
\&\fBterminator\fR \- Set the string terminator that is attached to the end of the
password.  The default is a newline.
.PP
\&\fBtimeout\fR \- Sets the timeout value for your scp operation. The default
is 10 seconds.
.PP
\&\fBtimeout_auto\fR \- Sets the timeout for the 'auto_yes' option.  I separated
this from the standard timeout because generally you won't need nearly as much
time as you would for a standard timeout, otherwise your script will drag
considerably.  The default is 1 second (which should be plenty).
.PP
\&\fBtimeout_err\fR \- Sets the timeout for the additional error checking that the
module does.  Because errors come back almost instantaneously, I thought it
best to make this a separate option for the same reasons as the 'timeout_auto'
option above.  The default is 'undef'.
.PP
Setting it to any integer value means that your program will exit after that
many seconds *whether or not the operation has completed*.  Caveat programmor.
.PP
\&\fBuser\fR \- The login name you wish to use.
.PP
\&\fBverbose\fR \- Set to 1 if you want verbose output sent to \s-1STDOUT.\s0  Note that
this disables some error checking (ala no_check) because the verbose output
could otherwise be picked up by expect itself.
.SH "NOTES"
.IX Header "NOTES"
The \-q option (disable progress meter) is automatically passed to scp.
.PP
The \-B option may \s-1NOT\s0 be set.  If you don't plan to send passwords or use
identity files (with passphrases), consider using \fINet::SCP\fR instead.
.PP
In the event a new version of \fINet::SSH::Perl\fR is released that
supports scp, I recommend using that instead.  Why?  First, it should be
a more secure way to perform scp.  Second, this module is not the fastest,
even with error checking turned off.  Both reasons have to do with \s-1TTY\s0
interaction.
.PP
Also, please see the Net::SFTP module from Dave Rolsky.  If this suits
your needs, use it instead.
.SH "FUTURE PLANS"
.IX Header "FUTURE PLANS"
There are a few options I haven't implemented.  If you *really* want to
see them added, let me know and I'll see what I can do.
.PP
Add exception handling tests to the interactive test suite.
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
At least one user has reported warnings related to \s-1POD\s0 parsing with Perl 5.00503.
These can be safely ignored.  They do not appear in Perl 5.6 or later.
.PP
Probably not thread safe. See \s-1RT\s0 bug #7567 from Adam Ruck.
.SH "THANKS"
.IX Header "THANKS"
Thanks to Roland Giersig (and Austin Schutz) for the Expect module.  Very handy.
.PP
Thanks also go out to all those who have submitted bug reports and/or patches.
See the \s-1CHANGES\s0 file for specifics.
.SH "LICENSE"
.IX Header "LICENSE"
Net::SCP::Expect is licensed under the same terms as Perl itself.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
2005\-2008 Eric Rybski <rybskej@yahoo.com>,
2003\-2004 Daniel J. Berger.
.SH "CURRENT AUTHOR AND MAINTAINER"
.IX Header "CURRENT AUTHOR AND MAINTAINER"
Eric Rybski <rybskej@yahoo.com>.  Please send all module inquries to me.
.SH "ORIGINAL AUTHOR"
.IX Header "ORIGINAL AUTHOR"
Daniel Berger
.PP
djberg96 at yahoo dot com
.PP
imperator on \s-1IRC\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SCP, Net::SFTP, Net::SSH::Perl, Net::SSH2
