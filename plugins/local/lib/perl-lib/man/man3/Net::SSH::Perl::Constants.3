.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Constants 3"
.TH Net::SSH::Perl::Constants 3 "2021-05-28" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSH::Perl::Constants \- Exportable constants
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::SSH::Perl::Constants qw( constants );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Constants\fR provides a list of common and
useful constants for use in communicating with an sshd
server, etc.
.PP
None of the constants are exported by default; you have to
explicitly ask for them. Some of the constants are grouped
into bundles that you can grab all at once, or you can just
take the individual constants, one by one.
.PP
If you wish to import a group, your \fIuse\fR statement should
look something like this:
.PP
.Vb 1
\&    use Net::SSH::Perl::Constants qw( :group );
.Ve
.PP
Here are the groups:
.IP "\(bu" 4
msg
.Sp
All of the \s-1MSG\s0 constants. In the \s-1SSH\s0 packet layer protocol,
each packet is identified by its type; for example, you have
a packet type for starting \s-1RSA\s0 authentication, a different
type for sending a command, etc. The \s-1MSG\s0 constants are used
when creating a new packet, then:
.Sp
.Vb 1
\&    my $packet = $ssh\->packet_start( I<msg_constant> );
.Ve
.Sp
See the \fINet::SSH::Perl::Packet\fR and \fINet::SSH::Perl\fR docs
for details.
.Sp
\&\fINet::SSH::Perl\fR doesn't support all of the features of
the ssh client, so it doesn't need all of its \s-1MSG\s0
constants. For a full list of such constants, and an
explanation of each, see the \s-1SSH RFC.\s0
.Sp
Here's the list of \s-1MSG\s0 constants supported by \fINet::SSH::Perl\fR:
\&\s-1SSH_MSG_NONE, SSH_MSG_DISCONNECT, SSH_SMSG_PUBLIC_KEY,
SSH_CMSG_SESSION_KEY, SSH_CMSG_USER, SSH_CMSG_AUTH_RHOSTS,
SSH_CMSG_AUTH_RSA, SSH_SMSG_AUTH_RSA_CHALLENGE,
SSH_CMSG_AUTH_RSA_RESPONSE, SSH_CMSG_AUTH_PASSWORD,
SSH_CMSG_EXEC_SHELL, SSH_CMSG_EXEC_CMD, SSH_SMSG_SUCCESS,
SSH_SMSG_FAILURE, SSH_CMSG_STDIN_DATA, SSH_SMSG_STDOUT_DATA,
SSH_SMSG_STDERR_DATA, SSH_CMSG_EOF, SSH_SMSG_EXITSTATUS,
SSH_MSG_IGNORE, SSH_CMSG_EXIT_CONFIRMATION,
SSH_CMSG_AUTH_RHOSTS_RSA, SSH_MSG_DEBUG,
SSH_CMSG_REQUEST_COMPRESSION.\s0
.IP "\(bu" 4
hosts
.Sp
The \s-1HOST\s0 constants: \s-1HOST_OK, HOST_NEW,\s0 and \s-1HOST_CHANGED.\s0
These are returned from the \f(CW\*(C`_check_host_in_hostfile\*(C'\fR
routine in \fINet::SSH::Perl::Util\fR. See those docs for
that routine for an explanation of the meaning of these
constants.
.IP "\(bu" 4
agent
.Sp
The \s-1AGENT\s0 constants, used when talking to an authentication
agent: \s-1SSH_AGENTC_REQUEST_RSA_IDENTITIES,
SSH_AGENT_RSA_IDENTITIES_ANSWER, SSH_AGENTC_RSA_CHALLENGE,
SSH_AGENT_RSA_RESPONSE, SSH_AGENT_FAILURE, SSH_AGENT_SUCCESS,
SSH2_AGENTC_REQUEST_IDENTITIES, SSH2_AGENT_IDENTITIES_ANSWER,
SSH2_AGENTC_SIGN_REQUEST, SSH2_AGENT_SIGN_RESPONSE.\s0
.PP
Other exportable constants, not belonging to a group, are:
.IP "\(bu" 4
\&\s-1PROTOCOL_MAJOR\s0
.IP "\(bu" 4
\&\s-1PROTOCOL_MINOR\s0
.Sp
These two constants describe the version of the protocol
supported by this \s-1SSH\s0 client (ie., \fINet::SSH::Perl\fR).
They're used when identifying the client to the server
and vice versa.
.IP "\(bu" 4
\&\s-1PRIVATE_KEY_ID_STRING\s0
.Sp
A special \s-1ID\s0 string written to private key files; if
the \s-1ID\s0 string in the file doesn't match this, we stop
reading the private key file.
.IP "\(bu" 4
\&\s-1MAX_PACKET_SIZE\s0
.Sp
The maximum size of a packet in the packet layer.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
