.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Cipher::DES3 3"
.TH Net::SSH::Perl::Cipher::DES3 3 "2021-02-09" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSH::Perl::Cipher::DES3 \- Wrapper for SSH 3DES support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Net::SSH::Perl::Cipher;
\&    my $cipher = Net::SSH::Perl::Cipher\->new(\*(AqDES3\*(Aq, $key);
\&    print $cipher\->encrypt($plaintext);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Cipher::DES3\fR provides 3DES encryption
support for \fINet::SSH::Perl\fR. To do so it wraps around
\&\fICrypt::DES\fR, a C/XS implementation of the \s-1DES\s0 algorithm.
.PP
The 3DES (three-key triple-DES) algorithm used here differs
based on the \s-1SSH\s0 protocol being used. \s-1SSH1\s0 uses 3DES in
inner \s-1CBC\s0 mode, meaning that there are three \s-1CBC\s0 objects,
and each \s-1CBC\s0 object is paired with a \s-1DES\s0 object and key.
.PP
\&\s-1SSH2\s0 uses 3DES in outer \s-1CBC\s0 mode; this uses one \s-1CBC\s0 object
wrapped around a \s-1DES\-EDE3\s0 object (also included in this
library); that object contains three \s-1DES\s0 ciphers with three
different keys. Each encrypt operation is actually
encrypt-decrypt-encrypt with the three \s-1DES\s0 keys; decrypt
is actually decrypt-encrypt-decrypt with the \s-1DES\s0 keys.
.PP
The key length for both implementations is 24 bytes.
The first 8 bytes of the key are used as the first \s-1DES\s0
key, the second 8 bytes for the second key, etc. If the
key \fI\f(CI$key\fI\fR that you pass to \fInew\fR is only 16 bytes, the
first 8 bytes of \fI\f(CI$key\fI\fR will be used as the key for both
the first and third \s-1DES\s0 ciphers.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
