.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::SSH1 3"
.TH Net::SSH::Perl::SSH1 3 "2021-07-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SSH::Perl::SSH1 \- SSH1 implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::SSH::Perl;
\&    my $ssh = Net::SSH::Perl\->new($host, protocol => 1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::SSH1\fR implements the \s-1SSH1\s0 protocol. It is a
subclass of \fINet::SSH::Perl\fR, and implements the interface
described in the documentation for that module. In fact, your
usage of this module should be completely transparent; simply
specify the proper \fIprotocol\fR value (\f(CW1\fR) when creating your
\&\fINet::SSH::Perl\fR object, and the \s-1SSH1\s0 implementation will be
loaded automatically.
.PP
\&\s-1NOTE:\s0 Of course, this is still subject to protocol negotiation
with the server; if the server doesn't support \s-1SSH1,\s0 there's
not much the client can do, and you'll get a fatal error if
you use the above \fIprotocol\fR specification (\f(CW1\fR).
.SH "USAGE"
.IX Header "USAGE"
\&\fINet::SSH::Perl::SSH1\fR shares the interface described by
\&\fINet::SSH::Perl\fR. In addition, you can call the following
\&\*(L"advanced\*(R" methods on a \fINet::SSH::Perl::SSH1\fR object, that
\&\fIdo not\fR apply to a regular \fINet::SSH::Perl\fR object.
.ie n .SS "$ssh\->set_cipher($cipher_name)"
.el .SS "\f(CW$ssh\fP\->set_cipher($cipher_name)"
.IX Subsection "$ssh->set_cipher($cipher_name)"
Sets the cipher for the \s-1SSH\s0 session \fI\f(CI$ssh\fI\fR to \fI\f(CI$cipher_name\fI\fR
(which must be a valid cipher name), and turns on encryption
for that session.
.ie n .SS "$ssh\->send_cipher"
.el .SS "\f(CW$ssh\fP\->send_cipher"
.IX Subsection "$ssh->send_cipher"
Returns the \*(L"send\*(R" cipher object. This is the object that encrypts
outgoing data.
.PP
If it's not defined, encryption is not turned on for the session.
.ie n .SS "$ssh\->receive_cipher"
.el .SS "\f(CW$ssh\fP\->receive_cipher"
.IX Subsection "$ssh->receive_cipher"
Returns the \*(L"receive\*(R" cipher object. This is the object that
decrypts incoming data.
.PP
If it's not defined, encryption is not turned on for the session.
.PP
\&\s-1NOTE:\s0 the send and receive ciphers and two \fIdifferent\fR objects,
each with its own internal state (initialization vector, in
particular). Thus they cannot be interchanged.
.ie n .SS "$ssh\->compression([ $level ])"
.el .SS "\f(CW$ssh\fP\->compression([ \f(CW$level\fP ])"
.IX Subsection "$ssh->compression([ $level ])"
Without arguments, returns the current compression level for the
session. If given an argument \fI\f(CI$level\fI\fR, sets the compression level
and turns on compression for the session.
.PP
Note that this should \fInot\fR be used to turn compression off. In fact,
I don't think there's a way to turn compression off. But in other
words, don't try giving this method a value of 0 and expect that to
turn off compression. It won't.
.PP
If the return value of this method is undefined or 0, compression
is turned off.
.ie n .SS "$ssh\->session_key"
.el .SS "\f(CW$ssh\fP\->session_key"
.IX Subsection "$ssh->session_key"
Returns the session key, which is simply 32 bytes of random
data and is used as the encryption/decryption key.
.SS "\s-1AUTHOR & COPYRIGHTS\s0"
.IX Subsection "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
