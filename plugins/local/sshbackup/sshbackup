#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/../lib/perl-lib/lib/perl5";
use lib "$FindBin::Bin/../lib";

use strict;
use Getopt::Long;
use JSON;
use AutoExecUtils;
use SSHExpect;
use File::Spec;

sub usage {
    my $pname = $FindBin::Script;
    print("$pname --node <node> --vendor --backupdir <backupdir path> \n");
    exit(1);
}

sub saveCfg {
    my ( $path, $host, $result ) = @_;
    my $time = `date +%Y-%m-%d_%H:%M:%S`;
    chomp($time);
    my $dir = File::Spec->catfile( $path, $host );
    if ( !-e $dir ) {
        mkdir $dir;
    }
    my $fileName = File::Spec->catfile( $dir, "$time.txt" );
    open( my $fh, '>', $fileName ) or die "can't open $fileName $!";
    print $fh $result;
    close $fh;
}

sub defindVendor {
    my ($vendor) = @_;
    ###############################
    #cfgCmd : 查看交换机配置命令
    #clsCmd : 全屏打印（不出现 ----  More ----）
    #prompt : 交换机登录成功提示
    #startLine : 备份内容从第几行开始，默认为0
    ##############################
    my $vendorInfo = {
        "h3c"       => { "cfgCmd" => "display current-configuration", clsCmd => 'screen-length disable',     prompt => '[\]\$\>]\s*$',   startLine => 0 },
        "cisco"     => { "cfgCmd" => "show run",                      clsCmd => 'terminal length 0',         prompt => '[\]\$\>\#]\s*$', startLine => 0 },
        "hillstone" => { "cfgCmd" => "show configuration",            clsCmd => 'terminal length 0',         prompt => '',               startLine => 0 },
        "huawei"    => { "cfgCmd" => "display current-configuration", clsCmd => 'screen-length 0 temporary', prompt => '[\]\$\>]\s*$',   startLine => 0 }
    };
    my $info = $vendorInfo->{$vendor};
    return $info;
}

sub main {
    $| = 1;    #不对输出进行buffer，便于实时看到输出日志
    AutoExecUtils::setEnv();

    my ( $ishelp, $node, $vendor, $backupdir );

    GetOptions(
        'help'     => \$ishelp,
        'node:s'   => \$node,
        'vendor:s' => \$vendor,
        'backupdir:s'   => \$backupdir
    );

    my $nodeInfo  = {};
    my $hasOptErr = 0;
    if ( not defined($node) ) {
        $node = $ENV{AUTOEXEC_NODE};
    }

    if ( not defined($node) or $node eq '' or not defined($vendor) or $vendor eq '' ) {
        $hasOptErr = 1;
    }
    else {
        $nodeInfo = from_json($node);
    }

    if ( not defined($backupdir) or $backupdir eq '' ) {
        $hasOptErr = 1;
    }

    if ( $hasOptErr == 1 ) {
        usage();
    }

    my $vendorInfo = defindVendor($vendor);
    if ( not defined($vendorInfo) ) {
        print("ERROR:: not defined $vendor model operate .\n");
        exit(1);
    }
    my ( $host, $port, $username, $password );
    $host     = $nodeInfo->{'host'};
    $port     = $nodeInfo->{'port'};
    $username = $nodeInfo->{'username'};
    $password = $nodeInfo->{'password'};

    my $clsCmd    = $vendorInfo->{clsCmd};
    my $cfgCmd    = $vendorInfo->{cfgCmd};
    my $prompt    = $vendorInfo->{prompt};
    my $startline = $vendorInfo->{startLine};
    if ( not defined($startline) ) {
        $startline = 0;
    }
    print("INFO::config back start.\n");
    my $ssh = SSHExpect->new( { host => $host, port => $port, username => $username, password => $password, PROMPT => $prompt } );
    $ssh->login();
    $ssh->configTerminal($clsCmd);
    my $rsConfig = $ssh->runCmd( $cfgCmd, $startline );
    print("INFO::$rsConfig");
    saveCfg( $backupdir, $host, $rsConfig );
    print("INFO::config backup done.\n");
}

main();

