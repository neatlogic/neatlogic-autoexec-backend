#!/usr/bin/python

from unittest import result
import TelnetClient
import argparse
import sys
import os
import json
import time
from datetime import date

binPaths = os.path.split(os.path.realpath(__file__))
libPath = os.path.realpath(binPaths[0]+'/../lib')
sys.path.append(libPath)


def usage():
    pname = os.path.basename(__file__)
    print(pname + " --timeout <timeout> --backupdir <backupdir> --vendor <vendor> --exitCmd <exitCmd> ")
    exit(1)

def saveCfg(path , host ,content ):
    path = path + '/' + host 
    today = time.strftime("%Y-%m-%d_%H:%M:%S", time.localtime())
    filename = today + ".txt"
    if( os.path.exists(path) == False ):
        os.makedirs(path)
    os.chdir(path)
    f = open( filename , 'w' ,encoding='utf-8')
    f.write(content)
    f.close()
    print("INFO::save backup file: {} done.\n".format(filename))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--node', default='', help='目标节点JSON')
    parser.add_argument('--vendor', default='', help='设备厂商')
    parser.add_argument('--backupdir', default='', help='备份目录')
    parser.add_argument('--timeout', default=10, help='连接超时(秒)')
    parser.add_argument('--exitCmd', default='exit', help='设备登录退出命令')
    parser.add_argument('--startLine', default=0, help='移除内容x行的无效输出')
    parser.add_argument('--verbose', default=0, help='显示明细')

    args = parser.parse_args()

    node = args.node
    backupdir = args.backupdir
    vendor = args.vendor
    timeout = args.timeout
    exitCmd = args.exitCmd
    startLine = args.startLine
    verbose = args.verbose

    if timeout == None or timeout == '' :
        timeout = 10

    hasOptErr = 0
    if node is None or node == '':
        node = os.getenv('AUTOEXEC_NODE')
    
    if(backupdir == None or backupdir == ''):
        print("ERROR: Must define backup directory by option --backupdir.\n");
        hasOptErr = 1
        
    if(vendor == None or vendor == ''):
        print("ERROR: Must define vendor by option --vendor.\n")
        hasOptErr = 1

    if(node == None or node == ''):
        print("ERROR: Must define backup node by option --node.\n");
        hasOptErr = 1

    vendorInfo = {
        "h3c"       : { "cfgCmd" : "display current-configuration", "clsCmd" : 'screen-length disable'  },
        "cisco"     : { "cfgCmd" : "show run",                      "clsCmd" : 'terminal length 0'      },
        "hillstone" : { "cfgCmd" : "show configuration",            "clsCmd" : 'terminal length 0'      },
        "huawei"    : { "cfgCmd" : "display current-configuration", "clsCmd" : 'screen-length 0 temporary' }
    }

    if ( vendor not in vendorInfo ) :
        print("ERROR:: {} model not support .\n".format(vendor))
        hasOptErr = 1 
    
    if(hasOptErr == 1):
        usage()

    node = json.loads(node)
    ip = node['host']
    port = node['protocolPort']
    user = node['username']
    password = node['password']

    if port == None or port == '' :
        port = 23

    cfgCmd = vendorInfo[vendor]['cfgCmd']
    clsCmd = vendorInfo[vendor]['clsCmd']

    args = {} 
    args['ip']=ip
    args['port']=port
    args['user']=user
    args['password']=password
    args['timeout']=timeout
    args['backupdir']=backupdir
    args['startLine']=startLine
    args['verbose']=verbose
    args['exitCmd']=exitCmd
    args['cfgCmd']=cfgCmd
    args['clsCmd']=clsCmd

    client = TelnetClient.TelnetClient(args )
    if client.login():
        client.configTerminal()
        cfgResult = client.execCmd()
        saveCfg(backupdir , ip , cfgResult)
        client.logout()
        print("INFO:: {} config backup success.\n".format(vendor))
    else:
        print("ERROR:: {} config backup failed.\n".format(vendor))
