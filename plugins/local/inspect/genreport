#!/usr/bin/python
# -*- coding:UTF-8 -*-

import AutoExecUtils
import os
import traceback
import datetime
import argparse
import sys
import json
from bson.json_util import dumps, loads
from DSLTools import Parser, Interpreter


def usage():
    pname = os.path.basename(__file__)
    print(pname + " --outputfile <path> ")
    exit(1)


def getLevelNo(level):
    levelNo = 0
    if level == 'WARN':
        levelNo = 1
    elif level == 'CRITICAL':
        levelNo = 2
    elif level == 'FATAL':
        levelNo = 3
    return levelNo


def getAlertSummarized(alerts):
    totalCount = 0
    gLevel = 'NORMAL'
    alertOutline = {}
    for alert in alerts:
        totalCount = totalCount + 1
        level = alert['ruleLevel']
        if level not in alertOutline:
            alertOutline[level] = 1
        else:
            alertOutline[level] = alertOutline[level] + 1
        if getLevelNo(gLevel) < getLevelNo(level):
            gLevel = level

    alertSummarized = {}
    alertSummarized['totalCount'] = totalCount
    alertSummarized['status'] = gLevel
    return {"alertOutline": alertOutline, 'alertSummarized': alertSummarized}


def getMetricsDef(db, objCat, objType):
    inspectDefCollection = db['_inspectdef']
    collectName = 'COLLECT_' + objCat.upper()
    inspectDef = inspectDefCollection.find_one({'collection': collectName,
                                                'filter._OBJ_TYPE': objType}
                                               )
    if inspectDef is None:
        inspectDef = inspectDefCollection.find_one({'collection': collectName,
                                                    'filter._OBJ_TYPE': None}
                                                   )

    if inspectDef is None:
        return {}

    # 比较AST抽象语法树结构生成时间根规则修改时间，如果老了则进行AST分析并保存和更新到DB
    ruleNeedUpdate = False
    currentTime = datetime.datetime.utcnow()
    for ruleDef in inspectDef['thresholds']:
        updateTime = None
        if updateTime in ruleDef:
            ruleDef['_updatetime']
        else:
            updateTime = currentTime

        astGenTime = None
        if astGenTime in ruleDef:
            astGenTime = ruleDef['_astgentime']

        if astGenTime is None or updateTime is None or astGenTime < updateTime:
            ruleDef['_astgentime'] = currentTime
            ast = Parser(ruleDef['rule'])
            ruleDef['AST'] = ast.asList()
            #print(json.dumps(ast.asList(), sort_keys=True, indent=4))
            ruleNeedUpdate = True

    if ruleNeedUpdate:
        _id = inspectDef['_id']
        del(inspectDef['_id'])
        inspectDefCollection.update_one({'_id': _id},
                                        {'$set':
                                         {'thresholds': inspectDef['thresholds']}
                                         })

    return inspectDef


def getInspectData(nodeInfo):
    ip = nodeInfo['host']
    port = None
    if 'port' in nodeInfo:
        port = nodeInfo['port']

    availability = True
    errorMessage = ''
    dataRecords = []

    nodeData = {}
    # 加载上一个cmdb收集步骤的output数据，CMDB采集可能返回多条记录，需要抽取匹配的记录
    outputData = AutoExecUtils.loadNodeOutput()
    if outputData is None:
        print("WARN: Node output data is empty.")
    else:
        for key, value in outputData.items():
            if key.startswith("inspect/"):
                # 这一步是抽取可用性检测插件（urlcheck,sshcheck,agentcheck,tcpcheck）的返回结果
                collectData = value['DATA']
                if 'AVAILABILITY' in collectData:
                    if collectData['AVAILABILITY'] == 0:
                        availability = False
                        if 'ERROR_MESSAGE' in collectData:
                            errorMessage = collectData['ERROR_MESSAGE']
                continue
            elif not key.startswith("cmdbcollect/"):
                continue

            collectData = value['DATA']
            if collectData is None:
                print('WARN: Plugin {} did not return collect data.'.format(key))
                continue

        for data in collectData:
            isMalformData = 0
            if 'PK' not in data:
                isMalformData = 1
                print('WARN: Data not defined PK.')
            if '_OBJ_CATEGORY' not in data:
                isMalformData = 1
                print('WARN: Data not defined _OBJ_CATEGORY.')
            if isMalformData == 1:
                print(json.dumps(data))
                continue

            # 如果数据的归属类别跟定义和节点信息一致，则抽取并返回数据记录
            if data['MGMT_IP'] == ip:
                if port is not None:
                    if 'PORT' not in data or data['PORT'] != port:
                        continue

                nodeData = data
                nodeData['_availability'] = availability
                nodeData['_error_message'] = errorMessage
                dataRecords.append(nodeData)
                break

        if not dataRecords:
            nodeData = {}
            nodeData['_availability'] = availability
            nodeData['_error_message'] = errorMessage
            dataRecords.append(nodeData)

        return dataRecords


def inspectData(nodeInfo):
    rptDataRecords = []
    currentTime = datetime.datetime.utcnow()

    inspectDefMap = {}
    objCatRulesMap = {}
    objCatFieldsMap = {}
    # 获取cmdb对单个节点采集的数据
    dataRecords = getInspectData(nodeInfo)
    for dataCollected in dataRecords:
        if dataCollected is not None:
            inspectDef = {}
            inspectRulesMap = {}
            needFieldsMap = {}

            availability = dataCollected['_availability']
            errorMessage = dataCollected['_error_message']
            needFieldsMap['_availability'] = 1
            needFieldsMap['_error_message'] = 1

            objCat = dataCollected['_OBJ_CATEGORY']
            objType = dataCollected['_OBJ_TYPE']
            if objCat not in inspectDefMap:
                inspectDef = getMetricsDef(db, objCat, objType)
                inspectDefMap[objCat] = inspectDef

                for inspectRule in inspectDef['thresholds']:
                    inspectRulesMap[inspectRule['name']] = inspectRule
                objCatRulesMap[objCat] = inspectRulesMap

                for fieldDef in inspectDef['fields']:
                    if fieldDef['selected'] == 1:
                        needFieldsMap[fieldDef['name']] = 1
                objCatFieldsMap[objCat] = needFieldsMap

            inspectRules = inspectDef['thresholds']

            alerts = []
            matchedFields = None
            for inspectRule in inspectRules:
                ast = inspectRule['AST']
                interpreter = Interpreter(AST=ast, ruleName=inspectRule['name'], ruleLevel=inspectRule['level'], data=dataCollected)
                ruleAlerts = interpreter.resolve()
                alerts.extend(ruleAlerts)
                # alerts的数据结构
                # [
                #     {
                #         "jsonPath": "$.DISKS[0].CAPACITY",
                #         "ruleLevel": "WARN",
                #         "ruleName": "测试"
                #     },
                #     {
                #         "jsonPath": "$.DISKS[1].CAPACITY",
                #         "ruleLevel": "WARN",
                #         "ruleName": "测试"
                #     }
                # ]

            rptData = {'RESOURCE_ID': nodeInfo['resourceId'],
                       'MGMT_IP': nodeInfo['host'],
                       }
            inspectResult = {}
            inspectResult['name'] = inspectDef['name']

            if 'port' in nodeInfo:
                rptData['PORT'] = nodeInfo['port']
            else:
                rptData['PORT'] = None

            if alerts:
                # 如果存在匹配了告警规则的rule，则存放到报告中，用于匹配规则的展示
                alertThresHolds = {}
                for alert in alerts:
                    ruleName = alert['ruleName']
                    alertThresHolds[ruleName] = inspectRulesMap[ruleName]
                inspectResult['thresholds'] = alertThresHolds
                inspectResult['alerts'] = alerts
                inspectResult['hasAlert'] = True
            else:
                inspectResult['thresholds'] = {}
                inspectResult['alerts'] = []
                inspectResult['hasAlert'] = False

            if not availability:
                inspectResult['hasAlert'] = True
                inspectResult['alerts'].append({
                    "jsonPath": "$._availability",
                    "ruleLevel": "CRITICAL",
                    'ruleName': "可用性告警"
                })
                inspectResult['alerts'].append({
                    "jsonPath": "$._error_message",
                    "ruleLevel": "CRITICAL",
                    'ruleName': "可用性告警"
                })

            alertSum = getAlertSummarized(inspectResult['alerts'])
            alertSummarized = alertSum['alertSummarized']
            inspectResult['alertOutline'] = alertSum['alertOutline']
            inspectResult['totalCount'] = alertSummarized['totalCount']
            inspectResult['status'] = alertSummarized['status']
            rptData['_inspect_result'] = inspectResult

            # 抽取巡检定义里需要的属性字段到报告中
            needFields = objCatFieldsMap[objCat]
            for needField in needFields:
                if needField in dataCollected:
                    rptData[needField] = dataCollected[needField]

            rptDataRecords.append(rptData)
    return rptDataRecords


def saveReport(db, ciType, resourceId, rptData):
    rptTable = 'INSPECT_REPORTS'
    rptCollection = db[rptTable]

    currentTime = datetime.datetime.utcnow()
    rptData['_report_time'] = currentTime
    primaryKey = {'RESOURCE_ID': rptData['RESOURCE_ID']}

    rptCollection.replace_one(primaryKey, rptData, upsert=True)
    rptCollection.create_index([('RESOURCE_ID', 1)], name='idx_pk')
    print('INFO: Save report data success.')
    saveHisReport(db, ciType, resourceId, rptData)
    AutoExecUtils.updateInspectStatus(ciType, resourceId, rptData['_inspect_result']['status'], rptData['_inspect_result']['totalCount'])
    print('INFO: Update inspect status for node success.')


def saveHisReport(db, ciType, resourceId, rptData):
    rptTable = 'INSPECT_REPORTS_HIS'
    rptCollection = db[rptTable]

    rptCollection.insert(rptData)
    rptCollection.create_index([('RESOURCE_ID', 1), ('_report_time', 1)], name='idx_pk')
    rptCollection.create_index([('_report_time', 1)], name='idx_ttl', expireAfterSeconds=7776000)
    print('INFO: Save report history data success.')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--outputfile', default='', help='Output json file path for node')
    parser.add_argument('--node', default='', help='Execution node json')
    args = parser.parse_args()
    outputPath = args.outputfile
    node = args.node

    try:
        nodeInfo = {}
        hasOptError = False
        if node is None:
            node = os.getenv('AUTOEXEC_NODE')
        if node is None or node == '':
            print("ERROR: Can not find node definition.\n")
            hasOptError = True
        else:
            nodeInfo = json.loads(node)

        if outputPath is None or outputPath == '':
            outputPath = os.getenv('NODE_OUTPUT_PATH')
        else:
            os.environ['NODE_OUTPUT_PATH'] = outputPath

        if outputPath is None:
            print("ERROR: Must set environment variable NODE_OUTPUT_PATH or defined option --outputfile.\n")
            hasOptError = True

        if hasOptError:
            usage()

        ciType = nodeInfo['nodeType']
        resourceId = nodeInfo['resourceId']
        (dbclient, db) = AutoExecUtils.getDB()

        rptDataRecords = inspectData(nodeInfo)
        for rptData in rptDataRecords:
            saveReport(db, ciType, resourceId, rptData)

    except Exception as ex:
        print('ERROR: Unknow Error, {}'.format(traceback.format_exc()))
        exit(-1)
    finally:
        if dbclient is not None:
            dbclient.close()
