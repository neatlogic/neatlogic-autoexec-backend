#!/usr/bin/python
# -*- coding:UTF-8 -*-

import AutoExecUtils
import os
import traceback
import datetime
import argparse
import sys
import json
from bson.json_util import dumps, loads
from DSLTools import Parser, Interpreter


def usage():
    pname = os.path.basename(__file__)
    print(pname + " --outputfile <path> ")
    exit(1)


def getMetricsDef(db, objCat, objType):
    inspectDefCollection = db['_inspectDef']
    inspectDef = inspectDefCollection.find_one({'collection': objCat,
                                                'filter': {'$in': objType}},
                                               {'_id': False}
                                               )
    return inspectDef


def getInspectData(nodeInfo):
    ip = nodeInfo['host']
    port = None
    if 'port' in nodeInfo:
        port = nodeInfo['port']

    availability = 1
    errorMessage = ''
    dataRecords = []

    nodeData = {}
    # 加载上一个cmdb收集步骤的output数据，CMDB采集可能返回多条记录，需要抽取匹配的记录
    outputData = AutoExecUtils.loadNodeOutput()
    if outputData is None:
        print("WARN: Node output data is empty.")
    else:
        for key, value in outputData.items():
            if key.startswith("inspect/"):
                collectData = value['DATA']
                if 'AVAILABILITY' in collectData:
                    if collectData['AVAILABILITY'] == 0:
                        availability = 0
                        if 'ERROR_MESSAGE' in collectData:
                            errorMessage = collectData['ERROR_MESSAGE']
                continue
            elif not key.startswith("cmdbcollect/"):
                continue

            collectData = value['DATA']
            if collectData is None:
                print('WARN: Plugin {} did not return collect data.'.format(key))
                continue

        for data in collectData:
            isMalformData = 0
            if 'PK' not in data:
                isMalformData = 1
                print('WARN: Data not defined PK.')
            if '_OBJ_CATEGORY' not in data:
                isMalformData = 1
                print('WARN: Data not defined _OBJ_CATEGORY.')
            if isMalformData == 1:
                print(json.dumps(data))
                continue

            # 如果数据的归属类别跟定义和节点信息一致，则抽取并返回数据记录
            if data['MGMT_IP'] == ip:
                if port is not None:
                    if 'PORT' not in data or data['PORT'] != port:
                        continue

                nodeData = data
                nodeData['AVAILABILITY'] = availability
                nodeData['ERROR_MESSAGE'] = ''
                dataRecords.append(nodeData)
                break

        return dataRecords


def inspectData(nodeInfo):
    rptDataRecords = []
    currentTime = datetime.datetime.utcnow()

    inspectDefMap = {}
    objCatRulesMap = {}
    objCatFieldsMap = {}
    # 获取cmdb对单个节点采集的数据
    dataRecords = getInspectData(nodeInfo)
    for dataCollected in dataRecords:
        if dataCollected is not None:
            inspectDef = {}
            inspectRulesMap = {}
            needFieldsMap = {}

            objCat = dataCollected['_OBJ_CAT']
            objType = dataCollected['_OBJ_TYPE']
            if objCat not in inspectDefMap:
                inspectDef = getMetricsDef(db, objCat, objType)
                inspectDefMap[objCat] = inspectDef

                for inspectRule in inspectDef['thresholds']:
                    inspectRulesMap[inspectRule['name']] = inspectRule
                objCatRulesMap[objCat] = inspectRulesMap

                for fieldDef in inspectDef['fields']:
                    if fieldDef['selected'] == 1:
                        needFieldsMap[fieldDef['name']] = 1
                objCatFieldsMap[objCat] = needFieldsMap

            inspectRules = inspectDef['thresholds']

            matchedFields = None
            for inspectRule in inspectRules:
                ast = Parser(inspectRule['rule'])
                #print(json.dumps(ast.asList(), sort_keys=True, indent=4))
                interpreter = Interpreter(AST=ast.asList(), ruleName=inspectRule['name'], ruleLevel=inspectRule['level'], data=dataCollected)
                alerts = interpreter.resolve()

            rptData = {'RESOURCE_ID': nodeInfo['resourceId'],
                       'MGMT_IP': nodeInfo['host'],
                       'PORT': nodeInfo['port'],
                       'INSPECT_STATUS': 'Normal'
                       }
            if alerts:
                alertThresHolds = {}
                for alert in alerts:
                    ruleName = alert['ruleName']
                    alertThresHolds[ruleName] = inspectRulesMap[ruleName]
                rptData['_thresholds'] = alertThresHolds
                rptData['_alerts'] = alerts
            else:
                rptData['_thresholds'] = {}
                rptData['_alerts'] = []

            needFields = objCatFieldsMap[objCat]
            for needField in needFields:
                if needField in dataCollected:
                    rptData[needField] = dataCollected[needField]

            rptDataRecords.append(rptData)
    return rptDataRecords


def saveReport(db, ciType, resourceId, rptData):
    rptTable = 'INSPECT_REPORTS'
    rptCollection = db[rptTable]

    currentTime = datetime.datetime.utcnow()
    rptData['_report_time'] = currentTime
    primaryKey = {'RESOURCE_ID': rptData['RESOURCE_ID']}

    rptCollection.replace_one(primaryKey, rptData, upsert=True)
    rptCollection.create_index([('RESOURCE_ID', 1)], name='idx_pk')
    print('INFO: Save report data success.')
    AutoExecUtils.updateInspectStatus(ciType, resourceId, rptData['INSPECT_STATUS'])
    print('INFO: Update inspect status for node success.')
    saveHisReport(db, ciType, resourceId, rptData)


def saveHisReport(db, ciType, resourceId, rptData):
    rptTable = 'INSPECT_REPORTS_HIS'
    rptCollection = db[rptTable]

    rptCollection.insert(rptData)
    rptCollection.create_index([('RESOURCE_ID', 1), ('_report_time', 1)], name='idx_pk')
    rptCollection.create_index([('_report_time', 1)], name='idx_ttl', expireAfterSeconds=7776000)
    print('INFO: Save report history data success.')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--outputfile', default='', help='Output json file path for node')
    parser.add_argument('--node', default='', help='Execution node json')
    args = parser.parse_args()
    outputPath = args.outputfile
    node = args.node

    try:
        nodeInfo = {}
        hasOptError = False
        if node is None:
            node = os.getenv('AUTOEXEC_NODE')
        if node is None or node == '':
            print("ERROR: Can not find node definition.\n")
            hasOptError = True
        else:
            nodeInfo = json.loads(node)

        if outputPath is None or outputPath == '':
            outputPath = os.getenv('NODE_OUTPUT_PATH')
        else:
            os.environ['NODE_OUTPUT_PATH'] = outputPath

        if outputPath is None:
            print("ERROR: Must set environment variable NODE_OUTPUT_PATH or defined option --outputfile.\n")
            hasOptError = True

        if hasOptError:
            usage()

        ciType = nodeInfo['nodeType']
        resourceId = nodeInfo['resourceId']
        (dbclient, db) = AutoExecUtils.getDB()

        rptDataRecords = inspectData(nodeInfo)
        for rptData in rptDataRecords:
            saveReport(db, ciType, resourceId, rptData)

    except Exception as ex:
        print('ERROR: Unknow Error, {}'.format(ex))
        exit(-1)
    finally:
        if dbclient is not None:
            dbclient.close()
