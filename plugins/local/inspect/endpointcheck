#!/usr/bin/python
# -*- coding:UTF-8 -*-

import re
import AutoExecUtils
import os
import traceback
import datetime
import argparse
import sys
import json
import socket
import urllib.request
import urllib.parse
from urllib.error import URLError
from urllib.error import HTTPError
import time

from ping3 import ping


def usage():
    pname = os.path.basename(__file__)
    exit(1)


def pingCheck(host):
    second = ping3.ping(dest_addr=host, timeout=5)
    if second:
        print('INFO: {} is reachable, took {} second'.format(host, second))
        return (True, None)
    else:
        loopCount = 2
        while not second and loopCount > 0:
            second = ping3.ping(dest_addr=host, timeout=5)
            loopCount = loopCount - 1
        if second:
            print('INFO: {} is reachable, took {} second'.format(host, second))
            return (True, None)
        else:
            errorMsg = 'ERROR: {} is unreachable, took {} second'.format(host, second)
            print(errorMsg)
            return (False, errorMsg)


def tcpCheck(endPoint):
    colonPos = endPoint.rindex(':')
    if colonPos < 0:
        errorMsg = "ERROR: Malform end point format: {}".format(endPoint)
        print(errorMsg)
        return (False, errorMsg)

    try:
        host = endPoint[0:colonPos]
        port = int(endPoint[colonPos+1:])
        sock = socket.socket()
        sock.connect((host, port))
    except Exception as ex:
        errorMsg = "ERROR: Can not connect {}.".format(endPoint)
        print(errorMsg)
        return (False, errorMsg)

    return (True, None)


def urlCheck(endPoint):
    url = endPoint
    userAgent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'

    #data = urllib.parse.urlencode(params)
    #url = url + '?' + data
    req = urllib.request.Request(url)
    req.add_header('User-Agent', userAgent)

    try:
        response = urllib.request.urlopen(req)
    except HTTPError as ex:
        errMsg = ex.code
        if ex.code > 500:
            content = ex.read()
        errorMsg = "ERROR: Request failedï¼Œstatus code{}, {}".format(ex.code, content)
        print(errorMsg)
        return (False, errorMsg)
    except URLError as ex:
        errorMsg = "ERROR: Request url:{} failed, {}".format(url, ex.reason)
        print(errorMsg)
        return (False, errorMsg)

    return (True, None)


def saveInspectData(inspectData):
    out = {'DATA': inspectData}
    AutoExecUtils.saveOutput(out)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--node', default='', help='Execution node json')
    args = parser.parse_args()
    outputPath = args.outputfile
    node = args.node

    try:
        nodeInfo = {}
        hasOptError = False
        if node is None:
            node = os.getenv('AUTOEXEC_NODE')
        if node is None or node == '':
            print("ERROR: Can not find node definition.\n")
            hasOptError = True
        else:
            nodeInfo = json.loads(node)

        if hasOptError:
            usage()

        hasError = False

        ip = nodeInfo['host']
        port = nodeInfo['port']
        resourceId = nodeInfo['resourceId']
        ciAttrs = AutoExecUtils.getCmdbCiAttrs(resourceId, ['access_endpoint'])
        accessEndPoint = ciAttrs['access_endpoint']
        if accessEndPoint is None:
            if ip is not None:
                if port is not None:
                    accessEndPoint = '{}:{}'.format(ip, port)
                else:
                    accessEndPoint = ip

        errorMsg = None
        startTime = time.time()
        if accessEndPoint.startswith('https://') or accessEndPoint.startswith('http://'):
            # url check
            (ret, errorMsg) = urlCheck(accessEndPoint)
            if not ret:
                hasError = True
        elif re.match(':\d+$', accessEndPoint):
            # ip:port tcp
            (ret, errorMsg) = tcpCheck(accessEndPoint)
            if not ret:
                hasError = True
        else:
            # ping
            (ret, errorMsg) = pingCheck(accessEndPoint)
            if not ret:
                hasError = True

        timeConsume = time.time() - startTime
        inspectInfo = {'_OBJ_CATEGORY': 'EMPTY',
                       '_OBJ_TYPE': 'EMPTY'}
        if hasError:
            inspectInfo['_availability'] = 0
            inspectInfo['_error_message'] = errorMsg
            inspectInfo['_reponseTime'] = timeConsume
        else:
            inspectInfo['_availability'] = 1
            inspectInfo['_error_message'] = None
            inspectInfo['_reponseTime'] = timeConsume
    except Exception as ex:
        print('ERROR: Unknow Error, {}'.format(traceback.format_exc()))
        exit(-1)
