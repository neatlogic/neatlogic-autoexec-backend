#!/usr/bin/python
# -*- coding:UTF-8 -*-

import os
import time
import traceback
import argparse
import json
import hashlib
from functools import partial

import AutoExecUtils


def md5sum(filename):
    with open(filename, mode='rb') as f:
        d = hashlib.md5()
        for buf in iter(partial(f.read, 128), b''):
            d.update(buf)
    return d.hexdigest()


def usage():
    pname = os.path.basename(__file__)
    exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--node', default='', help='Execution node json')
    parser.add_argument('--fileslist', default=32, help='Maximum file size, unit:K')
    parser.add_argument('--timeout', default=60, help='Timeout value')
    args = parser.parse_args()

    timeOut = int(args.timeout)
    if timeOut == 0:
        timeOut = 60

    node = args.node
    fileListJson = args.fileslist

    try:
        nodeInfo = {}
        hasOptError = False
        if node is None or node == '':
            node = os.getenv('AUTOEXEC_NODE')
        if node is None or node == '':
            print("ERROR: Can not find node definition.")
            hasOptError = True
        else:
            nodeInfo = json.loads(node)

        filesList = []
        if fileListJson is not None and fileListJson != '':
            filesList = json.loads(fileListJson)

        if len(filesList) == 0:
            print("WARN: No files to save.")
            exit(0)

        if hasOptError:
            usage()

        hasError = False

        resourceId = nodeInfo['resourceId']

        fileInfoDict = {}
        for fileInfo in AutoExecUtils.getCITxtFilePathList(resourceId):
            fileInfoDict[fileInfo['path']] = {
                'id': fileInfo['id'],
                'md5': fileInfo['md5']
            }

        fileId = None
        for fileInfo in filesList:
            try:
                fileId = None
                fullPath = fileInfo['fullPath']
                serverPath = fileInfo['serverPath']

                print("INFO: Backup and inspect file %s begin..." % (serverPath))

                pathId = None
                oldMd5 = None
                oldFileInfo = fileInfoDict.get(serverPath)
                if oldFileInfo is not None:
                    pathId = oldFileInfo['id']
                    oldMd5 = oldFileInfo['md5']

                fileMd5 = md5sum(fullPath)

                if fileMd5 != oldMd5:
                    result = AutoExecUtils.uploadFile(fullPath, 'inspectconfigfile')
                    print("INFO: Upload file %s to storage success." % (serverPath))
                    fileId = result['id']
                    result = AutoExecUtils.txtFileInspectSave({
                        "resourceId": resourceId,
                        "pathId": pathId,
                        "path": fileInfo['serverPath'],
                        "inspectTime": int(time.time()),
                        "md5": fileMd5,
                        "fileId": fileId
                    })
                    print("INFO: Save file %s inspect information success." % (serverPath))
                else:
                    result = AutoExecUtils.txtFileInspectSave({
                        "resourceId": resourceId,
                        "pathId": pathId,
                        "path": fileInfo['serverPath'],
                        "inspectTime": int(time.time()),
                        "md5": None,
                        "fileId": None
                    })
                    print("INFO: Save file %s inspect information success." % (serverPath))
            except Exception as ex:
                hasError = 2
                if fileId is not None:
                    try:
                        AutoExecUtils.removeUploadedFile(fileId)
                    except:
                        pass
                print('ERROR: Save file({}) failed, {}, {}'.format(json.dumps(fileInfo), str(ex), traceback.format_exc()))

            exit(hasError)
    except Exception as ex:
        print('ERROR: Unknow Error, {}'.format(traceback.format_exc()))
        exit(-1)
