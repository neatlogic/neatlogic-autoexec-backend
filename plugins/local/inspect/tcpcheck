#!/usr/bin/perl
use FindBin;
use Cwd qw(abs_path);
use lib abs_path("$FindBin::Bin/lib");
use lib abs_path("$FindBin::Bin/../lib");
use lib abs_path("$FindBin::Bin/../lib/perl-lib/lib/perl5");

use strict;
use Getopt::Long;
use AutoExecUtils;
use IO::Socket::INET;
use JSON;

sub usage {
    my $pname = $FindBin::Script;
    print("$pname --node <node> --timeout <timeout seconds> .\n");
    exit(0);
}

sub main {
    $| = 1;    #不对输出进行buffer，便于实时看到输出日志
    AutoExecUtils::setEnv();

    my ( $node );

    my $community;
    my $timeout = 10;

    GetOptions(
        'node=s'    => \$node,
        'timeout=i' => \$timeout
    );

    my $nodeInfo  = {};
    my $hasOptErr = 0;
    if ( not defined($node) ) {
        $node = $ENV{AUTOEXEC_NODE};
    }

    if ( not defined($node) or $node eq '' ) {
        $hasOptErr = 1;
    }
    else {
        $nodeInfo = from_json($node);
    }

    if ( $hasOptErr == 1 ) {
        usage();
    }

    my $resourceId = $nodeInfo->{resourceId};
    my $data = {  MGMT_IP => $host, PORT => $port, RESOURCE_ID => $resourceId, CONNECTIVITY => 0 };

    my $host = $nodeInfo->{host};
    my $port = $nodeInfo->{port};
    print("INFO: Try to connect to $host:$port.\n");
    eval {
        my $socket = IO::Socket::INET->new(
            PeerHost => $host,
            PeerPort => $port,
            Timeout  => $timeout
        );

        if ( defined($socket) ) {
            $data->{CONNECTIVITY}  = 1;
            $data->{ERROR_MESSAGE} = '';
            $socket->close();
        }

    };
    if ($@) {
        my $errMsg = $@;
        $errMsg =~ s/ at\s*.*$//;
        $data->{'EOROR_MESSAGE'} = $errMsg;
        print("ERROR: $errMsg");
    }
    else {
        print("FINEST: TCP handshake succeed.\n");
    }

    my $out = {};
    $out->{DATA} = $data;
    AutoExecUtils::saveOutput($out);
    print Dumper ($data);
}

exit main();
