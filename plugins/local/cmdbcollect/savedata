#!/usr/bin/python
# -*- coding:UTF-8 -*-

import AutoExecUtils
import os
import traceback
import datetime
import argparse
import sys
import json
from bson.json_util import dumps, loads


def usage():
    pname = os.path.basename(__file__)
    print(pname + " --outputfile <path> ")
    exit(1)


def createPKIndex(collection, pkDef):
    pkIdx = []
    for field in pkDef:
        pkIdx.append((field, 1))
    collection.create_index(pkIdx, name='idx_pk')
    collection.create_index([('_renewtime', 1)], name='idx_ttl', expireAfterSeconds=15811200)


def createIndex(collectioin, data):
    if 'INDEX_FIELDS' in data:
        for idxField in data['INDEX_FIELDS']:
            collection.create_index([(idxField, 1)], name='idx_' + idxField.lower())


# 目的通过PEER信息搜索到应用进程
def saveAppConnData(db, data):
    if 'CONN_INFO' in data:
        #connData = data.pop('CONN_INFO')
        connData = data['CONN_INFO']
        connInfo = {}
        connInfo['OS_ID'] = data['OS_ID']
        connInfo['OBJECT_TYPE'] = data['OBJECT_TYPE']
        connInfo['MGMT_IP'] = data['MGMT_IP']
        connInfo['PORT'] = data['PORT']

        if 'RESOURCE_ID' in data:
            connInfo['RESOURCE_ID'] = data['RESOURCE_ID']
        else:
            connInfo['RESOURCE_ID'] = None

        connInfo['BIND'] = connData['BIND']
        connInfo['PEER'] = connData['PEER']

        primaryKey = {'OS_ID': connInfo['OS_ID'], 'MGMT_IP': connInfo['MGMT_IP'], 'PORT': connInfo['PORT']}
        collection = db['RELATION_NETCONN']
        # BIND和PEER都是简单数组，建立索引后，可以使用$in操作符进行配合，结合$elemMatch可以过滤命中的BIND和PEER
        collection.replace_one(primaryKey, connInfo, upsert=True)
        collection.create_index([('OS_ID', 1), ('MGMT_IP', 1), ('PORT', 1)], name='idx_pk')
        collection.create_index([('BIND', 1)], name='idx_bind')
        collection.create_index([('PEER', 1)], name='idx_peer')
        print('INFO: Save connection data success.')


def saveSwMacTableData(db, data):
    if 'MAC_TABLE' in data:
        macTableInfo = {}
        macTableInfo['MGMT_IP'] = data['MGMT_IP']
        macTableInfo['SN'] = data['SN']
        macTableInfo['DEV_NAME'] = data['DEV_NAME']
        if 'RESOURCE_ID' in data:
            macTableInfo['RESOURCE_ID'] = data['RESOURCE_ID']
        else:
            macTableInfo['RESOURCE_ID'] = None
        macTableInfo['MAC_TABLE'] = data['MAC_TABLE']

        primaryKey = {'MGMT_IP': macTableInfo['MGMT_IP'], 'SN': macTableInfo['SN']}
        collection = db['RELATION_MACTABLE']
        collection.replace_one(primaryKey, macTableInfo, upsert=True)
        collection.create_index([('MGMT_IP', 1), ('SN', 1)], name='idx_pk')
        # MAC_TABLE_MACS索引用于使用$in操作符检索，结合$elemMatch返回匹配的MAC记录
        collection.create_index([('MAC_TABLE.MACS', 1)], name='idx_mac')
        print('INFO: Save mac table data success.')


def saveSwCDPData(db, data):
    if 'NEIGHBORS' in data:
        nbrTableInfo = {}
        nbrTableInfo['MGMT_IP'] = data['MGMT_IP']
        nbrTableInfo['SN'] = data['SN']
        nbrTableInfo['DEV_NAME'] = data['DEV_NAME']
        if 'RESOURCE_ID' in data:
            nbrTableInfo['RESOURCE_ID'] = data['RESOURCE_ID']
        else:
            nbrTableInfo['RESOURCE_ID'] = None
        nbrTableInfo['NEIGHBORS'] = data['NEIGHBORS']

        primaryKey = {'MGMT_IP': nbrTableInfo['MGMT_IP'], 'SN': nbrTableInfo['SN']}
        collection = db['RELATION_NEIGHBORS']
        # TODO: index clarify
        collection.replace_one(primaryKey, nbrTableInfo, upsert=True)
        collection.create_index([('MGMT_IP', 1), ('SN', 1)], name='idx_pk')
        # MAC_TABLE_MACS索引用于使用$in操作符检索，结合$elemMatch返回匹配的MAC记录
        collection.create_index([('NEIGHBORS.LOCAL_NAME', 1)], name='idx_local_name')
        collection.create_index([('NEIGHBORS.REMOTE_NAME', 1)], name='idx_remote_name')
        print('INFO: Save neighbors data success.')


def saveLunRelData(db, data):
    pass


def saveNasRelData(db, data):
    pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--outputfile', default='', help='Output json file path for node')
    parser.add_argument('--node', default='', help='Execution node json')
    args = parser.parse_args()
    outputPath = args.outputfile

    if outputPath is None or outputPath == '':
        outputPath = os.getenv('NODE_OUTPUT_PATH')
    else:
        os.environ['NODE_OUTPUT_PATH'] = outputPath

    if outputPath is None:
        print("ERROR: Must set environment variable NODE_OUTPUT_PATH or defined option --outputfile.\n")
        usage()

    (dbclient, db) = AutoExecUtils.getDB()

    try:
        outputData = AutoExecUtils.loadNodeOutput()
        if outputData is None:
            print("WARN: Node output data is empty.")
        else:
            for key, value in outputData.items():
                if not key.startswith("cmdbcollect/"):
                    continue

                collectData = value['DATA']
                if collectData is None:
                    print('WARN: Plugin {} did not return collect data.'.format(key))
                    continue

            for data in collectData:
                # 检查数据，必须包含PK、OBJECT_TYPE
                isMalformData = 0
                if 'PK' not in data:
                    isMalformData = 1
                    print('WARN: Data not defined PK.')
                if 'OBJECT_TYPE' not in data:
                    isMalformData = 1
                    print('WARN: Data not defined OBJECT_TYPE.')
                if isMalformData == 1:
                    print(json.dumps(data))
                    continue

                # 计算mongodb的collection名称，优先使用APP_TYPE作为表名，如果没有APP_TYPE则使用OBJECT_TYPE
                objType = data["OBJECT_TYPE"]
                appType = None
                if 'OS_TYPE' in data:
                    appType = data['OS_TYPE']
                if 'APP_TYPE' in data:
                    appType = data['APP_TYPE']

                tableName = objType
                if appType is not None:
                    tableName = appType

                table = "COLLECT_" + objType

                # 根据PK的定义生成Primary Key filter
                primaryKey = {}
                pkDef = data['PK']
                for pKey in pkDef:
                    if pKey in data:
                        pVal = data[pKey]
                        primaryKey[pKey] = data[pKey]
                        if pVal is None or pVal == '':
                            print("WARN: {} PK attribute:{} is empty.".format(tableName, pKey))
                    else:
                        primaryKey[pKey] = None
                        print("WARN: {} not contain PK attribute:{}.".format(tableName, pKey))

                pkJson = json.dumps(primaryKey)
                collection = db[table]
                #record = collection.find_one(primaryKey, {'data': True})
                try:
                    print('INFO: Begin save data {}:{} ...'.format(tableName, pkJson))
                    currentTime = datetime.datetime.utcnow()
                    data['_updatetime'] = currentTime
                    data['_renewtime'] = currentTime
                    saveAppConnData(db, data)
                    saveSwMacTableData(db, data)
                    saveSwCDPData(db, data)
                    print('INFO: Save connection information success.')
                    collection.replace_one(primaryKey, data, upsert=True)
                    print('INFO: Save data success.')
                    createPKIndex(collection, pkDef)
                    createIndex(collection, data)
                    print('INFO: Save data success.\n'.format(tableName, pkJson))
                except Exception as ex:
                    print('ERROR: Save data for {}({}) failed, {}'.format(tableName, pkJson, ex))
                    traceback.print_exc()
    except Exception as ex:
        print('ERROR: Unknow Error, {}'.format(ex))
        exit(-1)
    finally:
        if dbclient is not None:
            dbclient.close()
