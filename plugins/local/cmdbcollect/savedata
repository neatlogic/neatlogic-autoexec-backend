#!/usr/bin/python
# -*- coding:UTF-8 -*-

import os
import argparse
import sys
import json

binPaths = os.path.split(os.path.realpath(__file__))
libPath = os.path.realpath(binPaths[0]+'/../lib')
sys.path.append(libPath)
import CmdbUtils
import AutoExecUtils



def usage():
    pname = os.path.basename(__file__)
    print(pname + " --path <path> ")
    exit(1)


def _readJson(path):
    f = open(path, "r", encoding="utf-8")
    data = json.load(f)
    f.close()
    return data


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--path', default='', help='前置插件或步骤output输出路径')
    parser.add_argument('--param', default='', help='前置节点输出参数')
    parser.add_argument('--node', default='', help='执行节点')
    args = parser.parse_args()
    path = args.path

    host = None
    port = None
    AUTOEXEC_NODE = os.getenv('AUTOEXEC_NODE')
    AUTOEXEC_ROOTPATH = os.getenv('OUTPUT_ROOT_PATH')
    if AUTOEXEC_NODE != None:
        AUTOEXEC_NODE = json.loads(AUTOEXEC_NODE)
        host = AUTOEXEC_NODE['host']
        port = AUTOEXEC_NODE['port']

    if ((host == None or port == None or AUTOEXEC_ROOTPATH == None) and path == None):
        print("ERROR:: must set AUTOEXEC_NODE and OUTPUT_ROOT_PATH param or defined args --path.\n")
        usage()

    outputName = str(host) + "-" + str(port) + ".json"
    outputPath = AUTOEXEC_ROOTPATH + "/" + outputName
    output_Json = _readJson(outputPath)
    collect_data = None
    if output_Json != None:
        items = output_Json.items()
        for key, value in items:
            if key.startswith("cmdbcollect"):
               cmdbcollect = value
               collect_data = cmdbcollect["DATA"]

    if collect_data == None:
        print("WARN:: collect plugin has no return data .\n")
        exit(1)

    cmdbUtils = CmdbUtils.CmdbUtils()
    for data in collect_data:
        pk = data['PK']
        tableName = data["OBJECT_TYPE"]
        if("APP_TYPE" in data):
            tableName = data["APP_TYPE"]

        table = "collect_" + tableName
        table = table.lower()

        uniqueExp = []
        for unique in pk:
            exp = {}
            if unique in data :
                exp[unique] = data[unique]
            else:
                exp[unique] = ''
                print("ERROR: {} collect return data not contain PK {} value.\n".format(tableName,unique))
            uniqueExp.append(exp)

        dbUnique = {}
        dbUnique['$and'] = uniqueExp

        # 新增统一的采集更新时间
        data['_updatetime'] = AutoExecUtils.getCurrentTime()

        count = cmdbUtils.count(table, dbUnique)
        if count == 0:
            cmdbUtils.insert(table, data)
        else:
            cmdbUtils.update(table, dbUnique, data)
        cmdbUtils.close()
