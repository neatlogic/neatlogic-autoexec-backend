#!/usr/bin/python
# -*- coding:UTF-8 -*-

import AutoExecUtils
import os
import datetime
import argparse
import sys
import json
from bson.json_util import dumps, loads


def usage():
    pname = os.path.basename(__file__)
    print(pname + " --outputfile <path> ")
    exit(1)


def createPKIndex(collection, pkDef):
    pkIdx = []
    for field in pkDef:
        pkIdx.append((field, 1))
    collection.create_index(pkIdx, name='idx_pk')
    collection.create_index([('_renewtime', 1)], name='idx_ttl', expireAfterSeconds=15811200)


def createIndex(collectioin, data):
    if 'INDEX_FIELDS' in data:
        for idxField in data['INDEX_FIELDS']:
            collection.create_index({idxField: 1}, name='idx_' + idxField.lower)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--outputfile', default='', help='Output json file path for node')
    parser.add_argument('--node', default='', help='Execution node json')
    args = parser.parse_args()
    outputPath = args.outputfile

    if outputPath is None or outputPath == '':
        outputPath = os.getenv('NODE_OUTPUT_PATH')
    else:
        os.environ['NODE_OUTPUT_PATH'] = outputPath

    if outputPath is None:
        print("ERROR: Must set environment variable NODE_OUTPUT_PATH or defined option --outputfile.\n")
        usage()

    (dbclient, db) = AutoExecUtils.getDB()

    try:
        outputData = AutoExecUtils.loadNodeOutput()
        if outputData is None:
            print("WARN: Node output data is empty.\n")
        else:
            for key, value in outputData.items():
                if not key.startswith("cmdbcollect/"):
                    continue

                collectData = value['DATA']
                if collectData is None:
                    print('WARN: Plugin {} did not return collect data.\n'.format(key))
                    continue

            for data in collectData:
                # 检查数据，必须包含PK、OBJECT_TYPE
                isMalformData = 0
                if 'PK' not in data:
                    isMalformData = 1
                    print('WARN: Data not defined PK.\n')
                if 'OBJECT_TYPE' not in data:
                    isMalformData = 1
                    print('WARN: Data not defined OBJECT_TYPE.\n')
                if isMalformData == 1:
                    print(json.dumps(data))
                    continue

                # 计算mongodb的collection名称，优先使用APP_TYPE作为表名，如果没有APP_TYPE则使用OBJECT_TYPE
                objType = data["OBJECT_TYPE"]
                appType = None
                if 'OS_TYPE' in data:
                    appType = data['OS_TYPE']
                if 'APP_TYPE' in data:
                    appType = data['APP_TYPE']

                tableName = objType
                if appType is not None:
                    tableName = appType

                table = "collect_" + tableName.lower()

                # 根据PK的定义生成Primary Key filter
                primaryKey = {}
                pkDef = data['PK']
                for pKey in pkDef:
                    if pKey in data:
                        pVal = data[pKey]
                        primaryKey[pKey] = data[pKey]
                        if pVal is None or pVal == '':
                            print("WARN: {} PK attribute:{} is empty.\n".format(tableName, pKey))
                    else:
                        primaryKey[pKey] = None
                        print("WARN: {} not contain PK attribute:{}.\n".format(tableName, pKey))

                pkJson = json.dumps(primaryKey)
                collection = db[table]
                #record = collection.find_one(primaryKey, {'data': True})
                try:
                    currentTime = datetime.datetime.utcnow()
                    data['_updatetime'] = currentTime
                    data['_renewtime'] = currentTime
                    collection.replace_one(primaryKey, data, upsert=True)
                    createPKIndex(collection, pkDef)
                    createIndex(collection, data)
                    print('INFO: Save data {}:{}\n'.format(tableName, pkJson))
                except Exception as ex:
                    print('ERROR: Save data for {}({}) failed, {}'.format(tableName, pkJson, ex))
    except Exception as ex:
        print('ERROR: Unknow Error, {}\n'.format(ex))
        exit(-1)
    finally:
        if dbclient is not None:
            dbclient.close()
