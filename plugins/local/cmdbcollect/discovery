#!/usr/bin/python3
# -*- coding: utf-8 -*-
from gc import collect
import os
import json
import re
import subprocess


def detectObjInfo(hostInfo):
    OSDesc = hostInfo.get('OS')

    if OSDesc is None:
        return None

    objInfo = None
    typesDef = [
        {'key': 'Linux', '_OBJ_CATEGORY': 'OS', '_OBJ_TYPE': 'Linux'},
        {'key': 'Windows', '_OBJ_CATEGORY': 'OS', '_OBJ_TYPE': 'Windows'},
        {'key': 'AIX', '_OBJ_CATEGORY': 'OS', '_OBJ_TYPE': 'AIX'},
        {'key': 'SunOS', '_OBJ_CATEGORY': 'OS', '_OBJ_TYPE': 'SunOS'},
        {'key': 'FreeBSD', '_OBJ_CATEGORY': 'OS', '_OBJ_TYPE': 'FreeBSD'},
        {'key': 'CISCO', '_OBJ_CATEGORY': 'SWITCH', '_OBJ_TYPE': None},
        {'key': 'Huawei', '_OBJ_CATEGORY': 'SWITCH', '_OBJ_TYPE': None},
        {'key': 'Juniper', '_OBJ_CATEGORY': 'SWITCH', '_OBJ_TYPE': None},
        {'key': 'Ruijie', '_OBJ_CATEGORY': 'SWITCH', '_OBJ_TYPE': None},
        {'key': 'H3C', '_OBJ_CATEGORY': 'SWITCH', '_OBJ_TYPE': None},
        {'pattern': re.compile(r'Google Android'), '_OBJ_CATEGORY': 'MOBILE', '_OBJ_TYPE': 'Android'}
    ]

    for matchItem in typesDef:
        key = matchItem.get('key')
        pattern = matchItem.get('pattern')

        if key is not None:
            try:
                OSDesc.index(key)
                objInfo = {
                    '_OBJ_CATEGORY': matchItem['_OBJ_CATEGORY'],
                    '_OBJ_TYPE': matchItem['_OBJ_TYPE'],
                    'MGMT_IP': hostInfo['IP']
                }
                break
            except ValueError:
                pass
        elif pattern is not None:
            if re.search(pattern, OSDesc):
                objInfo = {
                    '_OBJ_CATEGORY': matchItem['_OBJ_CATEGORY'],
                    '_OBJ_TYPE': matchItem['_OBJ_TYPE'],
                    'MGMT_IP': hostInfo['IP']
                }
                break

    return objInfo


def netScan(net=None, ports=None, timingTmpl=5):
    if ports is None:
        ports = '22,161,135,139,445,3389'
    # nmap -oG - 192.168.0.1/24,192.168.1.1/24 -p 22,161,135,139,445,3389 -T5 -sSU --top-ports 100 -n -O > /tmp/nmap.txt
    nmapCmd = 'sudo nmap -oG - {} -p {} -T{} -O -n -sSU --top-ports 5'.format(net, ports, timingTmpl)
    child = subprocess.Popen(nmapCmd, shell=True, close_fds=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    result = {}
    while True:
        # readline 增加maxSize参数是为了防止行过长，pipe buffer满了，行没结束，导致pipe写入阻塞
        line = child.stdout.readline(4096)
        if not line:
            break

        line = line.strip()
        line = line.decode('utf-8')
        if not line.startswith('#'):
            hostInfo = None
            for field in line.split('\t'):
                (name, val) = field.split(': ', 2)
                if name == 'Host':
                    (ip, dns) = val.split(' ')
                    ip = ip.strip()
                    hostInfo = result.get(ip)
                    if hostInfo is None:
                        hostInfo = {}
                        result[ip] = hostInfo

                    hostInfo['IP'] = ip
                    hostInfo['Name'] = dns[1:-1]
                elif name == 'Ports':
                    for portSeg in val.split('/, '):
                        portsInfo = hostInfo.get('Ports')
                        if portsInfo is None:
                            portsInfo = {}
                            hostInfo['Ports'] = portsInfo

                        #(port, state, protocol, owner, service, rpc_info, version)
                        portParts = portSeg.split('/')
                        if portParts[1] == 'open':
                            portsInfo[portParts[0]] = {
                                'port': portParts[0],
                                'state': portParts[1],
                                'protocol': portParts[2],
                                'owner': portParts[3],
                                'service': portParts[4],
                                'rpc_info': portParts[5],
                                'version': portParts[6]
                            }
                elif name == 'Protocols':
                    for protocolSeg in val.split('/, '):
                        protocolsInfo = hostInfo.get('Protocols')
                        if protocolsInfo is None:
                            protocolsInfo = {}
                            hostInfo['Protocols'] = protocolsInfo

                        #(port, state, protocol, owner, service, rpc_info, version)
                        protocolParts = protocolSeg.split('/')
                        protocolsInfo[portParts[2]] = {
                            'number': portParts[0],
                            'state': portParts[1],
                            'name': portParts[2]
                        }
                elif name == 'Status':
                    hostInfo['Status'] = val.strip()
                else:
                    hostInfo[name] = val

    return result


def getCollectCmd(objInfo, nodeName, community):
    cmd = None
    objCat = objInfo.get('_OBJ_CATETORY')
    objType = objInfo.get('_OBJ_TYPE')

    nodeInfo = {
        'resourceId': 0,
        'nodeName': nodeName,
        'host': objInfo.get('MGMT_IP'),
        'port': None,
        'protocol': 'snmp',
        'protocolPort': 161,
        'username': 'none',
        'password': community,
        'nodeType': objType
    }
    os.environ['AUTOEXEC_NODE'] = json.dumps(nodeInfo, ensure_ascii=False)

    if objCat == 'SWITCH':
        cmd = "switchcollector --objtype {}".format(objType)
    elif objCat == 'LOADBALANCER':
        if objType == 'F5':
            cmd = "f5collector"
        elif objType == 'A10':
            cmd = "a10collector"
    elif objCat == 'SECDEV':
        if objType == 'FireWall':
            cmd = "firewallcollector --type auto"
    elif objCat == 'FCDEV':
        if objCat == 'FCSwitch ':
            cmd = "storagecollector --type auto"

    return cmd


def saveOneNode():
    saveCmd = 'savedata --outputfile output.json'
    ret = os.system(saveCmd)
    return ret


def snmpGetSysInfo(objInfo, communities):
    detected = False
    ip = objInfo.get('MGMT_IP')
    for community in communities:
        pass

    detected = True
    return detected


def netDevInfoCollect(objInfo, communities):
    hasError = 0

    detected = False
    workCommunity = None
    # Detech objType by snmp sysObjectId and sysDescr, sysName

    for community in communities:
        detected = snmpGetSysInfo(objInfo, community):
        if detected:
            workCommunity = community

    if not detected:
        # snmp获取sysObjectId并判断类型失败
        return 1

    objCat = objInfo['_OBJ_CATEGORY']
    objType = objInfo['_OBJ_TYPE']
    sysName = objInfo['DEV_NAME']

    # test data
    objCat = 'SWITCH'
    objType = 'Switch'
    workCommunity = 'public'
    sysName = 'AR600'
    # 3

    # Call collect tool
    collectCmd = getCollectCmd(objInfo, sysName, workCommunity)
    if collectCmd is not None:
        ret = os.system(collectCmd)
        hasError = hasError + ret
    else:
        hasError = hasError + 1

    # call savedata
    if hasError == 0:
        hasError = hasError + saveOneNode()

    return hasError


if __name__ == "__main__":
    ports = '22,161,135,139,445,3389,3939'
    snmpPort = '161'
    communities = ['public']
    result = netScan(net='192.168.0.1/24', ports=ports, timingTmpl=5)
    #print(json.dumps(result, ensure_ascii=False, indent=4))

    snmpData = []
    osData = []
    otherData = []
    for ip, hostInfo in result.items():
        print(json.dumps(hostInfo, ensure_ascii=False, indent=4))
        objInfo = detectObjInfo(hostInfo)
        if objInfo:
            portsInfo = hostInfo.get('Ports')
            if portsInfo is not None:
                if objInfo.get('_OBJ_CATEGORY') == 'OS':
                    osData.append(objInfo)
                elif portsInfo.get(snmpPort) is not None:
                    if netDevInfoCollect(objInfo, communities) == 0:
                        snmpData.append(objInfo)
                    else:
                        otherData.append(objInfo)
                else:
                    otherData.append(objInfo)

    print("================snmp=====================")
    print(json.dumps(snmpData, ensure_ascii=False, indent=4))
    print("================OS=====================")
    print(json.dumps(osData, ensure_ascii=False, indent=4))
    print("================Other=====================")
    print(json.dumps(otherData, ensure_ascii=False, indent=4))
