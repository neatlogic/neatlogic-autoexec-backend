#!/usr/bin/python
# -*- coding:UTF-8 -*-

import AutoExecUtils
import os
import sys
import traceback
import datetime
import argparse
import sys
import json
from bson import ObjectId
from bson.json_util import dumps, loads


def genInsRel(db):
    insCollection = db['COLLECT_INS']
    relSrcCollection = db['RELATION_INS_NETCONN']
    relDestCollection = db['RELATION_INS_NETCONN']

    for ins in relSrcCollection.find({}, {'OS_ID': 1,
                                          'MGMT_IP': 1,
                                          'PORT': 1,
                                          'PEER': 1}).batch_size(500):
        # print(dumps(ins))
        peer = ins['PEER']

        refIns = []
        refDb = []
        for rel in relDestCollection.find({'BIND':
                                           {'$in': peer}
                                           },
                                          {'OS_ID': 1,
                                           'MGMT_IP': 1,
                                           'PORT': 1,
                                           '_OBJ_CATEGORY': 1,
                                           '_OBJ_TYPE': 1}
                                          ).batch_size(500):
            if rel['_OBJ_CATEGORY'] == 'DB':
                refIns.append({'_OBJ_CATEGORY': rel['_OBJ_CATEGORY'],
                               '_OBJ_TYPE': rel['_OBJ_TYPE'],
                               'OS_ID': rel['OS_ID'],
                               'MGMT_IP': rel['MGMT_IP'],
                               'PORT': rel['PORT']
                               })
            else:
                refDb.append({'_OBJ_CATEGORY': rel['_OBJ_CATEGORY'],
                              '_OBJ_TYPE': rel['_OBJ_TYPE'],
                              'OS_ID': rel['OS_ID'],
                              'MGMT_IP': rel['MGMT_IP'],
                              'PORT': rel['PORT']
                              })

        insCollection.update_one({'OS_ID': ins['OS_ID'],
                                  'MGMT_IP': ins['MGMT_IP'],
                                  'PORT': ins['PORT']},
                                 {'$set':
                                  {'REF_INS': refIns}
                                  })
        insCollection.update_one({'OS_ID': ins['OS_ID'],
                                  'MGMT_IP': ins['MGMT_IP'],
                                  'PORT': ins['PORT']},
                                 {'$set':
                                  {'REF_DB': refDb}
                                  })


def genOSSwitchRel(db):
    osCollection = db['COLLECT_OS']
    macTblCollection = db['RELATION_NET_MACTABLE']
    osUpdCollection = db['COLLECT_OS']

    for os in osCollection.find({},
                                {'OS_ID': 1,
                                 'MGMT_IP': 1,
                                 'ETH_INTERFACES.MAC': 1
                                 }).batch_size(500):
        nics = os['ETH_INTERFACES']
        for nic in nics:
            macCount = sys.maxsize
            refSwitch = None
            for rel in macTblCollection.find({'MAC_TABLE.MACS':
                                              {'$all': [nic['MAC']]}},
                                             {'_OBJ_CATEGORY': 1,
                                              '_OBJ_TYPE': 1,
                                              'MGMT_IP': 1,
                                              'SN': 1,
                                              'PORT': 1,
                                              'MAC_TABLE.MAC_COUNT': 1
                                              }).batch_size(500):
                print(dumps(rel))
                if rel['MAC_TABLE']['MAC_COUNT'] < macCount:
                    refSwitch = rel
                    macCount = rel['MAC_TABLE']['MAC_COUNT']

            refSwPort = {}
            if refSwitch is not None:
                refSwPort = {'_OBJ_CATEGORY': refSwitch['_OBJ_CATEGORY'],
                             '_OBJ_TYPE': refSwitch['_OBJ_TYPE'],
                             'MGMT_IP': refSwitch['MGMT_IP'],
                             'SN': refSwitch['SN'],
                             'PORT': refSwitch['PORT']}

            nic['REF_SW_PORT'] = refSwPort

        osUpdCollection.update_one({'OS_ID': os['OS_ID'], 'MGMT_IP': os['MGMT_IP']},
                                   {'$set':
                                    {'ETH_INTERFACES': nics}
                                    })


def genSwitchRel(db):
    swCollection = db['COLLECT_SWITCH']
    cdpSrcCollection = db['RELATION_NET_NEIGHBOR']
    cdpDestCollection = db['RELATION_NET_NEIGHBOR']

    for swInfo in cdpSrcCollection.find({},
                                        {'MGMT_IP': 1,
                                         'SN': 1,
                                         'NEIGHBORS': 1
                                         }).batch_size(500):
        neighbors = swInfo['NEIGHBORS']
        for neibr in neighbors:
            dev = None
            remoteCount = 0
            for dev in cdpDestCollection.find({'DEV_NAME': neighbors['REMOTE_NAME']},
                                              {'_OBJ_CATEGORY': 1,
                                               '_OBJ_TYPE': 1,
                                               'MGMT_IP': 1,
                                               'SN': 1}
                                              ).limit(2):
                remoteCount = remoteCount + 1
            if remoteCount == 1:
                neibr['_OBJ_CATEGORY'] = dev['_OBJ_CATEGORY']
                neibr['_OBJ_TYPE'] = dev['_OBJ_TYPE']
                neibr['REMOTE_MGMT_IP'] = dev['MGMT_IP']
                neibr['REMOTE_SN'] = dev['SN']
        swCollection.update_one({'MGMT_IP': swInfo['MGMT_IP'],
                                 'SN': swInfo['SN']},
                                {'$set':
                                 {'NEIGHBORS': neighbors}
                                 })


if __name__ == "__main__":
    (dbclient, db) = AutoExecUtils.getDB()

    try:
        genOSSwitchRel(db)
        genSwitchRel(db)
        genInsRel(db)
    except Exception as ex:
        print('ERROR: Unknow Error, {}'.format(traceback.format_exc()))
        exit(-1)
    finally:
        if dbclient is not None:
            dbclient.close()
