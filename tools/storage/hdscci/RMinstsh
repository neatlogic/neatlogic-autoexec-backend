#!/bin/sh

# $Header: RM/RLinstsh 1.00 17/04/2000 RM Copyright (c) 2000-2017, Hitachi, Ltd.
# $Header: RM/RLinstsh 1.00 17/04/2000 RM (C) Copyright 2000-2017 Hewlett Packard Enterprise Development LP.
# 
# NAME  : Raid Manager and Raid Manager/LIB Installation SHELL.
#
# DESCRIPTION:
# RM/RLinstsh is script that can be executing automatically the installation 
# procedure which is describing into RMreadme and RLreadme.
# This script has assumption of the following directory structures as default.
# Example for directory on CD
#
# HP-UX(HP_UX)  DIGITAL  DYNIX  LINUX(linux)  AIX  SOLARIS   $INSOBJ $UNIOBJ
# |                                  |
# |-$RMOBJ        ...........        |-$RMOBJ
#
# Example for directory on the Hard disk
# 
# DIR
# |
# |-$RMOBJ $INSOBJ $UNIOBJ 
# 
# If this script can not be finding a object file($RMOBJ) 
# with its machine then RM/RLinstsh requires that it inputs a 'device file name'
# or 'Full path file name' as a object file.
# Also, this script can be accomplishing automatically a installation by  
# judgement facility for 'Version Up' and 'New Introduction'.
#  
# CHANGELOG 
#
# Revision 1.15   05/02/2014   k.urabe
#                 Support for XP7 naming. 
#
# Revision 1.14   28/03/2011   k.urabe
#                 Support for P9000 naming. 
#
# Revision 1.13   25/01/2006   k.urabe
#                 Added XSOLARIS(for x86/x64) for HORCM. 
#
# Revision 1.12   21/04/2004   k.urabe
#                 Added ZLINUX(for Z990) for HORCM. 
#
# Revision 1.11   06/06/2003   k.urabe
#                 Added the file name to $INSOBJ & $UNIOBJ for CD format.
#                 Added the lower case and 'TRU' directorys.
#
# Revision 1.10   23/05/2003   k.urabe
#                 Added Tru64(Digital) UNIX for RMLIB. 
#
# Revision 1.09   05/10/2002   k.urabe
#                 Added 'dynix' for handling of the directory.
#
# Revision 1.08   07/11/2001   k.urabe
#                 Changed pnkill() due to killed myself.
#
# Revision 1.07   27/06/2001   k.urabe
#                 Added pnkill() for HP-UX.
#
# Revision 1.06   20/09/2000   k.urabe
#                 Added UNIX_SV for HORCM.
#
# Revision 1.05   03/08/2000   k.urabe
#                 Added IRIX64 for HORCM.
#
# Revision 1.04   24/07/2000   k.urabe
#                 Added MPE/iX for HORCM and RMLIB. 
#
# Revision 1.03   06/06/2000   k.urabe
#                 Added AIX and Linux for RMLIB. 
#
# Revision 1.02   27/05/2000   k.urabe
#                 Added $INSOBJ & $UNIOBJ due to a file name's differing from
#                 a hard disk on the Multiplathome for CD(ISO2 or RockRidg etc).
#
# Revision 1.01   27/04/2000   k.urabe Fixed revision
#                 Added $RMROOT for checking of specified directory.
#                 Added installing of $instsh(myself) for installation
#                 by Floppy or Tape.
#
# Revision 1.00   24/04/2000   k.urabe Initial revision




# [STARTING POINT]:

# In case of RMinstsh, you have to define $execname as "RM", 
# and also changes a file name as RMinstsh. 
 execname="RM"

# In case of RLinstsh, you have to define $execname as "RL",
# and also changes file name as RLinstsh.
#execname="RL"

if [ $# -eq 1 ]
then
  opt1="$1"
else
  opt1=""
fi

arbitrary_path_arg="--arbitrary_install_path"
normal=0
arbit=1
install_mode=$normal
supported=0
notsupported=1
func_arbit_path_support_flag=$notsupported
# flag for newinst
updateInstall=0
preserveInstall=1
newInstall=2

# $RMROOT  Root Path for $RMDIR. 
# $RMPTH   Path for Symbolical link or directory. 
#          This variable(/HORCM) must not be changed.
# $RMDIR   Directory which is made by cpio command.
#          This variable(HORCM) must not be changed.
# $LINKSH  Link shell name of the Raid Manager 
# $instsh  Installation shell name that myself.
# $uninsh  UNInstallation shell name.
# $RMOBJ   Object file name of the Raid Manager on CD.
# $INSOBJ  Object file name of the INStallation shell on CD.
# $UNIOBJ  Object file name of the UNInstallation shell on CD.


if [ "$execname" = "RM" ]
  then 
    RMROOT="/"
    RMDIR="HORCM"
    RMPTH="${RMROOT}$RMDIR"
    MGRNM="HORCM"
    LINKSH="horcminstall.sh"
    uninsh="RMuninst"
    instsh="RMinstsh"
    RLinst="RLinstsh"
    ISRMLIB=0
    RMDIRCD="./program/RM"
    RMOBJ="RMHORC RMXP rmhorc rmxp RMHORC;1 RMXP;1 RMHORC.;1 RMXP.;1 RMHORC. RMXP. rmhorc. rmxp."
    INSOBJ="RMinstsh rminstsh RMINSTSH RMINSTSH;1 RMINSTSH.;1 rminstsh. RMINSTSH."
    UNIOBJ="RMuninst rmuninst RMUNINST RMUNINST;1 RMUNINST.;1 rmuninst. RMUNINST."
  else
    RMROOT="/usr/lib"
    RMDIR="RMLIB"
    RMPTH="${RMROOT}/$RMDIR"
    MGRNM="Manager"
    LINKSH="rmlibinstall.sh"
    uninsh="RLuninst"
    instsh="RLinstsh"
    ISRMLIB=1
    RMDIRCD="./program/RL"
    RMOBJ="RMLIB rmlib RMLIB;1 RMLIB.;1 RMLIB. rmlib."
    INSOBJ="RLinstsh rlinstsh RLINSTSH RLINSTSH;1 RLINSTSH.;1 rlinstsh. RLINSTSH."
    UNIOBJ="RLuninst rluninst RLUNINST RLUNINST;1 RLUNINST.;1 rluninst. RLUNINST."
fi


print_arbit_mode_header(){
  echo ""
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!!!!!!!!!!!!!!!!          Arbitrary Install Path MODE           !!!!!!!!!!!!!!!!"
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo ""
}

print_install_directory_message(){
  echo "Please specify a directory for the installation/update."
  echo "This installer allows inputting directory path within 70 charactors in absolute path."
  echo "If you specify a directory like '/foo/HORCM', this installer will ignore last '/HORCM' and install HORCM in '/foo'."
}

print_new_installation_message(){
  echo "***** New Introduction to $1.*****"
}

print_update_message(){
  echo "***** Confirmation for Version Up of the $1.*****"
  echo "Please confirms whether $MGRNM has performing or not."
  if [ $ISRMLIB -ne 1 ]
  then
    echo "If $MGRNM has performing then stop by using horcmshutdown.sh and please try again."
    echo "- In case of 1 instance configuration of HORCM"
    echo "  # horcmshutdown.sh"
    echo "- In case of multiple instances configuration of HORCM"
    echo "  # horcmshutdown.sh  0 1 ..."
    echo "Also If HORC commands has performing in the interactive mode"
    echo "then terminates these commands by using -q option."
  else
    echo "If $MGRNM has performing then stop the Manager and please try again."
  fi
}

print_confirm_continuing_update(){
  echo "Continue to update $1 ? [Y/n]"
}

print_apath_file_creation_failed_message(){
  echo "Incomplete install."
  echo "Please rm -rf $1, and re-install HORCM."
}

print_update_install_failed_by_install_mode_mix(){
  echo "A specified directory has an old HORCM. Please uninstall the old HORCM and then retry installation."
}

trim_last_slant(){
  local _str=$1

  while [ -z "${_str##*/}" ] && [ ! -z ${_str} ]; do
    _str="${_str%*/}"
  done

  if [ -z $_str ]; then
    _str="/"
  fi

  echo $_str
}

sanitize_rmdir_name(){
  local _path=$1
  local _RMDIR=$2

  _path=`trim_last_slant $_path`

  # Check whether _path has "$_RMDIR" at last or not.
  if [ "${_path##*/}" = "${_RMDIR}" ]; then
    # trim last "$_RMDIR"
    _path="${_path%*${_RMDIR}}"
    _path=`trim_last_slant $_path`
  fi

  echo $_path
}



# These functions are used as instead of the 'awk' and 'set'
# that may not be able to use on the Multiplathome.

getn(){
  _argc=0
  _rval=0
  for _data in $*
  do
    _argc=`expr $_argc + 1`
    if [ $_argc -ne 1 ]
      then
        if [ $_argc -eq $_p1 ]
        then
          E1=$_data
          _rval=`expr $_argc - 1`
        fi
      else
        _p1=`expr $1 + 1`
    fi
  done
  return $_rval ;
}

#Example for getn():
#tdata="12 23 56 78"
#read tdata
#getn 1 $tdata
#echo $? $E1
#exit


getfnx1(){
  _argc=0
  _fargc=0
  _rval=0
  for _data in $*
  do
    _argc=`expr $_argc + 1`
    if [ $_argc -ne 1 ]
      then
        if [ $_fargc -eq 0 -a "$_data" = "$1" ]
          then
            _fargc=`expr $_argc + 1`
        fi
        if [ $_fargc -eq $_argc ]
          then
            E1=$_data
            _rval=`expr $_fargc - 1`
        fi
    fi
  done
  return $_rval ;
}

#Example for getfnx1():
#instdir=`ls -l /HORCM`
#instdir="lrwxrwxrwx   1 root  system   10 Apr 20 16:14 /HORCM -> /tmp/HORCM"
#getfnx1 "->" $instdir
#echo $? $E1
#exit


pnkill(){
  _pname=$1
  _pwait=0
  _pfind=1
  _psin=`/bin/ps -e | grep $_pname`

  while [ $_pfind -ne 0 -a "$_psin" != "" ]
  do
    _pfind=0
    set $_psin
    while [ $# -ge 4 ]
    do
      if [ "$4" = "$_pname" ]
        then
          _pfind=1
          if [ $_pwait -eq 0 ]
            then
              /bin/kill -9 $1
            else
              echo "Waiting to terminate $4 [PID = $1]."
          fi
      fi
      shift
    done
    if [ $_pfind -ne 0 ]
      then
        _pwait=1
        sleep 3
        _psin=`/bin/ps -e | grep $_pname`
    fi
  done ;
}


umask 0
curdir=`pwd`
osname=`uname`


ISLIBSUP=0
case $osname in
  HP-UX)
        osdir="HP-UX"
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="HP_UX"
        fi
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="hp_ux"
        fi
        ISLIBSUP=1 ;;
  SunOS)
        mchname=`uname -m`
        case $mchname in
        i*|e*|a*)
                osdir="XSOLARIS"
                if [ ! -d ${curdir}/${osdir} ]
                  then
                    osdir="xsolaris"
                fi
                ISLIBSUP=1 ;;
               *)
                osdir="SOLARIS"
                if [ ! -d ${curdir}/${osdir} ]
                  then
                    osdir="solaris"
                fi
                ISLIBSUP=1 ;;
        esac
        ;;
    AIX)
        osdir="AIX"
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="aix"
        fi
        ISLIBSUP=1 ;;
    OSF1)
        osdir="DIGITAL"
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="digital"
        fi
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="TRU"
        fi
        ISLIBSUP=1 ;;
  DYNIX/ptx)
        osdir="DYNIX"
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="dynix"
        fi
        ;;
  Linux)
        mchname=`uname -m`
        case $mchname in
        s39*)
             osdir="ZLINUX"
             if [ ! -d ${curdir}/${osdir} ]
               then
                 osdir="zlinux"
             fi
             ISLIBSUP=1 ;;
           *)
             osdir="LINUX"
             if [ ! -d ${curdir}/${osdir} ]
               then
                 osdir="linux"
             fi
             if [ "${mchname}" = "x86_64" ]; then
               func_arbit_path_support_flag=$supported
               if [ "$opt1" = "$arbitrary_path_arg" ]; then
                 install_mode=$arbit
               fi
             fi
             ISLIBSUP=1 ;;
        esac
        ;;
  MPE/iX)
        osdir="MPE"
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="mpe"
        fi
        ISLIBSUP=1 ;;
  IRIX64)
        osdir="IRIX"
        if [ ! -d ${curdir}/${osdir} ]
          then
            osdir="irix"
        fi
        ISLIBSUP=1 ;;
  UNIX_SV)
        osdir="UNIX_SV" ;;
      *)
        echo "Raid Manager does not support OS(${osname}) on this machine."
        echo "Please refer to the readme for RM."
        exit 1 ;;
esac



if [ $ISRMLIB -eq 1 -a $ISLIBSUP -eq 0 ]
  then
    echo "$RMDIR does not support OS(${osname}) on this machine."
    echo "Please refer to the readme for ${RMDIR}."
    exit 1    
fi
    


DIR_MAX=70
if [ $install_mode -eq $arbit ]
then
  print_arbit_mode_header
  while :
  do
    tmp_dirname=""
    print_install_directory_message
    read read_directory
    if [ ! -n "$read_directory" ]; then
      continue
    fi
    getn 1 $read_directory
    directory=$E1
    notupdate=0
    update=1
    update_or_not=$notupdate
    if [ ! -d $directory ]; then
      echo "A specified directory '${directory}' does not existing as a directory."
      continue
    fi
    directory=`cd $directory; pwd`
    directory=`sanitize_rmdir_name $directory $RMDIR`
    if [ ${#directory} -gt $DIR_MAX ]; then
      echo "The specified directory path is too long. Please input an absolute path within 70 characters."
      continue
    fi
    if [ $directory = "/" ]; then
      tmp_dirname="/${RMDIR}"
    else
      tmp_dirname="${directory}/${RMDIR}"
    fi
    if [ -e "$tmp_dirname" ]; then
      if [ ! -d "$tmp_dirname" ] || [ -L "$tmp_dirname" ]; then
        echo "A specified directory '$tmp_dirname' does not existing as a directory or exist as a symbolic link."
        continue
      fi
      if [ -e ${tmp_dirname}/usr/bin/RM ] || [ -e ${tmp_dirname}/usr/bin/RMXP ]; then
        if [ ! -e ${tmp_dirname}/usr/bin/.APATH ] ; then
          print_update_install_failed_by_install_mode_mix
          continue
        fi
        update_or_not=$update
      fi
    fi
    break
  done

  RMROOT="$directory"
  RMPTH=$tmp_dirname

  if [ $update_or_not -eq $notupdate ]
  then
    newinst=$newInstall
    print_new_installation_message $RMPTH
  else
    newinst=$updateInstall
    print_update_message $RMPTH

    while :
    do
      print_confirm_continuing_update $RMPTH
      read confirmation
      case $confirmation in
        [yY][eE][sS]|[yY])
        break
        ;;
        [nN][oO]|[nN])
        echo "Terminated without installation."
        exit 0
        ;;
        *)
        continue
        ;;
      esac
    done
  fi

  cd "$RMROOT"

else    #### [ $install_mode -eq $arbit ]
  #### To avoid fixing amount of lines, no fixed their indents.

if [ -d $RMPTH -o -h $RMPTH ]
  then
    newinst=0 
    if [ -h $RMPTH ]
      then
        instdir=`/bin/ls -l $RMPTH`
        getfnx1 "->" $instdir
        cd $E1
      else
        cd $RMPTH 
    fi        
    cd ..
    curinstdir=`pwd`
   
    echo "******************* Confirmation for Version Up of the ${RMDIR}.********************"
    echo "Please confirms whether $MGRNM has performing or not."
    if [ $ISRMLIB -ne 1 ]
      then
        echo "If $MGRNM has performing then stop by using horcmshutdown.sh and please try again."
        echo "- In case of 1 instance configuration of HORCM"
        echo "  # horcmshutdown.sh"
        echo "- In case of multiple instances configuration of HORCM"
        echo "  # horcmshutdown.sh  0 1 ..."
        echo "Also If HORC commands has performing in the interactive mode"
        echo "then terminates these commands by using -q option."
      else
        echo "If $MGRNM has performing then stop the Manager and please try again."
    fi
    echo "Please choose from the following for Version Up of the ${RMDIR}."
  else
    newinst=2
    echo "**************** Confirmation for New Introduction of the ${RMDIR}.*****************"
    echo "Please specify a directory(recommends except '/') for the installation."
fi

go=1
while [ $go -ne 0 ]
do
  if [ $newinst -eq 0 ]
    then
      echo "For install to the same directory -> please enter 'return key' for installs to '${curinstdir}'."
      echo "For preserve to another directory -> please enter a 'directory'."
    else
      echo "For continue -> please enter a 'directory'."
  fi
  echo "For cancel   -> please enter 'exit'." 
 
  read arg
  getn 1 $arg 
  if [ $? -ne 0 ]
    then
      if [ "$E1" = "exit" ]
        then
          exit 1
        else
          if [ -d $E1 ] 
            then
              cd $E1
              if [ $newinst -eq 0 ]
                then
                  instdir=`pwd`
                  if [ "$instdir" != "$curinstdir" -a "$instdir" != "$RMROOT" ]
                    then
                      newinst=1
                      go=0
                    else
                      echo "A specified directory '${E1}' is already installing directory as '${RMDIR}'."
                  fi
                elif [ $newinst -eq $newInstall ]; then
                  if [ $func_arbit_path_support_flag -eq $supported ]; then
                    if [ -e $E1/$RMDIR/usr/bin/.APATH ]; then
                      print_update_install_failed_by_install_mode_mix
                      continue
                    fi
                  fi
                  go=0
                else
                  go=0
              fi 
            else
              echo "A specified directory '${E1}' does not existing as a directory."
          fi
      fi
    elif [ $newinst -eq 0 ]
    then
      if [ $func_arbit_path_support_flag -eq $supported ]; then
        if [ -e $E1/$RMDIR/usr/bin/.APATH ]; then
          print_update_install_failed_by_install_mode_mix
          continue
        fi
      fi
      go=0
  fi    
done

fi     #### [ $install_mode -eq $arbit ]

if [ "$osname" = "HP-UX" -a $ISRMLIB -ne 1 ]
  then
    pnkill "inqraid" 
fi

instdir=`pwd`
if [ "$instdir" = "/" ]
  then
    instrmdir="/$RMDIR"
  else
    instrmdir="${instdir}/$RMDIR"
fi

infile=""
for objnm in $RMOBJ
do
  if [ -f ${curdir}/${osdir}/$objnm ]
    then
      infile=${curdir}/${osdir}/$objnm
    elif [ -f ${curdir}/$objnm ] 
    then
      infile=${curdir}/$objnm
  fi     
done

docpio=1
if [ "$infile" = ""  ]
  then
    if [ $ISRMLIB -ne 1 ]
      then 
        echo "RMXP or RMHORC does not exist to '${curdir}' or '${curdir}/${osdir}'."
      else
        echo "RMLIB does not exist to '${curdir}' or '${curdir}/${osdir}'."
    fi
    echo "Please confirms whether your directory has mounting to '${RMDIRCD}' on the CD."

    docpio=0
    go=1
    while [ $go -ne 0 ]
    do
      if [ $docpio -eq 2 ]
        then
          echo "For repeat   -> please enter 'return key' for repeats '${E1}'."
          echo "For end      -> please enter 'end' for ends '${E1}'." 
        else
          echo "For continue -> please enter 'Input Device Name(/dev/...)' or 'File Name(Full path)'."
      fi
      echo "For cancel   -> please enter 'exit'."
      read arg
      getn 1 $arg 
      if [ $? -ne 0 ]
        then
          if [ "$E1" = "exit" ]
            then
              exit 1
            elif [ "$E1" = "end" ] 
            then
              go=0
            else
              if [ "$osname" != "MPE/iX" ]
                then
                  echo "cpio -idmu < $E1"
                  /bin/cpio -idmu < $E1
                elif [ $newinst -eq 0 ] 
                then
                  echo "tar xfp $E1"
                  /bin/tar xfp $E1 2>/dev/null
                else
                  echo "tar xfp $E1"
                  /bin/tar xfp $E1
              fi
              status=$?       
              if [ $status -eq 0 ]
                then
                  docpio=2
              fi
          fi
        elif [ $docpio -eq 2 ]
          then
            if [ "$osname" != "MPE/iX" ]
              then
                echo "cpio -idmu < $E1"
                /bin/cpio -idmu < $E1
              elif [ $newinst -eq 0 ] 
              then
                echo "tar xfp $E1"
                /bin/tar xfp $E1 2>/dev/null
              else
                echo "tar xfp $E1"
                /bin/tar xfp $E1
            fi
            status=$?       
      fi
    done      
fi

if [ $docpio -eq 0 ]
  then
    echo "This installation was canceled."
    exit 1
  elif [ $docpio -eq 1 ]
  then
    if [ "$osname" != "MPE/iX" ]
      then
        echo "cpio -idmu < $infile"
        /bin/cpio -idmu < $infile
      elif [ $newinst -eq 0 ] 
      then
        echo "tar xfp $infile"
        /bin/tar xfp $infile 2>/dev/null 
      else
        echo "tar xfp $infile"
        /bin/tar xfp $infile 
    fi
    status=$?
fi

# MPE/iX POSIX tar command cannot be creating directorys already existing.

if [ $newinst -eq 0 -a "$osname" = "MPE/iX" ]
  then
    status=0 
fi


if [ $status -ne 0 ]
  then
    if [ "$osname" != "MPE/iX" ]
      then
        echo "This installation was canceled because of that 'cpio' has been failed."
      else
        echo "This installation was canceled because of that 'tar' has been failed."
    fi
    echo "Please confirms whether $MGRNM has performing or not."
    if [ $ISRMLIB -ne 1 ]
      then
        echo "If $MGRNM has performing then stop by using horcmshutdown.sh and please try again."
      else
        echo "If $MGRNM has performing then stop the Manager and please try again."
    fi
    exit 1
fi

# I do not be writing myself.

infile=""
for objnm in $UNIOBJ
do
  if [ -f ${curdir}/$objnm ]
    then
      infile=${curdir}/$objnm
  fi     
done

if [ ! -f ${instrmdir}/${uninsh} -a "$infile" != "" ]
  then
    /bin/cp $infile ${instrmdir}/${uninsh}
    /bin/chmod  544 ${instrmdir}/${uninsh}
fi

# I do not be writing myself.

infile=""
for objnm in $INSOBJ
do
  if [ -f ${curdir}/$objnm ]
    then
      infile=${curdir}/$objnm
  fi     
done

if [ ! -f ${instrmdir}/${instsh} -a "$infile" != "" ]
  then
    /bin/cp $infile ${instrmdir}/${instsh}
    /bin/chmod 544  ${instrmdir}/${instsh}
fi

if [ $install_mode -eq $arbit ]
then
  if [ ! -e ${instrmdir}/usr/bin/.APATH ]
  then
    /bin/touch ${instrmdir}/usr/bin/.APATH
    if [ $? -ne 0 ]
    then
      print_apath_file_creation_failed_message ${instrmdir}
      exit 1
    fi
    /bin/chmod 0444 ${instrmdir}/usr/bin/.APATH
    /bin/chgrp sys ${instrmdir}/usr/bin/.APATH
  fi
fi

if [ $newinst -eq 2 -a "$instrmdir" != "$RMPTH" -a $install_mode -ne $arbit ]
  then
    /bin/ln -s $instrmdir  $RMPTH
fi


cd $instrmdir

if [ $newinst -ne 1 -a $install_mode -ne $arbit ]
  then
    ${instrmdir}/$LINKSH > /dev/null
fi


if [ $ISRMLIB -ne 1 ]
  then
    if [ $newinst -ne 1 -a $install_mode -ne $arbit ]
      then
        ver=`raidqry -h`
      else
        ver=`${instrmdir}/usr/bin/raidqry -h`
    fi
    status=$?
  else
    ver=`${instrmdir}/bin/whatrmver`
    if [ "$ver" = ""  ]
      then
        status=1
      else
        status=0
    fi
fi

if [ $status -ne 0 ]
  then 
    echo "This installation was failed."
    exit 1
fi

set $ver
if [ $newinst -ne 1 ]
  then
    if [ $install_mode -ne $arbit ]
    then
      echo "The following model was installed to '${instrmdir}' under as '${RMPTH}'."
    else
      echo "The following model was installed to '${instrmdir}'."
    fi
  else
    echo "The following model was preserved to '${instrmdir}' under."
fi

if [ $install_mode -ne $arbit ]
then
  echo "When you have to uninstall of the ${RMDIR},please executes the following $uninsh command."
else
  echo "When you have to uninstall of the ${RMDIR}, please executes 'rm -rf ${instrmdir}'."
fi
if [ $newinst -eq 1 ]
  then
    echo "Also you have to execute 'Changing option of ${uninsh}' when you will be changing to this new version."
  else
    if [ $install_mode -ne $arbit ]
      then
        echo "When you also have to be installing by floppy or tape,please executes the following $instsh command."
    fi
fi

if [ $ISRMLIB -ne 1 ]
  then
    if [ "$3" = "P9000" -o "$3" = "XP7" ]
      then
        echo "[ $1 $2 $3 $4 $5 $6 ]"
      else
        echo "[ $1 $2 $3 $4 $5 ]"
    fi
  else
    if [ $newinst -ne 1 ]
      then
        echo "[ $1 $2 $3 for $RMDIR ]"
      else
        echo "[ $1 $2 $3 for current $RMDIR ]"
    fi
fi
echo "--------------------------------------------------------------------------------"
/bin/ls $instrmdir
echo "--------------------------------------------------------------------------------"

if [ $ISRMLIB -ne 1 -a $ISLIBSUP -eq 1 -a $newinst -ne 1 ]
  then
    echo "[NOTE]:"
    echo "  When you uses the following software for backup etc,please install RMLIB"
    echo "  by using $RLinst of '../RL' directory under on the CD."
    echo "  - Enterprise SnapShot software which is provided by BMC."
    echo "  - Remote performance monitor which is provided by HPE."
    echo "  - Omniback software which is provided by HPE."
    echo "  - RAID management software which is provided by HPE or other ISV."
fi
exit 0




